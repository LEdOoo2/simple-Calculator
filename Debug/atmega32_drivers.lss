
atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  000036ee  00003782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000bc  008000bc  000037de  2**0
                  ALLOC
  3 .stab         0000363c  00000000  00000000  000037e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018c5  00000000  00000000  00006e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000086e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000089d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000aa15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000bb16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ca98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ceda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__vector_1>
       8:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__vector_2>
       c:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 19 	call	0x331a	; 0x331a <main>
      8a:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 46 1b 	jmp	0x368c	; 0x368c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4a 1b 	jmp	0x3694	; 0x3694 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <KEYPAD_init>:
																		{'4','5','6','*'},
																		{'1','2','3','-'},
																		{'#','0','=','+'}};

Std_ReturnType KEYPAD_init(const keypad_t *keypad_object)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <KEYPAD_init+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <KEYPAD_init+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9d 83       	std	Y+5, r25	; 0x05
     cae:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType retValue = ERROR_NOT_OK;
     cb0:	1b 82       	std	Y+3, r1	; 0x03

	if(keypad_object == NULL)
     cb2:	8c 81       	ldd	r24, Y+4	; 0x04
     cb4:	9d 81       	ldd	r25, Y+5	; 0x05
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	11 f4       	brne	.+4      	; 0xcbe <KEYPAD_init+0x20>
	{
		retValue = ERROR_NULL;
     cba:	1b 82       	std	Y+3, r1	; 0x03
     cbc:	4c c0       	rjmp	.+152    	; 0xd56 <KEYPAD_init+0xb8>
	}
	else
	{
		int i=0;
     cbe:	1a 82       	std	Y+2, r1	; 0x02
     cc0:	19 82       	std	Y+1, r1	; 0x01
		for(i=0;i<KEYPAD_ROWS_NUMBER;i++)
     cc2:	1a 82       	std	Y+2, r1	; 0x02
     cc4:	19 82       	std	Y+1, r1	; 0x01
     cc6:	13 c0       	rjmp	.+38     	; 0xcee <KEYPAD_init+0x50>
		{
			retValue = DIO_pin_init(&keypad_object->pin_row[i]);
     cc8:	4c 81       	ldd	r20, Y+4	; 0x04
     cca:	5d 81       	ldd	r21, Y+5	; 0x05
     ccc:	29 81       	ldd	r18, Y+1	; 0x01
     cce:	3a 81       	ldd	r19, Y+2	; 0x02
     cd0:	c9 01       	movw	r24, r18
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	82 0f       	add	r24, r18
     cd8:	93 1f       	adc	r25, r19
     cda:	84 0f       	add	r24, r20
     cdc:	95 1f       	adc	r25, r21
     cde:	0e 94 97 12 	call	0x252e	; 0x252e <DIO_pin_init>
     ce2:	8b 83       	std	Y+3, r24	; 0x03
		retValue = ERROR_NULL;
	}
	else
	{
		int i=0;
		for(i=0;i<KEYPAD_ROWS_NUMBER;i++)
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	84 30       	cpi	r24, 0x04	; 4
     cf4:	91 05       	cpc	r25, r1
     cf6:	44 f3       	brlt	.-48     	; 0xcc8 <KEYPAD_init+0x2a>
		{
			retValue = DIO_pin_init(&keypad_object->pin_row[i]);
		}

		for(i=0;i<KEYPAD_COLUMN_NUMBER;i++)
     cf8:	1a 82       	std	Y+2, r1	; 0x02
     cfa:	19 82       	std	Y+1, r1	; 0x01
     cfc:	27 c0       	rjmp	.+78     	; 0xd4c <KEYPAD_init+0xae>
		{
			retValue = DIO_pin_init(&keypad_object->pin_col[i]);
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	ac 01       	movw	r20, r24
     d04:	44 5f       	subi	r20, 0xF4	; 244
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	29 81       	ldd	r18, Y+1	; 0x01
     d0a:	3a 81       	ldd	r19, Y+2	; 0x02
     d0c:	c9 01       	movw	r24, r18
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	82 0f       	add	r24, r18
     d14:	93 1f       	adc	r25, r19
     d16:	84 0f       	add	r24, r20
     d18:	95 1f       	adc	r25, r21
     d1a:	0e 94 97 12 	call	0x252e	; 0x252e <DIO_pin_init>
     d1e:	8b 83       	std	Y+3, r24	; 0x03
			retValue = DIO_pin_pull_up_active(&keypad_object->pin_col[i]);
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	9d 81       	ldd	r25, Y+5	; 0x05
     d24:	ac 01       	movw	r20, r24
     d26:	44 5f       	subi	r20, 0xF4	; 244
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
     d2a:	29 81       	ldd	r18, Y+1	; 0x01
     d2c:	3a 81       	ldd	r19, Y+2	; 0x02
     d2e:	c9 01       	movw	r24, r18
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	84 0f       	add	r24, r20
     d3a:	95 1f       	adc	r25, r21
     d3c:	0e 94 43 16 	call	0x2c86	; 0x2c86 <DIO_pin_pull_up_active>
     d40:	8b 83       	std	Y+3, r24	; 0x03
		for(i=0;i<KEYPAD_ROWS_NUMBER;i++)
		{
			retValue = DIO_pin_init(&keypad_object->pin_row[i]);
		}

		for(i=0;i<KEYPAD_COLUMN_NUMBER;i++)
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	91 05       	cpc	r25, r1
     d54:	a4 f2       	brlt	.-88     	; 0xcfe <KEYPAD_init+0x60>
		{
			retValue = DIO_pin_init(&keypad_object->pin_col[i]);
			retValue = DIO_pin_pull_up_active(&keypad_object->pin_col[i]);
		}
	}
	return retValue;
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <KEYPAD_read>:

uint8 KEYPAD_read(const keypad_t *keypad_object,uint8	*value)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	67 97       	sbiw	r28, 0x17	; 23
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	9d 8b       	std	Y+21, r25	; 0x15
     d7e:	8c 8b       	std	Y+20, r24	; 0x14
     d80:	7f 8b       	std	Y+23, r23	; 0x17
     d82:	6e 8b       	std	Y+22, r22	; 0x16
	uint8 flag=0;
     d84:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 rowCounter=0;
     d86:	19 8a       	std	Y+17, r1	; 0x11
	uint8 colCounter=0;
     d88:	18 8a       	std	Y+16, r1	; 0x10
	uint8 counter=0;
     d8a:	1f 86       	std	Y+15, r1	; 0x0f
	logic_t key_state = HIGH;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	8b 8b       	std	Y+19, r24	; 0x13

	for(rowCounter=0;rowCounter<KEYPAD_ROWS_NUMBER;rowCounter++)
     d90:	19 8a       	std	Y+17, r1	; 0x11
     d92:	d7 c0       	rjmp	.+430    	; 0xf42 <KEYPAD_read+0x1da>
	{
		for(counter=0;counter<KEYPAD_ROWS_NUMBER;counter++)
     d94:	1f 86       	std	Y+15, r1	; 0x0f
     d96:	12 c0       	rjmp	.+36     	; 0xdbc <KEYPAD_read+0x54>
			{
				DIO_pin_write(&keypad_object->pin_row[counter], HIGH);
     d98:	4c 89       	ldd	r20, Y+20	; 0x14
     d9a:	5d 89       	ldd	r21, Y+21	; 0x15
     d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	c9 01       	movw	r24, r18
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	82 0f       	add	r24, r18
     daa:	93 1f       	adc	r25, r19
     dac:	84 0f       	add	r24, r20
     dae:	95 1f       	adc	r25, r21
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <DIO_pin_write>
	uint8 counter=0;
	logic_t key_state = HIGH;

	for(rowCounter=0;rowCounter<KEYPAD_ROWS_NUMBER;rowCounter++)
	{
		for(counter=0;counter<KEYPAD_ROWS_NUMBER;counter++)
     db6:	8f 85       	ldd	r24, Y+15	; 0x0f
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	8f 87       	std	Y+15, r24	; 0x0f
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	58 f3       	brcs	.-42     	; 0xd98 <KEYPAD_read+0x30>
			{
				DIO_pin_write(&keypad_object->pin_row[counter], HIGH);
			}

				DIO_pin_write(&keypad_object->pin_row[rowCounter], LOW);
     dc2:	4c 89       	ldd	r20, Y+20	; 0x14
     dc4:	5d 89       	ldd	r21, Y+21	; 0x15
     dc6:	89 89       	ldd	r24, Y+17	; 0x11
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	c9 01       	movw	r24, r18
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	84 0f       	add	r24, r20
     dd8:	95 1f       	adc	r25, r21
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	0e 94 74 14 	call	0x28e8	; 0x28e8 <DIO_pin_write>


				for(colCounter=0;colCounter<KEYPAD_COLUMN_NUMBER;colCounter++)
     de0:	18 8a       	std	Y+16, r1	; 0x10
     de2:	a5 c0       	rjmp	.+330    	; 0xf2e <KEYPAD_read+0x1c6>
				{
					DIO_pin_read(&keypad_object->pin_col[colCounter],&key_state);
     de4:	8c 89       	ldd	r24, Y+20	; 0x14
     de6:	9d 89       	ldd	r25, Y+21	; 0x15
     de8:	ac 01       	movw	r20, r24
     dea:	44 5f       	subi	r20, 0xF4	; 244
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	88 89       	ldd	r24, Y+16	; 0x10
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	c9 01       	movw	r24, r18
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	82 0f       	add	r24, r18
     dfc:	93 1f       	adc	r25, r19
     dfe:	84 0f       	add	r24, r20
     e00:	95 1f       	adc	r25, r21
     e02:	9e 01       	movw	r18, r28
     e04:	2d 5e       	subi	r18, 0xED	; 237
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	b9 01       	movw	r22, r18
     e0a:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_pin_read>
					if(key_state == LOW)
     e0e:	8b 89       	ldd	r24, Y+19	; 0x13
     e10:	88 23       	and	r24, r24
     e12:	09 f0       	breq	.+2      	; 0xe16 <KEYPAD_read+0xae>
     e14:	89 c0       	rjmp	.+274    	; 0xf28 <KEYPAD_read+0x1c0>
					{
						*value = keypadValues[rowCounter][colCounter];
     e16:	89 89       	ldd	r24, Y+17	; 0x11
     e18:	48 2f       	mov	r20, r24
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	88 89       	ldd	r24, Y+16	; 0x10
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	ca 01       	movw	r24, r20
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	82 0f       	add	r24, r18
     e2e:	93 1f       	adc	r25, r19
     e30:	fc 01       	movw	r30, r24
     e32:	e9 58       	subi	r30, 0x89	; 137
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	ee 89       	ldd	r30, Y+22	; 0x16
     e3a:	ff 89       	ldd	r31, Y+23	; 0x17
     e3c:	80 83       	st	Z, r24
						flag=1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8a 8b       	std	Y+18, r24	; 0x12
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	a8 ec       	ldi	r26, 0xC8	; 200
     e48:	b3 e4       	ldi	r27, 0x43	; 67
     e4a:	8b 87       	std	Y+11, r24	; 0x0b
     e4c:	9c 87       	std	Y+12, r25	; 0x0c
     e4e:	ad 87       	std	Y+13, r26	; 0x0d
     e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e52:	6b 85       	ldd	r22, Y+11	; 0x0b
     e54:	7c 85       	ldd	r23, Y+12	; 0x0c
     e56:	8d 85       	ldd	r24, Y+13	; 0x0d
     e58:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	4a ef       	ldi	r20, 0xFA	; 250
     e60:	54 e4       	ldi	r21, 0x44	; 68
     e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	8f 83       	std	Y+7, r24	; 0x07
     e6c:	98 87       	std	Y+8, r25	; 0x08
     e6e:	a9 87       	std	Y+9, r26	; 0x09
     e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	5f e3       	ldi	r21, 0x3F	; 63
     e82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e86:	88 23       	and	r24, r24
     e88:	2c f4       	brge	.+10     	; 0xe94 <KEYPAD_read+0x12c>
		__ticks = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	3f c0       	rjmp	.+126    	; 0xf12 <KEYPAD_read+0x1aa>
	else if (__tmp > 65535)
     e94:	6f 81       	ldd	r22, Y+7	; 0x07
     e96:	78 85       	ldd	r23, Y+8	; 0x08
     e98:	89 85       	ldd	r24, Y+9	; 0x09
     e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	3f ef       	ldi	r19, 0xFF	; 255
     ea0:	4f e7       	ldi	r20, 0x7F	; 127
     ea2:	57 e4       	ldi	r21, 0x47	; 71
     ea4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	4c f5       	brge	.+82     	; 0xefe <KEYPAD_read+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eac:	6b 85       	ldd	r22, Y+11	; 0x0b
     eae:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e2       	ldi	r20, 0x20	; 32
     eba:	51 e4       	ldi	r21, 0x41	; 65
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	bc 01       	movw	r22, r24
     ec6:	cd 01       	movw	r24, r26
     ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <KEYPAD_read+0x18c>
     ed6:	88 ec       	ldi	r24, 0xC8	; 200
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9c 83       	std	Y+4, r25	; 0x04
     edc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <KEYPAD_read+0x17a>
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	69 f7       	brne	.-38     	; 0xed6 <KEYPAD_read+0x16e>
     efc:	1c c0       	rjmp	.+56     	; 0xf36 <KEYPAD_read+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	9a 83       	std	Y+2, r25	; 0x02
     f18:	89 83       	std	Y+1, r24	; 0x01
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <KEYPAD_read+0x1b6>
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <KEYPAD_read+0x1ce>
			}

				DIO_pin_write(&keypad_object->pin_row[rowCounter], LOW);


				for(colCounter=0;colCounter<KEYPAD_COLUMN_NUMBER;colCounter++)
     f28:	88 89       	ldd	r24, Y+16	; 0x10
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	88 8b       	std	Y+16, r24	; 0x10
     f2e:	88 89       	ldd	r24, Y+16	; 0x10
     f30:	84 30       	cpi	r24, 0x04	; 4
     f32:	08 f4       	brcc	.+2      	; 0xf36 <KEYPAD_read+0x1ce>
     f34:	57 cf       	rjmp	.-338    	; 0xde4 <KEYPAD_read+0x7c>
						flag=1;
						_delay_ms(400);
						break;
					}
				}
				if(key_state == LOW)	{break;}
     f36:	8b 89       	ldd	r24, Y+19	; 0x13
     f38:	88 23       	and	r24, r24
     f3a:	39 f0       	breq	.+14     	; 0xf4a <KEYPAD_read+0x1e2>
	uint8 rowCounter=0;
	uint8 colCounter=0;
	uint8 counter=0;
	logic_t key_state = HIGH;

	for(rowCounter=0;rowCounter<KEYPAD_ROWS_NUMBER;rowCounter++)
     f3c:	89 89       	ldd	r24, Y+17	; 0x11
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	89 8b       	std	Y+17, r24	; 0x11
     f42:	89 89       	ldd	r24, Y+17	; 0x11
     f44:	84 30       	cpi	r24, 0x04	; 4
     f46:	08 f4       	brcc	.+2      	; 0xf4a <KEYPAD_read+0x1e2>
     f48:	25 cf       	rjmp	.-438    	; 0xd94 <KEYPAD_read+0x2c>
					}
				}
				if(key_state == LOW)	{break;}
	}

	return flag;
     f4a:	8a 89       	ldd	r24, Y+18	; 0x12
}
     f4c:	67 96       	adiw	r28, 0x17	; 23
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <lcd_send_4bit>:
#include "../../std_types.h"
#include "../../bit_masking.h"
#include "lcd.h"

static Std_ReturnType lcd_send_4bit(const lcd_4bit_t *lcd, uint8 data_command)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <lcd_send_4bit+0x6>
     f64:	00 d0       	rcall	.+0      	; 0xf66 <lcd_send_4bit+0x8>
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	9c 83       	std	Y+4, r25	; 0x04
     f6e:	8b 83       	std	Y+3, r24	; 0x03
     f70:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType retValue= ERROR_NOT_OK;
     f72:	1a 82       	std	Y+2, r1	; 0x02

	if(lcd == NULL)
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	11 f4       	brne	.+4      	; 0xf80 <lcd_send_4bit+0x22>
	{
		retValue= ERROR_NULL;
     f7c:	1a 82       	std	Y+2, r1	; 0x02
     f7e:	2c c0       	rjmp	.+88     	; 0xfd8 <lcd_send_4bit+0x7a>
	}
	else
	{
		uint8 counter=0;
     f80:	19 82       	std	Y+1, r1	; 0x01
		for(counter=0;counter<4;counter++)
     f82:	19 82       	std	Y+1, r1	; 0x01
     f84:	26 c0       	rjmp	.+76     	; 0xfd2 <lcd_send_4bit+0x74>
		{
			retValue = DIO_pin_write(&(lcd->lcd_data[counter]),(data_command >> counter )&(uint8)0x01);
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	ac 01       	movw	r20, r24
     f8c:	4a 5f       	subi	r20, 0xFA	; 250
     f8e:	5f 4f       	sbci	r21, 0xFF	; 255
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	c9 01       	movw	r24, r18
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	48 0f       	add	r20, r24
     fa2:	59 1f       	adc	r21, r25
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	b9 01       	movw	r22, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <lcd_send_4bit+0x5a>
     fb4:	75 95       	asr	r23
     fb6:	67 95       	ror	r22
     fb8:	8a 95       	dec	r24
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <lcd_send_4bit+0x56>
     fbc:	cb 01       	movw	r24, r22
     fbe:	28 2f       	mov	r18, r24
     fc0:	21 70       	andi	r18, 0x01	; 1
     fc2:	ca 01       	movw	r24, r20
     fc4:	62 2f       	mov	r22, r18
     fc6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <DIO_pin_write>
     fca:	8a 83       	std	Y+2, r24	; 0x02
		retValue= ERROR_NULL;
	}
	else
	{
		uint8 counter=0;
		for(counter=0;counter<4;counter++)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	84 30       	cpi	r24, 0x04	; 4
     fd6:	b8 f2       	brcs	.-82     	; 0xf86 <lcd_send_4bit+0x28>
		{
			retValue = DIO_pin_write(&(lcd->lcd_data[counter]),(data_command >> counter )&(uint8)0x01);
		}
	}
	return retValue;
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <lcd_4bit_send_enable_signal>:

static Std_ReturnType lcd_4bit_send_enable_signal(const lcd_4bit_t *lcd)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	e3 97       	sbiw	r28, 0x33	; 51
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	9b ab       	std	Y+51, r25	; 0x33
    1000:	8a ab       	std	Y+50, r24	; 0x32
	Std_ReturnType retValue= ERROR_NOT_OK;
    1002:	19 aa       	std	Y+49, r1	; 0x31

	if(lcd == NULL)
    1004:	8a a9       	ldd	r24, Y+50	; 0x32
    1006:	9b a9       	ldd	r25, Y+51	; 0x33
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	11 f4       	brne	.+4      	; 0x1010 <lcd_4bit_send_enable_signal+0x26>
	{
		retValue= ERROR_NULL;
    100c:	19 aa       	std	Y+49, r1	; 0x31
    100e:	8a c1       	rjmp	.+788    	; 0x1324 <lcd_4bit_send_enable_signal+0x33a>
	}
	else
	{
		retValue = DIO_pin_write(&lcd->EN, HIGH);
    1010:	8a a9       	ldd	r24, Y+50	; 0x32
    1012:	9b a9       	ldd	r25, Y+51	; 0x33
    1014:	03 96       	adiw	r24, 0x03	; 3
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	0e 94 74 14 	call	0x28e8	; 0x28e8 <DIO_pin_write>
    101c:	89 ab       	std	Y+49, r24	; 0x31
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a0 ea       	ldi	r26, 0xA0	; 160
    1024:	b0 e4       	ldi	r27, 0x40	; 64
    1026:	8d a7       	std	Y+45, r24	; 0x2d
    1028:	9e a7       	std	Y+46, r25	; 0x2e
    102a:	af a7       	std	Y+47, r26	; 0x2f
    102c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    102e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1030:	7e a5       	ldd	r23, Y+46	; 0x2e
    1032:	8f a5       	ldd	r24, Y+47	; 0x2f
    1034:	98 a9       	ldd	r25, Y+48	; 0x30
    1036:	2b ea       	ldi	r18, 0xAB	; 171
    1038:	3a ea       	ldi	r19, 0xAA	; 170
    103a:	4a e2       	ldi	r20, 0x2A	; 42
    103c:	50 e4       	ldi	r21, 0x40	; 64
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	89 a7       	std	Y+41, r24	; 0x29
    1048:	9a a7       	std	Y+42, r25	; 0x2a
    104a:	ab a7       	std	Y+43, r26	; 0x2b
    104c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    104e:	69 a5       	ldd	r22, Y+41	; 0x29
    1050:	7a a5       	ldd	r23, Y+42	; 0x2a
    1052:	8b a5       	ldd	r24, Y+43	; 0x2b
    1054:	9c a5       	ldd	r25, Y+44	; 0x2c
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e8       	ldi	r20, 0x80	; 128
    105c:	5f e3       	ldi	r21, 0x3F	; 63
    105e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1062:	88 23       	and	r24, r24
    1064:	1c f4       	brge	.+6      	; 0x106c <lcd_4bit_send_enable_signal+0x82>
		__ticks = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	88 a7       	std	Y+40, r24	; 0x28
    106a:	91 c0       	rjmp	.+290    	; 0x118e <lcd_4bit_send_enable_signal+0x1a4>
	else if (__tmp > 255)
    106c:	69 a5       	ldd	r22, Y+41	; 0x29
    106e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1070:	8b a5       	ldd	r24, Y+43	; 0x2b
    1072:	9c a5       	ldd	r25, Y+44	; 0x2c
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4f e7       	ldi	r20, 0x7F	; 127
    107a:	53 e4       	ldi	r21, 0x43	; 67
    107c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1080:	18 16       	cp	r1, r24
    1082:	0c f0       	brlt	.+2      	; 0x1086 <lcd_4bit_send_enable_signal+0x9c>
    1084:	7b c0       	rjmp	.+246    	; 0x117c <lcd_4bit_send_enable_signal+0x192>
	{
		_delay_ms(__us / 1000.0);
    1086:	6d a5       	ldd	r22, Y+45	; 0x2d
    1088:	7e a5       	ldd	r23, Y+46	; 0x2e
    108a:	8f a5       	ldd	r24, Y+47	; 0x2f
    108c:	98 a9       	ldd	r25, Y+48	; 0x30
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4a e7       	ldi	r20, 0x7A	; 122
    1094:	54 e4       	ldi	r21, 0x44	; 68
    1096:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8c a3       	std	Y+36, r24	; 0x24
    10a0:	9d a3       	std	Y+37, r25	; 0x25
    10a2:	ae a3       	std	Y+38, r26	; 0x26
    10a4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a6:	6c a1       	ldd	r22, Y+36	; 0x24
    10a8:	7d a1       	ldd	r23, Y+37	; 0x25
    10aa:	8e a1       	ldd	r24, Y+38	; 0x26
    10ac:	9f a1       	ldd	r25, Y+39	; 0x27
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4a ef       	ldi	r20, 0xFA	; 250
    10b4:	54 e4       	ldi	r21, 0x44	; 68
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	88 a3       	std	Y+32, r24	; 0x20
    10c0:	99 a3       	std	Y+33, r25	; 0x21
    10c2:	aa a3       	std	Y+34, r26	; 0x22
    10c4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    10c6:	68 a1       	ldd	r22, Y+32	; 0x20
    10c8:	79 a1       	ldd	r23, Y+33	; 0x21
    10ca:	8a a1       	ldd	r24, Y+34	; 0x22
    10cc:	9b a1       	ldd	r25, Y+35	; 0x23
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e8       	ldi	r20, 0x80	; 128
    10d4:	5f e3       	ldi	r21, 0x3F	; 63
    10d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10da:	88 23       	and	r24, r24
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <lcd_4bit_send_enable_signal+0xfe>
		__ticks = 1;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9f 8f       	std	Y+31, r25	; 0x1f
    10e4:	8e 8f       	std	Y+30, r24	; 0x1e
    10e6:	3f c0       	rjmp	.+126    	; 0x1166 <lcd_4bit_send_enable_signal+0x17c>
	else if (__tmp > 65535)
    10e8:	68 a1       	ldd	r22, Y+32	; 0x20
    10ea:	79 a1       	ldd	r23, Y+33	; 0x21
    10ec:	8a a1       	ldd	r24, Y+34	; 0x22
    10ee:	9b a1       	ldd	r25, Y+35	; 0x23
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	3f ef       	ldi	r19, 0xFF	; 255
    10f4:	4f e7       	ldi	r20, 0x7F	; 127
    10f6:	57 e4       	ldi	r21, 0x47	; 71
    10f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10fc:	18 16       	cp	r1, r24
    10fe:	4c f5       	brge	.+82     	; 0x1152 <lcd_4bit_send_enable_signal+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1100:	6c a1       	ldd	r22, Y+36	; 0x24
    1102:	7d a1       	ldd	r23, Y+37	; 0x25
    1104:	8e a1       	ldd	r24, Y+38	; 0x26
    1106:	9f a1       	ldd	r25, Y+39	; 0x27
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e2       	ldi	r20, 0x20	; 32
    110e:	51 e4       	ldi	r21, 0x41	; 65
    1110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9f 8f       	std	Y+31, r25	; 0x1f
    1126:	8e 8f       	std	Y+30, r24	; 0x1e
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <lcd_4bit_send_enable_signal+0x15e>
    112a:	88 ec       	ldi	r24, 0xC8	; 200
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9d 8f       	std	Y+29, r25	; 0x1d
    1130:	8c 8f       	std	Y+28, r24	; 0x1c
    1132:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1134:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <lcd_4bit_send_enable_signal+0x14c>
    113a:	9d 8f       	std	Y+29, r25	; 0x1d
    113c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1140:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	9f 8f       	std	Y+31, r25	; 0x1f
    1146:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1148:	8e 8d       	ldd	r24, Y+30	; 0x1e
    114a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	69 f7       	brne	.-38     	; 0x112a <lcd_4bit_send_enable_signal+0x140>
    1150:	24 c0       	rjmp	.+72     	; 0x119a <lcd_4bit_send_enable_signal+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1152:	68 a1       	ldd	r22, Y+32	; 0x20
    1154:	79 a1       	ldd	r23, Y+33	; 0x21
    1156:	8a a1       	ldd	r24, Y+34	; 0x22
    1158:	9b a1       	ldd	r25, Y+35	; 0x23
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9f 8f       	std	Y+31, r25	; 0x1f
    1164:	8e 8f       	std	Y+30, r24	; 0x1e
    1166:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1168:	9f 8d       	ldd	r25, Y+31	; 0x1f
    116a:	9b 8f       	std	Y+27, r25	; 0x1b
    116c:	8a 8f       	std	Y+26, r24	; 0x1a
    116e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1170:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <lcd_4bit_send_enable_signal+0x188>
    1176:	9b 8f       	std	Y+27, r25	; 0x1b
    1178:	8a 8f       	std	Y+26, r24	; 0x1a
    117a:	0f c0       	rjmp	.+30     	; 0x119a <lcd_4bit_send_enable_signal+0x1b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    117c:	69 a5       	ldd	r22, Y+41	; 0x29
    117e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1180:	8b a5       	ldd	r24, Y+43	; 0x2b
    1182:	9c a5       	ldd	r25, Y+44	; 0x2c
    1184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	88 a7       	std	Y+40, r24	; 0x28
    118e:	88 a5       	ldd	r24, Y+40	; 0x28
    1190:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1192:	89 8d       	ldd	r24, Y+25	; 0x19
    1194:	8a 95       	dec	r24
    1196:	f1 f7       	brne	.-4      	; 0x1194 <lcd_4bit_send_enable_signal+0x1aa>
    1198:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(5);
		retValue = DIO_pin_write(&lcd->EN, LOW);
    119a:	8a a9       	ldd	r24, Y+50	; 0x32
    119c:	9b a9       	ldd	r25, Y+51	; 0x33
    119e:	03 96       	adiw	r24, 0x03	; 3
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <DIO_pin_write>
    11a6:	89 ab       	std	Y+49, r24	; 0x31
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a0 ea       	ldi	r26, 0xA0	; 160
    11ae:	b0 e4       	ldi	r27, 0x40	; 64
    11b0:	8d 8b       	std	Y+21, r24	; 0x15
    11b2:	9e 8b       	std	Y+22, r25	; 0x16
    11b4:	af 8b       	std	Y+23, r26	; 0x17
    11b6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11b8:	6d 89       	ldd	r22, Y+21	; 0x15
    11ba:	7e 89       	ldd	r23, Y+22	; 0x16
    11bc:	8f 89       	ldd	r24, Y+23	; 0x17
    11be:	98 8d       	ldd	r25, Y+24	; 0x18
    11c0:	2b ea       	ldi	r18, 0xAB	; 171
    11c2:	3a ea       	ldi	r19, 0xAA	; 170
    11c4:	4a e2       	ldi	r20, 0x2A	; 42
    11c6:	50 e4       	ldi	r21, 0x40	; 64
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	89 8b       	std	Y+17, r24	; 0x11
    11d2:	9a 8b       	std	Y+18, r25	; 0x12
    11d4:	ab 8b       	std	Y+19, r26	; 0x13
    11d6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    11d8:	69 89       	ldd	r22, Y+17	; 0x11
    11da:	7a 89       	ldd	r23, Y+18	; 0x12
    11dc:	8b 89       	ldd	r24, Y+19	; 0x13
    11de:	9c 89       	ldd	r25, Y+20	; 0x14
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	1c f4       	brge	.+6      	; 0x11f6 <lcd_4bit_send_enable_signal+0x20c>
		__ticks = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	88 8b       	std	Y+16, r24	; 0x10
    11f4:	91 c0       	rjmp	.+290    	; 0x1318 <lcd_4bit_send_enable_signal+0x32e>
	else if (__tmp > 255)
    11f6:	69 89       	ldd	r22, Y+17	; 0x11
    11f8:	7a 89       	ldd	r23, Y+18	; 0x12
    11fa:	8b 89       	ldd	r24, Y+19	; 0x13
    11fc:	9c 89       	ldd	r25, Y+20	; 0x14
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	53 e4       	ldi	r21, 0x43	; 67
    1206:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    120a:	18 16       	cp	r1, r24
    120c:	0c f0       	brlt	.+2      	; 0x1210 <lcd_4bit_send_enable_signal+0x226>
    120e:	7b c0       	rjmp	.+246    	; 0x1306 <lcd_4bit_send_enable_signal+0x31c>
	{
		_delay_ms(__us / 1000.0);
    1210:	6d 89       	ldd	r22, Y+21	; 0x15
    1212:	7e 89       	ldd	r23, Y+22	; 0x16
    1214:	8f 89       	ldd	r24, Y+23	; 0x17
    1216:	98 8d       	ldd	r25, Y+24	; 0x18
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	4a e7       	ldi	r20, 0x7A	; 122
    121e:	54 e4       	ldi	r21, 0x44	; 68
    1220:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	8c 87       	std	Y+12, r24	; 0x0c
    122a:	9d 87       	std	Y+13, r25	; 0x0d
    122c:	ae 87       	std	Y+14, r26	; 0x0e
    122e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1230:	6c 85       	ldd	r22, Y+12	; 0x0c
    1232:	7d 85       	ldd	r23, Y+13	; 0x0d
    1234:	8e 85       	ldd	r24, Y+14	; 0x0e
    1236:	9f 85       	ldd	r25, Y+15	; 0x0f
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	4a ef       	ldi	r20, 0xFA	; 250
    123e:	54 e4       	ldi	r21, 0x44	; 68
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	88 87       	std	Y+8, r24	; 0x08
    124a:	99 87       	std	Y+9, r25	; 0x09
    124c:	aa 87       	std	Y+10, r26	; 0x0a
    124e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1250:	68 85       	ldd	r22, Y+8	; 0x08
    1252:	79 85       	ldd	r23, Y+9	; 0x09
    1254:	8a 85       	ldd	r24, Y+10	; 0x0a
    1256:	9b 85       	ldd	r25, Y+11	; 0x0b
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1264:	88 23       	and	r24, r24
    1266:	2c f4       	brge	.+10     	; 0x1272 <lcd_4bit_send_enable_signal+0x288>
		__ticks = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9f 83       	std	Y+7, r25	; 0x07
    126e:	8e 83       	std	Y+6, r24	; 0x06
    1270:	3f c0       	rjmp	.+126    	; 0x12f0 <lcd_4bit_send_enable_signal+0x306>
	else if (__tmp > 65535)
    1272:	68 85       	ldd	r22, Y+8	; 0x08
    1274:	79 85       	ldd	r23, Y+9	; 0x09
    1276:	8a 85       	ldd	r24, Y+10	; 0x0a
    1278:	9b 85       	ldd	r25, Y+11	; 0x0b
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f ef       	ldi	r19, 0xFF	; 255
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	57 e4       	ldi	r21, 0x47	; 71
    1282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1286:	18 16       	cp	r1, r24
    1288:	4c f5       	brge	.+82     	; 0x12dc <lcd_4bit_send_enable_signal+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128a:	6c 85       	ldd	r22, Y+12	; 0x0c
    128c:	7d 85       	ldd	r23, Y+13	; 0x0d
    128e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1290:	9f 85       	ldd	r25, Y+15	; 0x0f
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e2       	ldi	r20, 0x20	; 32
    1298:	51 e4       	ldi	r21, 0x41	; 65
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9f 83       	std	Y+7, r25	; 0x07
    12b0:	8e 83       	std	Y+6, r24	; 0x06
    12b2:	0f c0       	rjmp	.+30     	; 0x12d2 <lcd_4bit_send_enable_signal+0x2e8>
    12b4:	88 ec       	ldi	r24, 0xC8	; 200
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9d 83       	std	Y+5, r25	; 0x05
    12ba:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <lcd_4bit_send_enable_signal+0x2d6>
    12c4:	9d 83       	std	Y+5, r25	; 0x05
    12c6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ca:	9f 81       	ldd	r25, Y+7	; 0x07
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9f 83       	std	Y+7, r25	; 0x07
    12d0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	8e 81       	ldd	r24, Y+6	; 0x06
    12d4:	9f 81       	ldd	r25, Y+7	; 0x07
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	69 f7       	brne	.-38     	; 0x12b4 <lcd_4bit_send_enable_signal+0x2ca>
    12da:	24 c0       	rjmp	.+72     	; 0x1324 <lcd_4bit_send_enable_signal+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	68 85       	ldd	r22, Y+8	; 0x08
    12de:	79 85       	ldd	r23, Y+9	; 0x09
    12e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9f 83       	std	Y+7, r25	; 0x07
    12ee:	8e 83       	std	Y+6, r24	; 0x06
    12f0:	8e 81       	ldd	r24, Y+6	; 0x06
    12f2:	9f 81       	ldd	r25, Y+7	; 0x07
    12f4:	9b 83       	std	Y+3, r25	; 0x03
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	9b 81       	ldd	r25, Y+3	; 0x03
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <lcd_4bit_send_enable_signal+0x312>
    1300:	9b 83       	std	Y+3, r25	; 0x03
    1302:	8a 83       	std	Y+2, r24	; 0x02
    1304:	0f c0       	rjmp	.+30     	; 0x1324 <lcd_4bit_send_enable_signal+0x33a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1306:	69 89       	ldd	r22, Y+17	; 0x11
    1308:	7a 89       	ldd	r23, Y+18	; 0x12
    130a:	8b 89       	ldd	r24, Y+19	; 0x13
    130c:	9c 89       	ldd	r25, Y+20	; 0x14
    130e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	88 8b       	std	Y+16, r24	; 0x10
    1318:	88 89       	ldd	r24, Y+16	; 0x10
    131a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	8a 95       	dec	r24
    1320:	f1 f7       	brne	.-4      	; 0x131e <lcd_4bit_send_enable_signal+0x334>
    1322:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(5);
	}
	return retValue;
    1324:	89 a9       	ldd	r24, Y+49	; 0x31
}
    1326:	e3 96       	adiw	r28, 0x33	; 51
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <lcd_4bit_init>:

/****************************************************************************************************************************************/

Std_ReturnType lcd_4bit_init(const lcd_4bit_t *lcd)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	c6 54       	subi	r28, 0x46	; 70
    1342:	d0 40       	sbci	r29, 0x00	; 0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	fe 01       	movw	r30, r28
    1350:	eb 5b       	subi	r30, 0xBB	; 187
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
	Std_ReturnType retValue= ERROR_NOT_OK;
    1358:	fe 01       	movw	r30, r28
    135a:	ec 5b       	subi	r30, 0xBC	; 188
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	10 82       	st	Z, r1

	if(lcd == NULL)
    1360:	fe 01       	movw	r30, r28
    1362:	eb 5b       	subi	r30, 0xBB	; 187
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	29 f4       	brne	.+10     	; 0x1378 <lcd_4bit_init+0x40>
	{
		retValue= ERROR_NULL;
    136e:	fe 01       	movw	r30, r28
    1370:	ec 5b       	subi	r30, 0xBC	; 188
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	10 82       	st	Z, r1
    1376:	c4 c2       	rjmp	.+1416   	; 0x1900 <lcd_4bit_init+0x5c8>
	}
	else
	{
		uint8 counter=0;
    1378:	fe 01       	movw	r30, r28
    137a:	ed 5b       	subi	r30, 0xBD	; 189
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	10 82       	st	Z, r1
		retValue = DIO_pin_init(&lcd->RS);
    1380:	fe 01       	movw	r30, r28
    1382:	eb 5b       	subi	r30, 0xBB	; 187
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	0e 94 97 12 	call	0x252e	; 0x252e <DIO_pin_init>
    138e:	fe 01       	movw	r30, r28
    1390:	ec 5b       	subi	r30, 0xBC	; 188
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 83       	st	Z, r24
		retValue = DIO_pin_init(&lcd->EN);
    1396:	fe 01       	movw	r30, r28
    1398:	eb 5b       	subi	r30, 0xBB	; 187
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 81       	ld	r24, Z
    139e:	91 81       	ldd	r25, Z+1	; 0x01
    13a0:	03 96       	adiw	r24, 0x03	; 3
    13a2:	0e 94 97 12 	call	0x252e	; 0x252e <DIO_pin_init>
    13a6:	fe 01       	movw	r30, r28
    13a8:	ec 5b       	subi	r30, 0xBC	; 188
    13aa:	ff 4f       	sbci	r31, 0xFF	; 255
    13ac:	80 83       	st	Z, r24

		for(counter=0;counter<4;counter++)
    13ae:	fe 01       	movw	r30, r28
    13b0:	ed 5b       	subi	r30, 0xBD	; 189
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	10 82       	st	Z, r1
    13b6:	24 c0       	rjmp	.+72     	; 0x1400 <lcd_4bit_init+0xc8>
		{
			retValue = DIO_pin_init(&lcd->lcd_data[counter]);
    13b8:	fe 01       	movw	r30, r28
    13ba:	eb 5b       	subi	r30, 0xBB	; 187
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	80 81       	ld	r24, Z
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	ac 01       	movw	r20, r24
    13c4:	4a 5f       	subi	r20, 0xFA	; 250
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	fe 01       	movw	r30, r28
    13ca:	ed 5b       	subi	r30, 0xBD	; 189
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 81       	ld	r24, Z
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	c9 01       	movw	r24, r18
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	82 0f       	add	r24, r18
    13dc:	93 1f       	adc	r25, r19
    13de:	84 0f       	add	r24, r20
    13e0:	95 1f       	adc	r25, r21
    13e2:	0e 94 97 12 	call	0x252e	; 0x252e <DIO_pin_init>
    13e6:	fe 01       	movw	r30, r28
    13e8:	ec 5b       	subi	r30, 0xBC	; 188
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 83       	st	Z, r24
	{
		uint8 counter=0;
		retValue = DIO_pin_init(&lcd->RS);
		retValue = DIO_pin_init(&lcd->EN);

		for(counter=0;counter<4;counter++)
    13ee:	de 01       	movw	r26, r28
    13f0:	ad 5b       	subi	r26, 0xBD	; 189
    13f2:	bf 4f       	sbci	r27, 0xFF	; 255
    13f4:	fe 01       	movw	r30, r28
    13f6:	ed 5b       	subi	r30, 0xBD	; 189
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	8c 93       	st	X, r24
    1400:	fe 01       	movw	r30, r28
    1402:	ed 5b       	subi	r30, 0xBD	; 189
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	80 81       	ld	r24, Z
    1408:	84 30       	cpi	r24, 0x04	; 4
    140a:	b0 f2       	brcs	.-84     	; 0x13b8 <lcd_4bit_init+0x80>
    140c:	fe 01       	movw	r30, r28
    140e:	ff 96       	adiw	r30, 0x3f	; 63
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 ea       	ldi	r26, 0xA0	; 160
    1416:	b1 e4       	ldi	r27, 0x41	; 65
    1418:	80 83       	st	Z, r24
    141a:	91 83       	std	Z+1, r25	; 0x01
    141c:	a2 83       	std	Z+2, r26	; 0x02
    141e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	fe 01       	movw	r30, r28
    1422:	ff 96       	adiw	r30, 0x3f	; 63
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a ef       	ldi	r20, 0xFA	; 250
    1432:	54 e4       	ldi	r21, 0x44	; 68
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	8b af       	std	Y+59, r24	; 0x3b
    143e:	9c af       	std	Y+60, r25	; 0x3c
    1440:	ad af       	std	Y+61, r26	; 0x3d
    1442:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1444:	6b ad       	ldd	r22, Y+59	; 0x3b
    1446:	7c ad       	ldd	r23, Y+60	; 0x3c
    1448:	8d ad       	ldd	r24, Y+61	; 0x3d
    144a:	9e ad       	ldd	r25, Y+62	; 0x3e
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	2c f4       	brge	.+10     	; 0x1466 <lcd_4bit_init+0x12e>
		__ticks = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9a af       	std	Y+58, r25	; 0x3a
    1462:	89 af       	std	Y+57, r24	; 0x39
    1464:	41 c0       	rjmp	.+130    	; 0x14e8 <lcd_4bit_init+0x1b0>
	else if (__tmp > 65535)
    1466:	6b ad       	ldd	r22, Y+59	; 0x3b
    1468:	7c ad       	ldd	r23, Y+60	; 0x3c
    146a:	8d ad       	ldd	r24, Y+61	; 0x3d
    146c:	9e ad       	ldd	r25, Y+62	; 0x3e
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	3f ef       	ldi	r19, 0xFF	; 255
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	57 e4       	ldi	r21, 0x47	; 71
    1476:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	5c f5       	brge	.+86     	; 0x14d4 <lcd_4bit_init+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147e:	fe 01       	movw	r30, r28
    1480:	ff 96       	adiw	r30, 0x3f	; 63
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	93 81       	ldd	r25, Z+3	; 0x03
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9a af       	std	Y+58, r25	; 0x3a
    14a8:	89 af       	std	Y+57, r24	; 0x39
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <lcd_4bit_init+0x192>
    14ac:	88 ec       	ldi	r24, 0xC8	; 200
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	98 af       	std	Y+56, r25	; 0x38
    14b2:	8f ab       	std	Y+55, r24	; 0x37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b4:	8f a9       	ldd	r24, Y+55	; 0x37
    14b6:	98 ad       	ldd	r25, Y+56	; 0x38
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <lcd_4bit_init+0x180>
    14bc:	98 af       	std	Y+56, r25	; 0x38
    14be:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	89 ad       	ldd	r24, Y+57	; 0x39
    14c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	9a af       	std	Y+58, r25	; 0x3a
    14c8:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	89 ad       	ldd	r24, Y+57	; 0x39
    14cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	69 f7       	brne	.-38     	; 0x14ac <lcd_4bit_init+0x174>
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <lcd_4bit_init+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d4:	6b ad       	ldd	r22, Y+59	; 0x3b
    14d6:	7c ad       	ldd	r23, Y+60	; 0x3c
    14d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    14da:	9e ad       	ldd	r25, Y+62	; 0x3e
    14dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	9a af       	std	Y+58, r25	; 0x3a
    14e6:	89 af       	std	Y+57, r24	; 0x39
    14e8:	89 ad       	ldd	r24, Y+57	; 0x39
    14ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    14ec:	9e ab       	std	Y+54, r25	; 0x36
    14ee:	8d ab       	std	Y+53, r24	; 0x35
    14f0:	8d a9       	ldd	r24, Y+53	; 0x35
    14f2:	9e a9       	ldd	r25, Y+54	; 0x36
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <lcd_4bit_init+0x1bc>
    14f8:	9e ab       	std	Y+54, r25	; 0x36
    14fa:	8d ab       	std	Y+53, r24	; 0x35
		{
			retValue = DIO_pin_init(&lcd->lcd_data[counter]);
		}

	    _delay_ms(20);
		retValue = lcd_4bit_send_command(lcd, 0x33);
    14fc:	fe 01       	movw	r30, r28
    14fe:	eb 5b       	subi	r30, 0xBB	; 187
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	63 e3       	ldi	r22, 0x33	; 51
    1508:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    150c:	fe 01       	movw	r30, r28
    150e:	ec 5b       	subi	r30, 0xBC	; 188
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 83       	st	Z, r24
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 ea       	ldi	r26, 0xA0	; 160
    151a:	b0 e4       	ldi	r27, 0x40	; 64
    151c:	89 ab       	std	Y+49, r24	; 0x31
    151e:	9a ab       	std	Y+50, r25	; 0x32
    1520:	ab ab       	std	Y+51, r26	; 0x33
    1522:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	69 a9       	ldd	r22, Y+49	; 0x31
    1526:	7a a9       	ldd	r23, Y+50	; 0x32
    1528:	8b a9       	ldd	r24, Y+51	; 0x33
    152a:	9c a9       	ldd	r25, Y+52	; 0x34
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a ef       	ldi	r20, 0xFA	; 250
    1532:	54 e4       	ldi	r21, 0x44	; 68
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8d a7       	std	Y+45, r24	; 0x2d
    153e:	9e a7       	std	Y+46, r25	; 0x2e
    1540:	af a7       	std	Y+47, r26	; 0x2f
    1542:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1544:	6d a5       	ldd	r22, Y+45	; 0x2d
    1546:	7e a5       	ldd	r23, Y+46	; 0x2e
    1548:	8f a5       	ldd	r24, Y+47	; 0x2f
    154a:	98 a9       	ldd	r25, Y+48	; 0x30
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <lcd_4bit_init+0x22e>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9c a7       	std	Y+44, r25	; 0x2c
    1562:	8b a7       	std	Y+43, r24	; 0x2b
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <lcd_4bit_init+0x2ac>
	else if (__tmp > 65535)
    1566:	6d a5       	ldd	r22, Y+45	; 0x2d
    1568:	7e a5       	ldd	r23, Y+46	; 0x2e
    156a:	8f a5       	ldd	r24, Y+47	; 0x2f
    156c:	98 a9       	ldd	r25, Y+48	; 0x30
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <lcd_4bit_init+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	69 a9       	ldd	r22, Y+49	; 0x31
    1580:	7a a9       	ldd	r23, Y+50	; 0x32
    1582:	8b a9       	ldd	r24, Y+51	; 0x33
    1584:	9c a9       	ldd	r25, Y+52	; 0x34
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9c a7       	std	Y+44, r25	; 0x2c
    15a4:	8b a7       	std	Y+43, r24	; 0x2b
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <lcd_4bit_init+0x28e>
    15a8:	88 ec       	ldi	r24, 0xC8	; 200
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9a a7       	std	Y+42, r25	; 0x2a
    15ae:	89 a7       	std	Y+41, r24	; 0x29
    15b0:	89 a5       	ldd	r24, Y+41	; 0x29
    15b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <lcd_4bit_init+0x27c>
    15b8:	9a a7       	std	Y+42, r25	; 0x2a
    15ba:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    15be:	9c a5       	ldd	r25, Y+44	; 0x2c
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9c a7       	std	Y+44, r25	; 0x2c
    15c4:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <lcd_4bit_init+0x270>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <lcd_4bit_init+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6d a5       	ldd	r22, Y+45	; 0x2d
    15d2:	7e a5       	ldd	r23, Y+46	; 0x2e
    15d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d6:	98 a9       	ldd	r25, Y+48	; 0x30
    15d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9c a7       	std	Y+44, r25	; 0x2c
    15e2:	8b a7       	std	Y+43, r24	; 0x2b
    15e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    15e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    15e8:	98 a7       	std	Y+40, r25	; 0x28
    15ea:	8f a3       	std	Y+39, r24	; 0x27
    15ec:	8f a1       	ldd	r24, Y+39	; 0x27
    15ee:	98 a5       	ldd	r25, Y+40	; 0x28
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <lcd_4bit_init+0x2b8>
    15f4:	98 a7       	std	Y+40, r25	; 0x28
    15f6:	8f a3       	std	Y+39, r24	; 0x27
		_delay_ms(5);
		retValue = lcd_4bit_send_command(lcd, 0x32);
    15f8:	fe 01       	movw	r30, r28
    15fa:	eb 5b       	subi	r30, 0xBB	; 187
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	62 e3       	ldi	r22, 0x32	; 50
    1604:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1608:	fe 01       	movw	r30, r28
    160a:	ec 5b       	subi	r30, 0xBC	; 188
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 83       	st	Z, r24
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a6 e1       	ldi	r26, 0x16	; 22
    1616:	b3 e4       	ldi	r27, 0x43	; 67
    1618:	8b a3       	std	Y+35, r24	; 0x23
    161a:	9c a3       	std	Y+36, r25	; 0x24
    161c:	ad a3       	std	Y+37, r26	; 0x25
    161e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1620:	6b a1       	ldd	r22, Y+35	; 0x23
    1622:	7c a1       	ldd	r23, Y+36	; 0x24
    1624:	8d a1       	ldd	r24, Y+37	; 0x25
    1626:	9e a1       	ldd	r25, Y+38	; 0x26
    1628:	2b ea       	ldi	r18, 0xAB	; 171
    162a:	3a ea       	ldi	r19, 0xAA	; 170
    162c:	4a e2       	ldi	r20, 0x2A	; 42
    162e:	50 e4       	ldi	r21, 0x40	; 64
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	8f 8f       	std	Y+31, r24	; 0x1f
    163a:	98 a3       	std	Y+32, r25	; 0x20
    163c:	a9 a3       	std	Y+33, r26	; 0x21
    163e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1640:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1642:	78 a1       	ldd	r23, Y+32	; 0x20
    1644:	89 a1       	ldd	r24, Y+33	; 0x21
    1646:	9a a1       	ldd	r25, Y+34	; 0x22
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	1c f4       	brge	.+6      	; 0x165e <lcd_4bit_init+0x326>
		__ticks = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	8e 8f       	std	Y+30, r24	; 0x1e
    165c:	91 c0       	rjmp	.+290    	; 0x1780 <lcd_4bit_init+0x448>
	else if (__tmp > 255)
    165e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1660:	78 a1       	ldd	r23, Y+32	; 0x20
    1662:	89 a1       	ldd	r24, Y+33	; 0x21
    1664:	9a a1       	ldd	r25, Y+34	; 0x22
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	53 e4       	ldi	r21, 0x43	; 67
    166e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	0c f0       	brlt	.+2      	; 0x1678 <lcd_4bit_init+0x340>
    1676:	7b c0       	rjmp	.+246    	; 0x176e <lcd_4bit_init+0x436>
	{
		_delay_ms(__us / 1000.0);
    1678:	6b a1       	ldd	r22, Y+35	; 0x23
    167a:	7c a1       	ldd	r23, Y+36	; 0x24
    167c:	8d a1       	ldd	r24, Y+37	; 0x25
    167e:	9e a1       	ldd	r25, Y+38	; 0x26
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a e7       	ldi	r20, 0x7A	; 122
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8a 8f       	std	Y+26, r24	; 0x1a
    1692:	9b 8f       	std	Y+27, r25	; 0x1b
    1694:	ac 8f       	std	Y+28, r26	; 0x1c
    1696:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1698:	6a 8d       	ldd	r22, Y+26	; 0x1a
    169a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    169c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    169e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	4a ef       	ldi	r20, 0xFA	; 250
    16a6:	54 e4       	ldi	r21, 0x44	; 68
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	8e 8b       	std	Y+22, r24	; 0x16
    16b2:	9f 8b       	std	Y+23, r25	; 0x17
    16b4:	a8 8f       	std	Y+24, r26	; 0x18
    16b6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    16b8:	6e 89       	ldd	r22, Y+22	; 0x16
    16ba:	7f 89       	ldd	r23, Y+23	; 0x17
    16bc:	88 8d       	ldd	r24, Y+24	; 0x18
    16be:	99 8d       	ldd	r25, Y+25	; 0x19
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e8       	ldi	r20, 0x80	; 128
    16c6:	5f e3       	ldi	r21, 0x3F	; 63
    16c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16cc:	88 23       	and	r24, r24
    16ce:	2c f4       	brge	.+10     	; 0x16da <lcd_4bit_init+0x3a2>
		__ticks = 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9d 8b       	std	Y+21, r25	; 0x15
    16d6:	8c 8b       	std	Y+20, r24	; 0x14
    16d8:	3f c0       	rjmp	.+126    	; 0x1758 <lcd_4bit_init+0x420>
	else if (__tmp > 65535)
    16da:	6e 89       	ldd	r22, Y+22	; 0x16
    16dc:	7f 89       	ldd	r23, Y+23	; 0x17
    16de:	88 8d       	ldd	r24, Y+24	; 0x18
    16e0:	99 8d       	ldd	r25, Y+25	; 0x19
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	4f e7       	ldi	r20, 0x7F	; 127
    16e8:	57 e4       	ldi	r21, 0x47	; 71
    16ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ee:	18 16       	cp	r1, r24
    16f0:	4c f5       	brge	.+82     	; 0x1744 <lcd_4bit_init+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16f4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e2       	ldi	r20, 0x20	; 32
    1700:	51 e4       	ldi	r21, 0x41	; 65
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	bc 01       	movw	r22, r24
    170c:	cd 01       	movw	r24, r26
    170e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	9d 8b       	std	Y+21, r25	; 0x15
    1718:	8c 8b       	std	Y+20, r24	; 0x14
    171a:	0f c0       	rjmp	.+30     	; 0x173a <lcd_4bit_init+0x402>
    171c:	88 ec       	ldi	r24, 0xC8	; 200
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9b 8b       	std	Y+19, r25	; 0x13
    1722:	8a 8b       	std	Y+18, r24	; 0x12
    1724:	8a 89       	ldd	r24, Y+18	; 0x12
    1726:	9b 89       	ldd	r25, Y+19	; 0x13
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <lcd_4bit_init+0x3f0>
    172c:	9b 8b       	std	Y+19, r25	; 0x13
    172e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1730:	8c 89       	ldd	r24, Y+20	; 0x14
    1732:	9d 89       	ldd	r25, Y+21	; 0x15
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	9d 8b       	std	Y+21, r25	; 0x15
    1738:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173a:	8c 89       	ldd	r24, Y+20	; 0x14
    173c:	9d 89       	ldd	r25, Y+21	; 0x15
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	69 f7       	brne	.-38     	; 0x171c <lcd_4bit_init+0x3e4>
    1742:	24 c0       	rjmp	.+72     	; 0x178c <lcd_4bit_init+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1744:	6e 89       	ldd	r22, Y+22	; 0x16
    1746:	7f 89       	ldd	r23, Y+23	; 0x17
    1748:	88 8d       	ldd	r24, Y+24	; 0x18
    174a:	99 8d       	ldd	r25, Y+25	; 0x19
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9d 8b       	std	Y+21, r25	; 0x15
    1756:	8c 8b       	std	Y+20, r24	; 0x14
    1758:	8c 89       	ldd	r24, Y+20	; 0x14
    175a:	9d 89       	ldd	r25, Y+21	; 0x15
    175c:	99 8b       	std	Y+17, r25	; 0x11
    175e:	88 8b       	std	Y+16, r24	; 0x10
    1760:	88 89       	ldd	r24, Y+16	; 0x10
    1762:	99 89       	ldd	r25, Y+17	; 0x11
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <lcd_4bit_init+0x42c>
    1768:	99 8b       	std	Y+17, r25	; 0x11
    176a:	88 8b       	std	Y+16, r24	; 0x10
    176c:	0f c0       	rjmp	.+30     	; 0x178c <lcd_4bit_init+0x454>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    176e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1770:	78 a1       	ldd	r23, Y+32	; 0x20
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8e 8f       	std	Y+30, r24	; 0x1e
    1780:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1782:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1784:	8f 85       	ldd	r24, Y+15	; 0x0f
    1786:	8a 95       	dec	r24
    1788:	f1 f7       	brne	.-4      	; 0x1786 <lcd_4bit_init+0x44e>
    178a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(150);
		retValue = lcd_4bit_send_command(lcd, 0x28);
    178c:	fe 01       	movw	r30, r28
    178e:	eb 5b       	subi	r30, 0xBB	; 187
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	91 81       	ldd	r25, Z+1	; 0x01
    1796:	68 e2       	ldi	r22, 0x28	; 40
    1798:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    179c:	fe 01       	movw	r30, r28
    179e:	ec 5b       	subi	r30, 0xBC	; 188
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	80 83       	st	Z, r24

		retValue = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    17a4:	fe 01       	movw	r30, r28
    17a6:	eb 5b       	subi	r30, 0xBB	; 187
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	80 81       	ld	r24, Z
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    17b4:	fe 01       	movw	r30, r28
    17b6:	ec 5b       	subi	r30, 0xBC	; 188
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 83       	st	Z, r24
		retValue = lcd_4bit_send_command(lcd, _LCD_RETURN_HOME);
    17bc:	fe 01       	movw	r30, r28
    17be:	eb 5b       	subi	r30, 0xBB	; 187
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	62 e0       	ldi	r22, 0x02	; 2
    17c8:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    17cc:	fe 01       	movw	r30, r28
    17ce:	ec 5b       	subi	r30, 0xBC	; 188
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 83       	st	Z, r24
		retValue = lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_SET_INC_SHIFT_OFF);
    17d4:	fe 01       	movw	r30, r28
    17d6:	eb 5b       	subi	r30, 0xBB	; 187
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	66 e0       	ldi	r22, 0x06	; 6
    17e0:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    17e4:	fe 01       	movw	r30, r28
    17e6:	ec 5b       	subi	r30, 0xBC	; 188
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 83       	st	Z, r24
		retValue = lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_CURSOR_OFF);
    17ec:	fe 01       	movw	r30, r28
    17ee:	eb 5b       	subi	r30, 0xBB	; 187
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	6c e0       	ldi	r22, 0x0C	; 12
    17f8:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    17fc:	fe 01       	movw	r30, r28
    17fe:	ec 5b       	subi	r30, 0xBC	; 188
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	80 83       	st	Z, r24
		//retValue = lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINES);
		retValue = lcd_4bit_send_command(lcd, 0x80);
    1804:	fe 01       	movw	r30, r28
    1806:	eb 5b       	subi	r30, 0xBB	; 187
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	60 e8       	ldi	r22, 0x80	; 128
    1810:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1814:	fe 01       	movw	r30, r28
    1816:	ec 5b       	subi	r30, 0xBC	; 188
    1818:	ff 4f       	sbci	r31, 0xFF	; 255
    181a:	80 83       	st	Z, r24
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a0 ea       	ldi	r26, 0xA0	; 160
    1822:	b0 e4       	ldi	r27, 0x40	; 64
    1824:	8b 87       	std	Y+11, r24	; 0x0b
    1826:	9c 87       	std	Y+12, r25	; 0x0c
    1828:	ad 87       	std	Y+13, r26	; 0x0d
    182a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182c:	6b 85       	ldd	r22, Y+11	; 0x0b
    182e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1830:	8d 85       	ldd	r24, Y+13	; 0x0d
    1832:	9e 85       	ldd	r25, Y+14	; 0x0e
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a ef       	ldi	r20, 0xFA	; 250
    183a:	54 e4       	ldi	r21, 0x44	; 68
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	8f 83       	std	Y+7, r24	; 0x07
    1846:	98 87       	std	Y+8, r25	; 0x08
    1848:	a9 87       	std	Y+9, r26	; 0x09
    184a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1860:	88 23       	and	r24, r24
    1862:	2c f4       	brge	.+10     	; 0x186e <lcd_4bit_init+0x536>
		__ticks = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	3f c0       	rjmp	.+126    	; 0x18ec <lcd_4bit_init+0x5b4>
	else if (__tmp > 65535)
    186e:	6f 81       	ldd	r22, Y+7	; 0x07
    1870:	78 85       	ldd	r23, Y+8	; 0x08
    1872:	89 85       	ldd	r24, Y+9	; 0x09
    1874:	9a 85       	ldd	r25, Y+10	; 0x0a
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	57 e4       	ldi	r21, 0x47	; 71
    187e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1882:	18 16       	cp	r1, r24
    1884:	4c f5       	brge	.+82     	; 0x18d8 <lcd_4bit_init+0x5a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	6b 85       	ldd	r22, Y+11	; 0x0b
    1888:	7c 85       	ldd	r23, Y+12	; 0x0c
    188a:	8d 85       	ldd	r24, Y+13	; 0x0d
    188c:	9e 85       	ldd	r25, Y+14	; 0x0e
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	8d 83       	std	Y+5, r24	; 0x05
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <lcd_4bit_init+0x596>
    18b0:	88 ec       	ldi	r24, 0xC8	; 200
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9c 83       	std	Y+4, r25	; 0x04
    18b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <lcd_4bit_init+0x584>
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	9e 83       	std	Y+6, r25	; 0x06
    18cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <lcd_4bit_init+0x578>
    18d6:	14 c0       	rjmp	.+40     	; 0x1900 <lcd_4bit_init+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	6f 81       	ldd	r22, Y+7	; 0x07
    18da:	78 85       	ldd	r23, Y+8	; 0x08
    18dc:	89 85       	ldd	r24, Y+9	; 0x09
    18de:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	9e 81       	ldd	r25, Y+6	; 0x06
    18f0:	9a 83       	std	Y+2, r25	; 0x02
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	9a 81       	ldd	r25, Y+2	; 0x02
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <lcd_4bit_init+0x5c0>
    18fc:	9a 83       	std	Y+2, r25	; 0x02
    18fe:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(5);
	}
		return retValue;
    1900:	fe 01       	movw	r30, r28
    1902:	ec 5b       	subi	r30, 0xBC	; 188
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
}
    1908:	ca 5b       	subi	r28, 0xBA	; 186
    190a:	df 4f       	sbci	r29, 0xFF	; 255
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <lcd_4bit_send_command>:

Std_ReturnType lcd_4bit_send_command(const lcd_4bit_t *lcd ,uint8 command)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <lcd_4bit_send_command+0x6>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <lcd_4bit_send_command+0x8>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	9b 83       	std	Y+3, r25	; 0x03
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType retValue= ERROR_NOT_OK;
    192e:	19 82       	std	Y+1, r1	; 0x01

	if(lcd == NULL)
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	11 f4       	brne	.+4      	; 0x193c <lcd_4bit_send_command+0x20>
	{
		retValue= ERROR_NULL;
    1938:	19 82       	std	Y+1, r1	; 0x01
    193a:	20 c0       	rjmp	.+64     	; 0x197c <lcd_4bit_send_command+0x60>
	}
	else
	{
		retValue = DIO_pin_write(&lcd->RS, LOW);
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	9b 81       	ldd	r25, Y+3	; 0x03
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	0e 94 74 14 	call	0x28e8	; 0x28e8 <DIO_pin_write>
    1946:	89 83       	std	Y+1, r24	; 0x01
		retValue = lcd_send_4bit(lcd, command >> 4);
    1948:	8c 81       	ldd	r24, Y+4	; 0x04
    194a:	28 2f       	mov	r18, r24
    194c:	22 95       	swap	r18
    194e:	2f 70       	andi	r18, 0x0F	; 15
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	62 2f       	mov	r22, r18
    1956:	0e 94 af 07 	call	0xf5e	; 0xf5e <lcd_send_4bit>
    195a:	89 83       	std	Y+1, r24	; 0x01
		retValue = lcd_4bit_send_enable_signal(lcd);
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	0e 94 f5 07 	call	0xfea	; 0xfea <lcd_4bit_send_enable_signal>
    1964:	89 83       	std	Y+1, r24	; 0x01
		retValue = lcd_send_4bit(lcd, command);
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	9b 81       	ldd	r25, Y+3	; 0x03
    196a:	6c 81       	ldd	r22, Y+4	; 0x04
    196c:	0e 94 af 07 	call	0xf5e	; 0xf5e <lcd_send_4bit>
    1970:	89 83       	std	Y+1, r24	; 0x01
		retValue = lcd_4bit_send_enable_signal(lcd);
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	9b 81       	ldd	r25, Y+3	; 0x03
    1976:	0e 94 f5 07 	call	0xfea	; 0xfea <lcd_4bit_send_enable_signal>
    197a:	89 83       	std	Y+1, r24	; 0x01
	}
	return retValue;
    197c:	89 81       	ldd	r24, Y+1	; 0x01
}
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <lcd_4bit_send_char>:

Std_ReturnType lcd_4bit_send_char(const lcd_4bit_t *lcd ,uint8 data)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <lcd_4bit_send_char+0x6>
    1992:	00 d0       	rcall	.+0      	; 0x1994 <lcd_4bit_send_char+0x8>
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	9b 83       	std	Y+3, r25	; 0x03
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType retValue= ERROR_NOT_OK;
    199e:	19 82       	std	Y+1, r1	; 0x01

	if(lcd == NULL)
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	9b 81       	ldd	r25, Y+3	; 0x03
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	11 f4       	brne	.+4      	; 0x19ac <lcd_4bit_send_char+0x20>
	{
		retValue= ERROR_NULL;
    19a8:	19 82       	std	Y+1, r1	; 0x01
    19aa:	20 c0       	rjmp	.+64     	; 0x19ec <lcd_4bit_send_char+0x60>
	}
	else
	{
		retValue = DIO_pin_write(&lcd->RS, HIGH);
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	9b 81       	ldd	r25, Y+3	; 0x03
    19b0:	61 e0       	ldi	r22, 0x01	; 1
    19b2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <DIO_pin_write>
    19b6:	89 83       	std	Y+1, r24	; 0x01
		retValue = lcd_send_4bit(lcd, data >> 4);
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	28 2f       	mov	r18, r24
    19bc:	22 95       	swap	r18
    19be:	2f 70       	andi	r18, 0x0F	; 15
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	62 2f       	mov	r22, r18
    19c6:	0e 94 af 07 	call	0xf5e	; 0xf5e <lcd_send_4bit>
    19ca:	89 83       	std	Y+1, r24	; 0x01
		retValue = lcd_4bit_send_enable_signal(lcd);
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	0e 94 f5 07 	call	0xfea	; 0xfea <lcd_4bit_send_enable_signal>
    19d4:	89 83       	std	Y+1, r24	; 0x01
		retValue = lcd_send_4bit(lcd, data);
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	6c 81       	ldd	r22, Y+4	; 0x04
    19dc:	0e 94 af 07 	call	0xf5e	; 0xf5e <lcd_send_4bit>
    19e0:	89 83       	std	Y+1, r24	; 0x01
		retValue = lcd_4bit_send_enable_signal(lcd);
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	0e 94 f5 07 	call	0xfea	; 0xfea <lcd_4bit_send_enable_signal>
    19ea:	89 83       	std	Y+1, r24	; 0x01

	}
	return retValue;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <lcd_4bit_send_char_at_pos>:

Std_ReturnType lcd_4bit_send_char_at_pos(const lcd_4bit_t *lcd ,uint8 data,uint8 row,uint8 column)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	28 97       	sbiw	r28, 0x08	; 8
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	9b 83       	std	Y+3, r25	; 0x03
    1a12:	8a 83       	std	Y+2, r24	; 0x02
    1a14:	6c 83       	std	Y+4, r22	; 0x04
    1a16:	4d 83       	std	Y+5, r20	; 0x05
    1a18:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType retValue= ERROR_NOT_OK;
    1a1a:	19 82       	std	Y+1, r1	; 0x01

	if(lcd == NULL)
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <lcd_4bit_send_char_at_pos+0x2c>
	{
		retValue= ERROR_NULL;
    1a24:	19 82       	std	Y+1, r1	; 0x01
    1a26:	49 c0       	rjmp	.+146    	; 0x1aba <lcd_4bit_send_char_at_pos+0xbe>
	}
	else
	{
		switch(row)
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	38 87       	std	Y+8, r19	; 0x08
    1a30:	2f 83       	std	Y+7, r18	; 0x07
    1a32:	8f 81       	ldd	r24, Y+7	; 0x07
    1a34:	98 85       	ldd	r25, Y+8	; 0x08
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	91 05       	cpc	r25, r1
    1a3a:	f9 f0       	breq	.+62     	; 0x1a7a <lcd_4bit_send_char_at_pos+0x7e>
    1a3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a3e:	38 85       	ldd	r19, Y+8	; 0x08
    1a40:	23 30       	cpi	r18, 0x03	; 3
    1a42:	31 05       	cpc	r19, r1
    1a44:	34 f4       	brge	.+12     	; 0x1a52 <lcd_4bit_send_char_at_pos+0x56>
    1a46:	8f 81       	ldd	r24, Y+7	; 0x07
    1a48:	98 85       	ldd	r25, Y+8	; 0x08
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <lcd_4bit_send_char_at_pos+0x6c>
    1a50:	2e c0       	rjmp	.+92     	; 0x1aae <lcd_4bit_send_char_at_pos+0xb2>
    1a52:	2f 81       	ldd	r18, Y+7	; 0x07
    1a54:	38 85       	ldd	r19, Y+8	; 0x08
    1a56:	23 30       	cpi	r18, 0x03	; 3
    1a58:	31 05       	cpc	r19, r1
    1a5a:	c1 f0       	breq	.+48     	; 0x1a8c <lcd_4bit_send_char_at_pos+0x90>
    1a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5e:	98 85       	ldd	r25, Y+8	; 0x08
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	91 05       	cpc	r25, r1
    1a64:	e1 f0       	breq	.+56     	; 0x1a9e <lcd_4bit_send_char_at_pos+0xa2>
    1a66:	23 c0       	rjmp	.+70     	; 0x1aae <lcd_4bit_send_char_at_pos+0xb2>
		{
		case ROW1:{lcd_4bit_send_command(lcd,(0x80 + column-1)); break;}
    1a68:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	21 58       	subi	r18, 0x81	; 129
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	9b 81       	ldd	r25, Y+3	; 0x03
    1a72:	62 2f       	mov	r22, r18
    1a74:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1a78:	1a c0       	rjmp	.+52     	; 0x1aae <lcd_4bit_send_char_at_pos+0xb2>
		case ROW2:{lcd_4bit_send_command(lcd,(0xC0 + column-1)); break;}
    1a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	21 54       	subi	r18, 0x41	; 65
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	62 2f       	mov	r22, r18
    1a86:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1a8a:	11 c0       	rjmp	.+34     	; 0x1aae <lcd_4bit_send_char_at_pos+0xb2>
		case ROW3:{lcd_4bit_send_command(lcd,(0x94 + column-1)); break;}
    1a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8e:	28 2f       	mov	r18, r24
    1a90:	2d 56       	subi	r18, 0x6D	; 109
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	9b 81       	ldd	r25, Y+3	; 0x03
    1a96:	62 2f       	mov	r22, r18
    1a98:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1a9c:	08 c0       	rjmp	.+16     	; 0x1aae <lcd_4bit_send_char_at_pos+0xb2>
		case ROW4:{lcd_4bit_send_command(lcd,(0xD4 + column-1)); break;}
    1a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	2d 52       	subi	r18, 0x2D	; 45
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa8:	62 2f       	mov	r22, r18
    1aaa:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
		}

		retValue = lcd_4bit_send_char(lcd, data);
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab2:	6c 81       	ldd	r22, Y+4	; 0x04
    1ab4:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
    1ab8:	89 83       	std	Y+1, r24	; 0x01
	}
	return retValue;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abc:	28 96       	adiw	r28, 0x08	; 8
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <lcd_4bit_send_string>:

Std_ReturnType lcd_4bit_send_string(const lcd_4bit_t *lcd ,uint8 *str)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <lcd_4bit_send_string+0x6>
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <lcd_4bit_send_string+0x8>
    1ad6:	0f 92       	push	r0
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	9b 83       	std	Y+3, r25	; 0x03
    1ade:	8a 83       	std	Y+2, r24	; 0x02
    1ae0:	7d 83       	std	Y+5, r23	; 0x05
    1ae2:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType retValue= ERROR_NOT_OK;
    1ae4:	19 82       	std	Y+1, r1	; 0x01

	if(lcd == NULL)
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	81 f4       	brne	.+32     	; 0x1b0e <lcd_4bit_send_string+0x40>
	{
		retValue= ERROR_NULL;
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	13 c0       	rjmp	.+38     	; 0x1b18 <lcd_4bit_send_string+0x4a>
	}
	else
	{
		while(*str)
		{
			retValue = lcd_4bit_send_char(lcd,*str++);
    1af2:	ec 81       	ldd	r30, Y+4	; 0x04
    1af4:	fd 81       	ldd	r31, Y+5	; 0x05
    1af6:	20 81       	ld	r18, Z
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	9d 83       	std	Y+5, r25	; 0x05
    1b00:	8c 83       	std	Y+4, r24	; 0x04
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	9b 81       	ldd	r25, Y+3	; 0x03
    1b06:	62 2f       	mov	r22, r18
    1b08:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
    1b0c:	89 83       	std	Y+1, r24	; 0x01
	{
		retValue= ERROR_NULL;
	}
	else
	{
		while(*str)
    1b0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b10:	fd 81       	ldd	r31, Y+5	; 0x05
    1b12:	80 81       	ld	r24, Z
    1b14:	88 23       	and	r24, r24
    1b16:	69 f7       	brne	.-38     	; 0x1af2 <lcd_4bit_send_string+0x24>
		{
			retValue = lcd_4bit_send_char(lcd,*str++);
		}
	}
	return retValue;
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <lcd_4bit_send_string_at_pos>:

Std_ReturnType lcd_4bit_send_string_at_pos(const lcd_4bit_t *lcd ,uint8 *str,uint8 row,uint8 column)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	29 97       	sbiw	r28, 0x09	; 9
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	9b 83       	std	Y+3, r25	; 0x03
    1b40:	8a 83       	std	Y+2, r24	; 0x02
    1b42:	7d 83       	std	Y+5, r23	; 0x05
    1b44:	6c 83       	std	Y+4, r22	; 0x04
    1b46:	4e 83       	std	Y+6, r20	; 0x06
    1b48:	2f 83       	std	Y+7, r18	; 0x07
	Std_ReturnType retValue= ERROR_NOT_OK;
    1b4a:	19 82       	std	Y+1, r1	; 0x01

	if(lcd == NULL || str == NULL)
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <lcd_4bit_send_string_at_pos+0x32>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	11 f4       	brne	.+4      	; 0x1b60 <lcd_4bit_send_string_at_pos+0x36>
	{
		retValue= ERROR_NULL;
    1b5c:	19 82       	std	Y+1, r1	; 0x01
    1b5e:	4b c0       	rjmp	.+150    	; 0x1bf6 <lcd_4bit_send_string_at_pos+0xcc>
	}
	else
	{
		switch(row)
    1b60:	8e 81       	ldd	r24, Y+6	; 0x06
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	39 87       	std	Y+9, r19	; 0x09
    1b68:	28 87       	std	Y+8, r18	; 0x08
    1b6a:	88 85       	ldd	r24, Y+8	; 0x08
    1b6c:	99 85       	ldd	r25, Y+9	; 0x09
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	91 05       	cpc	r25, r1
    1b72:	f9 f0       	breq	.+62     	; 0x1bb2 <lcd_4bit_send_string_at_pos+0x88>
    1b74:	28 85       	ldd	r18, Y+8	; 0x08
    1b76:	39 85       	ldd	r19, Y+9	; 0x09
    1b78:	23 30       	cpi	r18, 0x03	; 3
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	34 f4       	brge	.+12     	; 0x1b8a <lcd_4bit_send_string_at_pos+0x60>
    1b7e:	88 85       	ldd	r24, Y+8	; 0x08
    1b80:	99 85       	ldd	r25, Y+9	; 0x09
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	61 f0       	breq	.+24     	; 0x1ba0 <lcd_4bit_send_string_at_pos+0x76>
    1b88:	2e c0       	rjmp	.+92     	; 0x1be6 <lcd_4bit_send_string_at_pos+0xbc>
    1b8a:	28 85       	ldd	r18, Y+8	; 0x08
    1b8c:	39 85       	ldd	r19, Y+9	; 0x09
    1b8e:	23 30       	cpi	r18, 0x03	; 3
    1b90:	31 05       	cpc	r19, r1
    1b92:	c1 f0       	breq	.+48     	; 0x1bc4 <lcd_4bit_send_string_at_pos+0x9a>
    1b94:	88 85       	ldd	r24, Y+8	; 0x08
    1b96:	99 85       	ldd	r25, Y+9	; 0x09
    1b98:	84 30       	cpi	r24, 0x04	; 4
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	e1 f0       	breq	.+56     	; 0x1bd6 <lcd_4bit_send_string_at_pos+0xac>
    1b9e:	23 c0       	rjmp	.+70     	; 0x1be6 <lcd_4bit_send_string_at_pos+0xbc>
		{
		case ROW1:{lcd_4bit_send_command(lcd,(0x80 + column-1)); break;}
    1ba0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	21 58       	subi	r18, 0x81	; 129
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	62 2f       	mov	r22, r18
    1bac:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1bb0:	1a c0       	rjmp	.+52     	; 0x1be6 <lcd_4bit_send_string_at_pos+0xbc>
		case ROW2:{lcd_4bit_send_command(lcd,(0xC0 + column-1)); break;}
    1bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	21 54       	subi	r18, 0x41	; 65
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	62 2f       	mov	r22, r18
    1bbe:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1bc2:	11 c0       	rjmp	.+34     	; 0x1be6 <lcd_4bit_send_string_at_pos+0xbc>
		case ROW3:{lcd_4bit_send_command(lcd,(0x94 + column-1)); break;}
    1bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	2d 56       	subi	r18, 0x6D	; 109
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bce:	62 2f       	mov	r22, r18
    1bd0:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1bd4:	08 c0       	rjmp	.+16     	; 0x1be6 <lcd_4bit_send_string_at_pos+0xbc>
		case ROW4:{lcd_4bit_send_command(lcd,(0xD4 + column-1)); break;}
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	28 2f       	mov	r18, r24
    1bda:	2d 52       	subi	r18, 0x2D	; 45
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	9b 81       	ldd	r25, Y+3	; 0x03
    1be0:	62 2f       	mov	r22, r18
    1be2:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
		}
		retValue = lcd_4bit_send_string(lcd, str);
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	2c 81       	ldd	r18, Y+4	; 0x04
    1bec:	3d 81       	ldd	r19, Y+5	; 0x05
    1bee:	b9 01       	movw	r22, r18
    1bf0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_4bit_send_string>
    1bf4:	89 83       	std	Y+1, r24	; 0x01

	}
	return retValue;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf8:	29 96       	adiw	r28, 0x09	; 9
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <lcd_4bit_send_custom_char>:

Std_ReturnType lcd_4bit_send_custom_char(const lcd_4bit_t *lcd, uint8 row, uint8 column,const uint8 chr[], uint8 mem_pos)
{
    1c0a:	0f 93       	push	r16
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	29 97       	sbiw	r28, 0x09	; 9
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	9c 83       	std	Y+4, r25	; 0x04
    1c22:	8b 83       	std	Y+3, r24	; 0x03
    1c24:	6d 83       	std	Y+5, r22	; 0x05
    1c26:	4e 83       	std	Y+6, r20	; 0x06
    1c28:	38 87       	std	Y+8, r19	; 0x08
    1c2a:	2f 83       	std	Y+7, r18	; 0x07
    1c2c:	09 87       	std	Y+9, r16	; 0x09
	Std_ReturnType retValue= ERROR_NOT_OK;
    1c2e:	1a 82       	std	Y+2, r1	; 0x02

	if(lcd == NULL)
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	9c 81       	ldd	r25, Y+4	; 0x04
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	11 f4       	brne	.+4      	; 0x1c3c <lcd_4bit_send_custom_char+0x32>
	{
		retValue= ERROR_NULL;
    1c38:	1a 82       	std	Y+2, r1	; 0x02
    1c3a:	28 c0       	rjmp	.+80     	; 0x1c8c <lcd_4bit_send_custom_char+0x82>
	}
	else
	{
		uint8 counter=0;
    1c3c:	19 82       	std	Y+1, r1	; 0x01

		retValue = lcd_4bit_send_command(lcd,(_LCD_CGRAM_START +(mem_pos+8)));
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	28 2f       	mov	r18, r24
    1c42:	28 5b       	subi	r18, 0xB8	; 184
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	62 2f       	mov	r22, r18
    1c4a:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    1c4e:	8a 83       	std	Y+2, r24	; 0x02

		for(counter=0;counter<=7;counter++)
    1c50:	19 82       	std	Y+1, r1	; 0x01
    1c52:	11 c0       	rjmp	.+34     	; 0x1c76 <lcd_4bit_send_custom_char+0x6c>
		{
			lcd_4bit_send_char(lcd, chr[counter]);
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5c:	98 85       	ldd	r25, Y+8	; 0x08
    1c5e:	fc 01       	movw	r30, r24
    1c60:	e2 0f       	add	r30, r18
    1c62:	f3 1f       	adc	r31, r19
    1c64:	20 81       	ld	r18, Z
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	62 2f       	mov	r22, r18
    1c6c:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
	{
		uint8 counter=0;

		retValue = lcd_4bit_send_command(lcd,(_LCD_CGRAM_START +(mem_pos+8)));

		for(counter=0;counter<=7;counter++)
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	8f 5f       	subi	r24, 0xFF	; 255
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	88 30       	cpi	r24, 0x08	; 8
    1c7a:	60 f3       	brcs	.-40     	; 0x1c54 <lcd_4bit_send_custom_char+0x4a>
		{
			lcd_4bit_send_char(lcd, chr[counter]);
		}

		retValue = lcd_4bit_send_char_at_pos(lcd,mem_pos, row, column);
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	69 85       	ldd	r22, Y+9	; 0x09
    1c82:	4d 81       	ldd	r20, Y+5	; 0x05
    1c84:	2e 81       	ldd	r18, Y+6	; 0x06
    1c86:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <lcd_4bit_send_char_at_pos>
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
	}

	return retValue;
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c8e:	29 96       	adiw	r28, 0x09	; 9
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <lcd_4bit_send_number>:

Std_ReturnType lcd_4bit_send_number(const lcd_4bit_t *lcd,sint32 num)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	62 97       	sbiw	r28, 0x12	; 18
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	9f 87       	std	Y+15, r25	; 0x0f
    1cb8:	8e 87       	std	Y+14, r24	; 0x0e
    1cba:	79 8b       	std	Y+17, r23	; 0x11
    1cbc:	68 8b       	std	Y+16, r22	; 0x10
		Std_ReturnType retValue=ERROR_NOT_OK;
    1cbe:	1b 82       	std	Y+3, r1	; 0x03
		if(lcd == NULL)
    1cc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <lcd_4bit_send_number+0x2a>
			retValue = ERROR_NULL;
    1cc8:	1b 82       	std	Y+3, r1	; 0x03
    1cca:	5e c0       	rjmp	.+188    	; 0x1d88 <lcd_4bit_send_number+0xe6>
		else
		{
			uint8 str[10],i=0,j;
    1ccc:	1a 82       	std	Y+2, r1	; 0x02
			if (num==0)
    1cce:	88 89       	ldd	r24, Y+16	; 0x10
    1cd0:	99 89       	ldd	r25, Y+17	; 0x11
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	51 f4       	brne	.+20     	; 0x1cea <lcd_4bit_send_number+0x48>
			{
				lcd_4bit_send_char(lcd,'0');
    1cd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cda:	60 e3       	ldi	r22, 0x30	; 48
    1cdc:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
				retValue =ERROR_OK;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
				return retValue;
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	8a 8b       	std	Y+18, r24	; 0x12
    1ce8:	51 c0       	rjmp	.+162    	; 0x1d8c <lcd_4bit_send_number+0xea>
			}
			if (num<0)
    1cea:	88 89       	ldd	r24, Y+16	; 0x10
    1cec:	99 89       	ldd	r25, Y+17	; 0x11
    1cee:	99 23       	and	r25, r25
    1cf0:	5c f5       	brge	.+86     	; 0x1d48 <lcd_4bit_send_number+0xa6>
			{
				num=num*(-1);
    1cf2:	88 89       	ldd	r24, Y+16	; 0x10
    1cf4:	99 89       	ldd	r25, Y+17	; 0x11
    1cf6:	90 95       	com	r25
    1cf8:	81 95       	neg	r24
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	99 8b       	std	Y+17, r25	; 0x11
    1cfe:	88 8b       	std	Y+16, r24	; 0x10
				lcd_4bit_send_char(lcd,'-');
    1d00:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d02:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d04:	6d e2       	ldi	r22, 0x2D	; 45
    1d06:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
    1d0a:	1e c0       	rjmp	.+60     	; 0x1d48 <lcd_4bit_send_number+0xa6>
			}
			while (num)
			{
				str[i]=num%10+'0';
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	e8 2f       	mov	r30, r24
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	88 89       	ldd	r24, Y+16	; 0x10
    1d14:	99 89       	ldd	r25, Y+17	; 0x11
    1d16:	2a e0       	ldi	r18, 0x0A	; 10
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	b9 01       	movw	r22, r18
    1d1c:	0e 94 17 1b 	call	0x362e	; 0x362e <__divmodhi4>
    1d20:	28 2f       	mov	r18, r24
    1d22:	20 5d       	subi	r18, 0xD0	; 208
    1d24:	ce 01       	movw	r24, r28
    1d26:	04 96       	adiw	r24, 0x04	; 4
    1d28:	e8 0f       	add	r30, r24
    1d2a:	f9 1f       	adc	r31, r25
    1d2c:	20 83       	st	Z, r18
				i++;
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	8a 83       	std	Y+2, r24	; 0x02
				num=num/10;
    1d34:	88 89       	ldd	r24, Y+16	; 0x10
    1d36:	99 89       	ldd	r25, Y+17	; 0x11
    1d38:	2a e0       	ldi	r18, 0x0A	; 10
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	b9 01       	movw	r22, r18
    1d3e:	0e 94 17 1b 	call	0x362e	; 0x362e <__divmodhi4>
    1d42:	cb 01       	movw	r24, r22
    1d44:	99 8b       	std	Y+17, r25	; 0x11
    1d46:	88 8b       	std	Y+16, r24	; 0x10
			if (num<0)
			{
				num=num*(-1);
				lcd_4bit_send_char(lcd,'-');
			}
			while (num)
    1d48:	88 89       	ldd	r24, Y+16	; 0x10
    1d4a:	99 89       	ldd	r25, Y+17	; 0x11
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	f1 f6       	brne	.-68     	; 0x1d0c <lcd_4bit_send_number+0x6a>
			{
				str[i]=num%10+'0';
				i++;
				num=num/10;
			}
			for (j=i;j>0;j--)
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <lcd_4bit_send_number+0xdc>
			{
				lcd_4bit_send_char(lcd,str[j-1]);
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	21 50       	subi	r18, 0x01	; 1
    1d60:	30 40       	sbci	r19, 0x00	; 0
    1d62:	ce 01       	movw	r24, r28
    1d64:	04 96       	adiw	r24, 0x04	; 4
    1d66:	fc 01       	movw	r30, r24
    1d68:	e2 0f       	add	r30, r18
    1d6a:	f3 1f       	adc	r31, r19
    1d6c:	20 81       	ld	r18, Z
    1d6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d70:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d72:	62 2f       	mov	r22, r18
    1d74:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
			{
				str[i]=num%10+'0';
				i++;
				num=num/10;
			}
			for (j=i;j>0;j--)
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	88 23       	and	r24, r24
    1d82:	49 f7       	brne	.-46     	; 0x1d56 <lcd_4bit_send_number+0xb4>
			{
				lcd_4bit_send_char(lcd,str[j-1]);
			}
			retValue =ERROR_OK;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	8b 83       	std	Y+3, r24	; 0x03
		}
		return retValue;
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	8a 8b       	std	Y+18, r24	; 0x12
    1d8c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1d8e:	62 96       	adiw	r28, 0x12	; 18
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <BTN_init>:
#include "../../std_types.h"
#include "button.h"


Std_ReturnType BTN_init(const btn_t *btn_object)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <BTN_init+0x6>
    1da6:	0f 92       	push	r0
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	9b 83       	std	Y+3, r25	; 0x03
    1dae:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType retValue= ERROR_NOT_OK;
    1db0:	19 82       	std	Y+1, r1	; 0x01

	if(btn_object == NULL)
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	11 f4       	brne	.+4      	; 0x1dbe <BTN_init+0x1e>
	{
		retValue= ERROR_NULL;
    1dba:	19 82       	std	Y+1, r1	; 0x01
    1dbc:	0a c0       	rjmp	.+20     	; 0x1dd2 <BTN_init+0x32>
	}
	else
	{
		retValue = DIO_pin_init(&btn_object->btn_pin);
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	0e 94 97 12 	call	0x252e	; 0x252e <DIO_pin_init>
    1dc6:	89 83       	std	Y+1, r24	; 0x01
		retValue = DIO_pin_pull_up_active(&btn_object->btn_pin);
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	0e 94 43 16 	call	0x2c86	; 0x2c86 <DIO_pin_pull_up_active>
    1dd0:	89 83       	std	Y+1, r24	; 0x01
	}

	return retValue;
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <BTN_read>:

Std_ReturnType BTN_read(const btn_t *btn_object,button_state *btn_state)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <BTN_read+0x6>
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <BTN_read+0x8>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <BTN_read+0xa>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
    1df2:	7e 83       	std	Y+6, r23	; 0x06
    1df4:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType retValue= ERROR_NOT_OK;
    1df6:	19 82       	std	Y+1, r1	; 0x01
	logic_t pin_state;

	if(btn_object == NULL)
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	11 f4       	brne	.+4      	; 0x1e04 <BTN_read+0x24>
	{
		retValue= ERROR_NULL;
    1e00:	19 82       	std	Y+1, r1	; 0x01
    1e02:	47 c0       	rjmp	.+142    	; 0x1e92 <BTN_read+0xb2>
	}
	else
	{
		if(btn_object->button_connection == BUTTON_ACTIVE_HIGH)
    1e04:	eb 81       	ldd	r30, Y+3	; 0x03
    1e06:	fc 81       	ldd	r31, Y+4	; 0x04
    1e08:	83 81       	ldd	r24, Z+3	; 0x03
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	f1 f4       	brne	.+60     	; 0x1e4a <BTN_read+0x6a>
		{
			retValue = DIO_pin_read(&btn_object->btn_pin, &pin_state);
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	9e 01       	movw	r18, r28
    1e14:	2e 5f       	subi	r18, 0xFE	; 254
    1e16:	3f 4f       	sbci	r19, 0xFF	; 255
    1e18:	b9 01       	movw	r22, r18
    1e1a:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_pin_read>
    1e1e:	89 83       	std	Y+1, r24	; 0x01
			if(pin_state == HIGH){*btn_state = BUTTON_PRESSED; retValue= ERROR_OK;}
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	39 f4       	brne	.+14     	; 0x1e34 <BTN_read+0x54>
    1e26:	ed 81       	ldd	r30, Y+5	; 0x05
    1e28:	fe 81       	ldd	r31, Y+6	; 0x06
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 83       	st	Z, r24
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	2f c0       	rjmp	.+94     	; 0x1e92 <BTN_read+0xb2>
			else if(pin_state == LOW){*btn_state = BUTTON_RELEASED; retValue= ERROR_OK;}
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	88 23       	and	r24, r24
    1e38:	31 f4       	brne	.+12     	; 0x1e46 <BTN_read+0x66>
    1e3a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e3c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e3e:	10 82       	st	Z, r1
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	26 c0       	rjmp	.+76     	; 0x1e92 <BTN_read+0xb2>
			else{retValue= ERROR_NOT_OK;}
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	24 c0       	rjmp	.+72     	; 0x1e92 <BTN_read+0xb2>
		}
		else if(btn_object->button_connection == BUTTON_ACTIVE_LOW)
    1e4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e4e:	83 81       	ldd	r24, Z+3	; 0x03
    1e50:	88 23       	and	r24, r24
    1e52:	f1 f4       	brne	.+60     	; 0x1e90 <BTN_read+0xb0>
		{
			retValue = DIO_pin_read(&btn_object->btn_pin, &pin_state);
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	9e 01       	movw	r18, r28
    1e5a:	2e 5f       	subi	r18, 0xFE	; 254
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	b9 01       	movw	r22, r18
    1e60:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_pin_read>
    1e64:	89 83       	std	Y+1, r24	; 0x01
			if(pin_state == HIGH){*btn_state = BUTTON_RELEASED; retValue= ERROR_OK;}
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	31 f4       	brne	.+12     	; 0x1e78 <BTN_read+0x98>
    1e6c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e6e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e70:	10 82       	st	Z, r1
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	0d c0       	rjmp	.+26     	; 0x1e92 <BTN_read+0xb2>
			else if(pin_state == LOW){*btn_state = BUTTON_PRESSED; retValue= ERROR_OK;}
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	88 23       	and	r24, r24
    1e7c:	39 f4       	brne	.+14     	; 0x1e8c <BTN_read+0xac>
    1e7e:	ed 81       	ldd	r30, Y+5	; 0x05
    1e80:	fe 81       	ldd	r31, Y+6	; 0x06
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	80 83       	st	Z, r24
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <BTN_read+0xb2>
			else{retValue= ERROR_NOT_OK;}
    1e8c:	19 82       	std	Y+1, r1	; 0x01
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <BTN_read+0xb2>

		}
		else
		{
			retValue= ERROR_NOT_OK;
    1e90:	19 82       	std	Y+1, r1	; 0x01
		}
	}

	return retValue;
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e94:	26 96       	adiw	r28, 0x06	; 6
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <SSD_init>:
static uint8 cathodArr[]={0x3F,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
//static uint8 anodeArr[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};


Std_ReturnType SSD_init(const SSD_t *ssd_object)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <SSD_init+0x6>
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType retValue=ERROR_NOT_OK;
    1eb6:	19 82       	std	Y+1, r1	; 0x01

		if(ssd_object == NULL)
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	11 f4       	brne	.+4      	; 0x1ec4 <SSD_init+0x1e>
		{
			retValue=ERROR_NULL;
    1ec0:	19 82       	std	Y+1, r1	; 0x01
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <SSD_init+0x2c>
		}
		else
		{
			retValue= DIO_port_init(ssd_object->Copy_uSSDPort, OUTPUT);
    1ec4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec8:	80 81       	ld	r24, Z
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <DIO_port_init>
    1ed0:	89 83       	std	Y+1, r24	; 0x01

		}
		return retValue;
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <SSD_setNumber>:

Std_ReturnType SSD_setNumber(const SSD_t *ssd_object,uint8 value)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	28 97       	sbiw	r28, 0x08	; 8
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	9b 83       	std	Y+3, r25	; 0x03
    1ef6:	8a 83       	std	Y+2, r24	; 0x02
    1ef8:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType retValue=ERROR_NOT_OK;
    1efa:	19 82       	std	Y+1, r1	; 0x01

	if(ssd_object == NULL)
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	11 f4       	brne	.+4      	; 0x1f08 <SSD_setNumber+0x28>
	{
		retValue=ERROR_NULL;
    1f04:	19 82       	std	Y+1, r1	; 0x01
    1f06:	c1 c0       	rjmp	.+386    	; 0x208a <SSD_setNumber+0x1aa>
	}
	else
	{
		if(ssd_object->Copy_u8SSDType == COMMON_CATHOD)
    1f08:	ea 81       	ldd	r30, Y+2	; 0x02
    1f0a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f0c:	81 81       	ldd	r24, Z+1	; 0x01
    1f0e:	81 70       	andi	r24, 0x01	; 1
    1f10:	88 23       	and	r24, r24
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <SSD_setNumber+0x36>
    1f14:	57 c0       	rjmp	.+174    	; 0x1fc4 <SSD_setNumber+0xe4>
		{
			switch(ssd_object->Copy_uSSDPort)
    1f16:	ea 81       	ldd	r30, Y+2	; 0x02
    1f18:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1a:	80 81       	ld	r24, Z
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	38 87       	std	Y+8, r19	; 0x08
    1f22:	2f 83       	std	Y+7, r18	; 0x07
    1f24:	8f 81       	ldd	r24, Y+7	; 0x07
    1f26:	98 85       	ldd	r25, Y+8	; 0x08
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	11 f1       	breq	.+68     	; 0x1f72 <SSD_setNumber+0x92>
    1f2e:	2f 81       	ldd	r18, Y+7	; 0x07
    1f30:	38 85       	ldd	r19, Y+8	; 0x08
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <SSD_setNumber+0x62>
    1f38:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3a:	98 85       	ldd	r25, Y+8	; 0x08
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <SSD_setNumber+0x78>
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <SSD_setNumber+0xe0>
    1f42:	2f 81       	ldd	r18, Y+7	; 0x07
    1f44:	38 85       	ldd	r19, Y+8	; 0x08
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	01 f1       	breq	.+64     	; 0x1f8c <SSD_setNumber+0xac>
    1f4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4e:	98 85       	ldd	r25, Y+8	; 0x08
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	91 05       	cpc	r25, r1
    1f54:	41 f1       	breq	.+80     	; 0x1fa6 <SSD_setNumber+0xc6>
    1f56:	34 c0       	rjmp	.+104    	; 0x1fc0 <SSD_setNumber+0xe0>
			{
			case PORTA_INDEX : {DIO_PORTA=cathodArr[value]; retValue=ERROR_OK; break;}
    1f58:	ab e3       	ldi	r26, 0x3B	; 59
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	fc 01       	movw	r30, r24
    1f64:	e9 57       	subi	r30, 0x79	; 121
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 81       	ld	r24, Z
    1f6a:	8c 93       	st	X, r24
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	8c c0       	rjmp	.+280    	; 0x208a <SSD_setNumber+0x1aa>
			case PORTB_INDEX : {DIO_PORTB=cathodArr[value]; retValue=ERROR_OK; break;}
    1f72:	a8 e3       	ldi	r26, 0x38	; 56
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	8c 81       	ldd	r24, Y+4	; 0x04
    1f78:	88 2f       	mov	r24, r24
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	e9 57       	subi	r30, 0x79	; 121
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 81       	ld	r24, Z
    1f84:	8c 93       	st	X, r24
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	7f c0       	rjmp	.+254    	; 0x208a <SSD_setNumber+0x1aa>
			case PORTC_INDEX : {DIO_PORTC=cathodArr[value]; retValue=ERROR_OK; break;}
    1f8c:	a5 e3       	ldi	r26, 0x35	; 53
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	fc 01       	movw	r30, r24
    1f98:	e9 57       	subi	r30, 0x79	; 121
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8c 93       	st	X, r24
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	72 c0       	rjmp	.+228    	; 0x208a <SSD_setNumber+0x1aa>
			case PORTD_INDEX : {DIO_PORTD=cathodArr[value]; retValue=ERROR_OK; break;}
    1fa6:	a2 e3       	ldi	r26, 0x32	; 50
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	e9 57       	subi	r30, 0x79	; 121
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8c 93       	st	X, r24
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	65 c0       	rjmp	.+202    	; 0x208a <SSD_setNumber+0x1aa>
			default:retValue = ERROR_NOT_OK;
    1fc0:	19 82       	std	Y+1, r1	; 0x01
    1fc2:	63 c0       	rjmp	.+198    	; 0x208a <SSD_setNumber+0x1aa>
			}
		}
		else if(ssd_object->Copy_u8SSDType == COMMON_ANODE)
    1fc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc8:	81 81       	ldd	r24, Z+1	; 0x01
    1fca:	81 70       	andi	r24, 0x01	; 1
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <SSD_setNumber+0xf2>
    1fd0:	5b c0       	rjmp	.+182    	; 0x2088 <SSD_setNumber+0x1a8>
		{
			switch(ssd_object->Copy_uSSDPort)
    1fd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd6:	80 81       	ld	r24, Z
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	3e 83       	std	Y+6, r19	; 0x06
    1fde:	2d 83       	std	Y+5, r18	; 0x05
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	81 30       	cpi	r24, 0x01	; 1
    1fe6:	91 05       	cpc	r25, r1
    1fe8:	19 f1       	breq	.+70     	; 0x2030 <SSD_setNumber+0x150>
    1fea:	2d 81       	ldd	r18, Y+5	; 0x05
    1fec:	3e 81       	ldd	r19, Y+6	; 0x06
    1fee:	22 30       	cpi	r18, 0x02	; 2
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <SSD_setNumber+0x11e>
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	61 f0       	breq	.+24     	; 0x2014 <SSD_setNumber+0x134>
    1ffc:	43 c0       	rjmp	.+134    	; 0x2084 <SSD_setNumber+0x1a4>
    1ffe:	2d 81       	ldd	r18, Y+5	; 0x05
    2000:	3e 81       	ldd	r19, Y+6	; 0x06
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	31 05       	cpc	r19, r1
    2006:	11 f1       	breq	.+68     	; 0x204c <SSD_setNumber+0x16c>
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	83 30       	cpi	r24, 0x03	; 3
    200e:	91 05       	cpc	r25, r1
    2010:	59 f1       	breq	.+86     	; 0x2068 <SSD_setNumber+0x188>
    2012:	38 c0       	rjmp	.+112    	; 0x2084 <SSD_setNumber+0x1a4>
			{
			case PORTA_INDEX : {DIO_PORTA=~cathodArr[value]; retValue=ERROR_OK; break;}
    2014:	ab e3       	ldi	r26, 0x3B	; 59
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	fc 01       	movw	r30, r24
    2020:	e9 57       	subi	r30, 0x79	; 121
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	80 95       	com	r24
    2028:	8c 93       	st	X, r24
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	2d c0       	rjmp	.+90     	; 0x208a <SSD_setNumber+0x1aa>
			case PORTB_INDEX : {DIO_PORTB=~cathodArr[value]; retValue=ERROR_OK; break;}
    2030:	a8 e3       	ldi	r26, 0x38	; 56
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	fc 01       	movw	r30, r24
    203c:	e9 57       	subi	r30, 0x79	; 121
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	80 95       	com	r24
    2044:	8c 93       	st	X, r24
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	1f c0       	rjmp	.+62     	; 0x208a <SSD_setNumber+0x1aa>
			case PORTC_INDEX : {DIO_PORTC=~cathodArr[value]; retValue=ERROR_OK; break;}
    204c:	a5 e3       	ldi	r26, 0x35	; 53
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	fc 01       	movw	r30, r24
    2058:	e9 57       	subi	r30, 0x79	; 121
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	80 95       	com	r24
    2060:	8c 93       	st	X, r24
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	89 83       	std	Y+1, r24	; 0x01
    2066:	11 c0       	rjmp	.+34     	; 0x208a <SSD_setNumber+0x1aa>
			case PORTD_INDEX : {DIO_PORTD=~cathodArr[value]; retValue=ERROR_OK; break;}
    2068:	a2 e3       	ldi	r26, 0x32	; 50
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	8c 81       	ldd	r24, Y+4	; 0x04
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	fc 01       	movw	r30, r24
    2074:	e9 57       	subi	r30, 0x79	; 121
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	80 95       	com	r24
    207c:	8c 93       	st	X, r24
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	03 c0       	rjmp	.+6      	; 0x208a <SSD_setNumber+0x1aa>
			default:retValue = ERROR_NOT_OK;
    2084:	19 82       	std	Y+1, r1	; 0x01
    2086:	01 c0       	rjmp	.+2      	; 0x208a <SSD_setNumber+0x1aa>
			}
		}
		else
		{
			retValue = ERROR_NOT_OK;
    2088:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return retValue;
    208a:	89 81       	ldd	r24, Y+1	; 0x01
}
    208c:	28 96       	adiw	r28, 0x08	; 8
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <EXT_Enable>:
static void (*INT1_Fptr) (void)=NULL;
static void (*INT2_Fptr) (void)=NULL;


Std_ReturnType EXT_Enable(ExInterruptSource_type interrupt,TriggerEdge_type edge)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	2b 97       	sbiw	r28, 0x0b	; 11
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	8a 83       	std	Y+2, r24	; 0x02
    20b4:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType retValue =ERROR_NOT_OK;
    20b6:	19 82       	std	Y+1, r1	; 0x01

	switch(interrupt)
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	3b 87       	std	Y+11, r19	; 0x0b
    20c0:	2a 87       	std	Y+10, r18	; 0x0a
    20c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c6:	81 30       	cpi	r24, 0x01	; 1
    20c8:	91 05       	cpc	r25, r1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <EXT_Enable+0x30>
    20cc:	71 c0       	rjmp	.+226    	; 0x21b0 <EXT_Enable+0x112>
    20ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    20d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	09 f4       	brne	.+2      	; 0x20da <EXT_Enable+0x3c>
    20d8:	d1 c0       	rjmp	.+418    	; 0x227c <EXT_Enable+0x1de>
    20da:	8a 85       	ldd	r24, Y+10	; 0x0a
    20dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <EXT_Enable+0x46>
    20e2:	fc c0       	rjmp	.+504    	; 0x22dc <EXT_Enable+0x23e>
	{
	case EX_INT0 :
		{
			BIT_SET(INT0,GICR_REG);
    20e4:	ab e5       	ldi	r26, 0x5B	; 91
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	eb e5       	ldi	r30, 0x5B	; 91
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	80 64       	ori	r24, 0x40	; 64
    20f0:	8c 93       	st	X, r24
			retValue = ERROR_OK;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	89 83       	std	Y+1, r24	; 0x01
			switch(edge)
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	39 87       	std	Y+9, r19	; 0x09
    20fe:	28 87       	std	Y+8, r18	; 0x08
    2100:	88 85       	ldd	r24, Y+8	; 0x08
    2102:	99 85       	ldd	r25, Y+9	; 0x09
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	91 05       	cpc	r25, r1
    2108:	21 f1       	breq	.+72     	; 0x2152 <EXT_Enable+0xb4>
    210a:	28 85       	ldd	r18, Y+8	; 0x08
    210c:	39 85       	ldd	r19, Y+9	; 0x09
    210e:	22 30       	cpi	r18, 0x02	; 2
    2110:	31 05       	cpc	r19, r1
    2112:	2c f4       	brge	.+10     	; 0x211e <EXT_Enable+0x80>
    2114:	88 85       	ldd	r24, Y+8	; 0x08
    2116:	99 85       	ldd	r25, Y+9	; 0x09
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	61 f0       	breq	.+24     	; 0x2134 <EXT_Enable+0x96>
    211c:	47 c0       	rjmp	.+142    	; 0x21ac <EXT_Enable+0x10e>
    211e:	28 85       	ldd	r18, Y+8	; 0x08
    2120:	39 85       	ldd	r19, Y+9	; 0x09
    2122:	22 30       	cpi	r18, 0x02	; 2
    2124:	31 05       	cpc	r19, r1
    2126:	21 f1       	breq	.+72     	; 0x2170 <EXT_Enable+0xd2>
    2128:	88 85       	ldd	r24, Y+8	; 0x08
    212a:	99 85       	ldd	r25, Y+9	; 0x09
    212c:	83 30       	cpi	r24, 0x03	; 3
    212e:	91 05       	cpc	r25, r1
    2130:	71 f1       	breq	.+92     	; 0x218e <EXT_Enable+0xf0>
    2132:	3c c0       	rjmp	.+120    	; 0x21ac <EXT_Enable+0x10e>
			{
			case LOW_LEVEL:{BIT_CLEAR(ISC00,MCUCR_REG);	BIT_CLEAR(ISC01,MCUCR_REG);	break;}
    2134:	a5 e5       	ldi	r26, 0x55	; 85
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e5 e5       	ldi	r30, 0x55	; 85
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8e 7f       	andi	r24, 0xFE	; 254
    2140:	8c 93       	st	X, r24
    2142:	a5 e5       	ldi	r26, 0x55	; 85
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e5 e5       	ldi	r30, 0x55	; 85
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	8d 7f       	andi	r24, 0xFD	; 253
    214e:	8c 93       	st	X, r24
    2150:	c5 c0       	rjmp	.+394    	; 0x22dc <EXT_Enable+0x23e>
			case ANY_LOGIC_CHANGE:{BIT_SET(ISC00,MCUCR_REG); BIT_CLEAR(ISC01,MCUCR_REG); break;}
    2152:	a5 e5       	ldi	r26, 0x55	; 85
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e5       	ldi	r30, 0x55	; 85
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	81 60       	ori	r24, 0x01	; 1
    215e:	8c 93       	st	X, r24
    2160:	a5 e5       	ldi	r26, 0x55	; 85
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e5 e5       	ldi	r30, 0x55	; 85
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8d 7f       	andi	r24, 0xFD	; 253
    216c:	8c 93       	st	X, r24
    216e:	b6 c0       	rjmp	.+364    	; 0x22dc <EXT_Enable+0x23e>
			case FALLING_EDGE:{BIT_CLEAR(ISC00,MCUCR_REG); BIT_SET(ISC01,MCUCR_REG); break;}
    2170:	a5 e5       	ldi	r26, 0x55	; 85
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e5       	ldi	r30, 0x55	; 85
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8e 7f       	andi	r24, 0xFE	; 254
    217c:	8c 93       	st	X, r24
    217e:	a5 e5       	ldi	r26, 0x55	; 85
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 e5       	ldi	r30, 0x55	; 85
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	82 60       	ori	r24, 0x02	; 2
    218a:	8c 93       	st	X, r24
    218c:	a7 c0       	rjmp	.+334    	; 0x22dc <EXT_Enable+0x23e>
			case RISING_EDGE:{BIT_SET(ISC00,MCUCR_REG); BIT_SET(ISC01,MCUCR_REG); break;}
    218e:	a5 e5       	ldi	r26, 0x55	; 85
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e5 e5       	ldi	r30, 0x55	; 85
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	81 60       	ori	r24, 0x01	; 1
    219a:	8c 93       	st	X, r24
    219c:	a5 e5       	ldi	r26, 0x55	; 85
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e5 e5       	ldi	r30, 0x55	; 85
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	82 60       	ori	r24, 0x02	; 2
    21a8:	8c 93       	st	X, r24
    21aa:	98 c0       	rjmp	.+304    	; 0x22dc <EXT_Enable+0x23e>
			default:retValue =ERROR_NOT_OK;
    21ac:	19 82       	std	Y+1, r1	; 0x01
    21ae:	96 c0       	rjmp	.+300    	; 0x22dc <EXT_Enable+0x23e>
			}
			break;
		}
	case EX_INT1:
		{
			BIT_SET(INT1,GICR_REG);
    21b0:	ab e5       	ldi	r26, 0x5B	; 91
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	eb e5       	ldi	r30, 0x5B	; 91
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 68       	ori	r24, 0x80	; 128
    21bc:	8c 93       	st	X, r24
			retValue = ERROR_OK;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	89 83       	std	Y+1, r24	; 0x01
			switch(edge)
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	3f 83       	std	Y+7, r19	; 0x07
    21ca:	2e 83       	std	Y+6, r18	; 0x06
    21cc:	8e 81       	ldd	r24, Y+6	; 0x06
    21ce:	9f 81       	ldd	r25, Y+7	; 0x07
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	91 05       	cpc	r25, r1
    21d4:	21 f1       	breq	.+72     	; 0x221e <EXT_Enable+0x180>
    21d6:	2e 81       	ldd	r18, Y+6	; 0x06
    21d8:	3f 81       	ldd	r19, Y+7	; 0x07
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	2c f4       	brge	.+10     	; 0x21ea <EXT_Enable+0x14c>
    21e0:	8e 81       	ldd	r24, Y+6	; 0x06
    21e2:	9f 81       	ldd	r25, Y+7	; 0x07
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	61 f0       	breq	.+24     	; 0x2200 <EXT_Enable+0x162>
    21e8:	47 c0       	rjmp	.+142    	; 0x2278 <EXT_Enable+0x1da>
    21ea:	2e 81       	ldd	r18, Y+6	; 0x06
    21ec:	3f 81       	ldd	r19, Y+7	; 0x07
    21ee:	22 30       	cpi	r18, 0x02	; 2
    21f0:	31 05       	cpc	r19, r1
    21f2:	21 f1       	breq	.+72     	; 0x223c <EXT_Enable+0x19e>
    21f4:	8e 81       	ldd	r24, Y+6	; 0x06
    21f6:	9f 81       	ldd	r25, Y+7	; 0x07
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	91 05       	cpc	r25, r1
    21fc:	71 f1       	breq	.+92     	; 0x225a <EXT_Enable+0x1bc>
    21fe:	3c c0       	rjmp	.+120    	; 0x2278 <EXT_Enable+0x1da>
			{
			case LOW_LEVEL:{BIT_CLEAR(ISC10,MCUCR_REG);	BIT_CLEAR(ISC11,MCUCR_REG);	break;}
    2200:	a5 e5       	ldi	r26, 0x55	; 85
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e5 e5       	ldi	r30, 0x55	; 85
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8b 7f       	andi	r24, 0xFB	; 251
    220c:	8c 93       	st	X, r24
    220e:	a5 e5       	ldi	r26, 0x55	; 85
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e5 e5       	ldi	r30, 0x55	; 85
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	87 7f       	andi	r24, 0xF7	; 247
    221a:	8c 93       	st	X, r24
    221c:	5f c0       	rjmp	.+190    	; 0x22dc <EXT_Enable+0x23e>
			case ANY_LOGIC_CHANGE:{BIT_SET(ISC10,MCUCR_REG); BIT_CLEAR(ISC11,MCUCR_REG); break;}
    221e:	a5 e5       	ldi	r26, 0x55	; 85
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e5       	ldi	r30, 0x55	; 85
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	84 60       	ori	r24, 0x04	; 4
    222a:	8c 93       	st	X, r24
    222c:	a5 e5       	ldi	r26, 0x55	; 85
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e5 e5       	ldi	r30, 0x55	; 85
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	87 7f       	andi	r24, 0xF7	; 247
    2238:	8c 93       	st	X, r24
    223a:	50 c0       	rjmp	.+160    	; 0x22dc <EXT_Enable+0x23e>
			case FALLING_EDGE:{BIT_CLEAR(ISC10,MCUCR_REG); BIT_SET(ISC11,MCUCR_REG); break;}
    223c:	a5 e5       	ldi	r26, 0x55	; 85
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e5 e5       	ldi	r30, 0x55	; 85
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8b 7f       	andi	r24, 0xFB	; 251
    2248:	8c 93       	st	X, r24
    224a:	a5 e5       	ldi	r26, 0x55	; 85
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e5 e5       	ldi	r30, 0x55	; 85
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	88 60       	ori	r24, 0x08	; 8
    2256:	8c 93       	st	X, r24
    2258:	41 c0       	rjmp	.+130    	; 0x22dc <EXT_Enable+0x23e>
			case RISING_EDGE:{BIT_SET(ISC10,MCUCR_REG); BIT_SET(ISC11,MCUCR_REG); break;}
    225a:	a5 e5       	ldi	r26, 0x55	; 85
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e5 e5       	ldi	r30, 0x55	; 85
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	84 60       	ori	r24, 0x04	; 4
    2266:	8c 93       	st	X, r24
    2268:	a5 e5       	ldi	r26, 0x55	; 85
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e5 e5       	ldi	r30, 0x55	; 85
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	88 60       	ori	r24, 0x08	; 8
    2274:	8c 93       	st	X, r24
    2276:	32 c0       	rjmp	.+100    	; 0x22dc <EXT_Enable+0x23e>
			default:retValue =ERROR_NOT_OK;
    2278:	19 82       	std	Y+1, r1	; 0x01
    227a:	30 c0       	rjmp	.+96     	; 0x22dc <EXT_Enable+0x23e>
			}
			break;
		}
	case EX_INT2:
		{
			BIT_SET(INT2,GICR_REG);
    227c:	ab e5       	ldi	r26, 0x5B	; 91
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	eb e5       	ldi	r30, 0x5B	; 91
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	80 62       	ori	r24, 0x20	; 32
    2288:	8c 93       	st	X, r24
			retValue = ERROR_OK;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	89 83       	std	Y+1, r24	; 0x01
			switch(edge)
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	3d 83       	std	Y+5, r19	; 0x05
    2296:	2c 83       	std	Y+4, r18	; 0x04
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	9d 81       	ldd	r25, Y+5	; 0x05
    229c:	82 30       	cpi	r24, 0x02	; 2
    229e:	91 05       	cpc	r25, r1
    22a0:	31 f0       	breq	.+12     	; 0x22ae <EXT_Enable+0x210>
    22a2:	2c 81       	ldd	r18, Y+4	; 0x04
    22a4:	3d 81       	ldd	r19, Y+5	; 0x05
    22a6:	23 30       	cpi	r18, 0x03	; 3
    22a8:	31 05       	cpc	r19, r1
    22aa:	49 f0       	breq	.+18     	; 0x22be <EXT_Enable+0x220>
    22ac:	10 c0       	rjmp	.+32     	; 0x22ce <EXT_Enable+0x230>
			{
			case FALLING_EDGE:{BIT_CLEAR(ISC2,MCUCSR_REG); break;}
    22ae:	a5 e5       	ldi	r26, 0x55	; 85
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e5 e5       	ldi	r30, 0x55	; 85
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	8f 7b       	andi	r24, 0xBF	; 191
    22ba:	8c 93       	st	X, r24
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <EXT_Enable+0x23e>
			case RISING_EDGE:{BIT_SET(ISC2,MCUCSR_REG); break;}
    22be:	a5 e5       	ldi	r26, 0x55	; 85
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e5 e5       	ldi	r30, 0x55	; 85
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	80 64       	ori	r24, 0x40	; 64
    22ca:	8c 93       	st	X, r24
    22cc:	07 c0       	rjmp	.+14     	; 0x22dc <EXT_Enable+0x23e>
			default:BIT_SET(ISC2,MCUCSR_REG);
    22ce:	a5 e5       	ldi	r26, 0x55	; 85
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e5 e5       	ldi	r30, 0x55	; 85
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	80 64       	ori	r24, 0x40	; 64
    22da:	8c 93       	st	X, r24
			break;
		}

	}

	return retValue;
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22de:	2b 96       	adiw	r28, 0x0b	; 11
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <EXT_Disable>:

Std_ReturnType EXT_Disable(ExInterruptSource_type interrupt)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <EXT_Disable+0x6>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <EXT_Disable+0x8>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType retValue=ERROR_NOT_OK;
    22fe:	19 82       	std	Y+1, r1	; 0x01
	switch(interrupt)
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	3c 83       	std	Y+4, r19	; 0x04
    2308:	2b 83       	std	Y+3, r18	; 0x03
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	91 05       	cpc	r25, r1
    2312:	99 f0       	breq	.+38     	; 0x233a <EXT_Disable+0x4a>
    2314:	2b 81       	ldd	r18, Y+3	; 0x03
    2316:	3c 81       	ldd	r19, Y+4	; 0x04
    2318:	22 30       	cpi	r18, 0x02	; 2
    231a:	31 05       	cpc	r19, r1
    231c:	c1 f0       	breq	.+48     	; 0x234e <EXT_Disable+0x5e>
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	f1 f4       	brne	.+60     	; 0x2362 <EXT_Disable+0x72>
	{
	case EX_INT0:{BIT_CLEAR(INT0,GICR_REG); retValue=ERROR_OK; break;}
    2326:	ab e5       	ldi	r26, 0x5B	; 91
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	eb e5       	ldi	r30, 0x5B	; 91
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	8f 7b       	andi	r24, 0xBF	; 191
    2332:	8c 93       	st	X, r24
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	15 c0       	rjmp	.+42     	; 0x2364 <EXT_Disable+0x74>
	case EX_INT1:{BIT_CLEAR(INT1,GICR_REG); retValue=ERROR_OK; break;}
    233a:	ab e5       	ldi	r26, 0x5B	; 91
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	eb e5       	ldi	r30, 0x5B	; 91
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	8f 77       	andi	r24, 0x7F	; 127
    2346:	8c 93       	st	X, r24
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	0b c0       	rjmp	.+22     	; 0x2364 <EXT_Disable+0x74>
	case EX_INT2:{BIT_CLEAR(INT2,GICR_REG); retValue=ERROR_OK; break;}
    234e:	ab e5       	ldi	r26, 0x5B	; 91
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	eb e5       	ldi	r30, 0x5B	; 91
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8f 7d       	andi	r24, 0xDF	; 223
    235a:	8c 93       	st	X, r24
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <EXT_Disable+0x74>
	default: retValue =ERROR_NOT_OK;
    2362:	19 82       	std	Y+1, r1	; 0x01
	}
	return retValue;
    2364:	89 81       	ldd	r24, Y+1	; 0x01
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <SET_CallBack>:

Std_ReturnType SET_CallBack(ExInterruptSource_type interrupt,void(*callback_Func)(void))
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <SET_CallBack+0x6>
    237a:	00 d0       	rcall	.+0      	; 0x237c <SET_CallBack+0x8>
    237c:	00 d0       	rcall	.+0      	; 0x237e <SET_CallBack+0xa>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	8a 83       	std	Y+2, r24	; 0x02
    2384:	7c 83       	std	Y+4, r23	; 0x04
    2386:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType retValue=ERROR_NOT_OK;
    2388:	19 82       	std	Y+1, r1	; 0x01

	switch(interrupt)
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	3e 83       	std	Y+6, r19	; 0x06
    2392:	2d 83       	std	Y+5, r18	; 0x05
    2394:	8d 81       	ldd	r24, Y+5	; 0x05
    2396:	9e 81       	ldd	r25, Y+6	; 0x06
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	91 05       	cpc	r25, r1
    239c:	91 f0       	breq	.+36     	; 0x23c2 <SET_CallBack+0x4e>
    239e:	2d 81       	ldd	r18, Y+5	; 0x05
    23a0:	3e 81       	ldd	r19, Y+6	; 0x06
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	b1 f0       	breq	.+44     	; 0x23d4 <SET_CallBack+0x60>
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	d9 f4       	brne	.+54     	; 0x23e6 <SET_CallBack+0x72>
	{
	case EX_INT0:{INT0_Fptr = callback_Func; retValue=ERROR_OK; break;}
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	90 93 bd 00 	sts	0x00BD, r25
    23b8:	80 93 bc 00 	sts	0x00BC, r24
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	13 c0       	rjmp	.+38     	; 0x23e8 <SET_CallBack+0x74>
	case EX_INT1:{INT1_Fptr = callback_Func; retValue=ERROR_OK; break;}
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	90 93 bf 00 	sts	0x00BF, r25
    23ca:	80 93 be 00 	sts	0x00BE, r24
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	0a c0       	rjmp	.+20     	; 0x23e8 <SET_CallBack+0x74>
	case EX_INT2:{INT2_Fptr = callback_Func; retValue=ERROR_OK; break;}
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	90 93 c1 00 	sts	0x00C1, r25
    23dc:	80 93 c0 00 	sts	0x00C0, r24
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	01 c0       	rjmp	.+2      	; 0x23e8 <SET_CallBack+0x74>
	default :retValue =ERROR_NOT_OK;
    23e6:	19 82       	std	Y+1, r1	; 0x01
	}
	return retValue;
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ea:	26 96       	adiw	r28, 0x06	; 6
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <__vector_1>:


/******************************** ISR VECTORS **************************************/

ISR(INT0_VECTOR)
{
    23fc:	1f 92       	push	r1
    23fe:	0f 92       	push	r0
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	0f 92       	push	r0
    2404:	11 24       	eor	r1, r1
    2406:	2f 93       	push	r18
    2408:	3f 93       	push	r19
    240a:	4f 93       	push	r20
    240c:	5f 93       	push	r21
    240e:	6f 93       	push	r22
    2410:	7f 93       	push	r23
    2412:	8f 93       	push	r24
    2414:	9f 93       	push	r25
    2416:	af 93       	push	r26
    2418:	bf 93       	push	r27
    241a:	ef 93       	push	r30
    241c:	ff 93       	push	r31
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
	if(INT0_Fptr != NULL)
    2426:	80 91 bc 00 	lds	r24, 0x00BC
    242a:	90 91 bd 00 	lds	r25, 0x00BD
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	29 f0       	breq	.+10     	; 0x243c <__vector_1+0x40>
	{
		INT0_Fptr();
    2432:	e0 91 bc 00 	lds	r30, 0x00BC
    2436:	f0 91 bd 00 	lds	r31, 0x00BD
    243a:	09 95       	icall
	}
}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	ff 91       	pop	r31
    2442:	ef 91       	pop	r30
    2444:	bf 91       	pop	r27
    2446:	af 91       	pop	r26
    2448:	9f 91       	pop	r25
    244a:	8f 91       	pop	r24
    244c:	7f 91       	pop	r23
    244e:	6f 91       	pop	r22
    2450:	5f 91       	pop	r21
    2452:	4f 91       	pop	r20
    2454:	3f 91       	pop	r19
    2456:	2f 91       	pop	r18
    2458:	0f 90       	pop	r0
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	0f 90       	pop	r0
    245e:	1f 90       	pop	r1
    2460:	18 95       	reti

00002462 <__vector_2>:

ISR(INT1_VECTOR)
{
    2462:	1f 92       	push	r1
    2464:	0f 92       	push	r0
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	0f 92       	push	r0
    246a:	11 24       	eor	r1, r1
    246c:	2f 93       	push	r18
    246e:	3f 93       	push	r19
    2470:	4f 93       	push	r20
    2472:	5f 93       	push	r21
    2474:	6f 93       	push	r22
    2476:	7f 93       	push	r23
    2478:	8f 93       	push	r24
    247a:	9f 93       	push	r25
    247c:	af 93       	push	r26
    247e:	bf 93       	push	r27
    2480:	ef 93       	push	r30
    2482:	ff 93       	push	r31
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	if(INT1_Fptr != NULL)
    248c:	80 91 be 00 	lds	r24, 0x00BE
    2490:	90 91 bf 00 	lds	r25, 0x00BF
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	29 f0       	breq	.+10     	; 0x24a2 <__vector_2+0x40>
	{
		INT1_Fptr();
    2498:	e0 91 be 00 	lds	r30, 0x00BE
    249c:	f0 91 bf 00 	lds	r31, 0x00BF
    24a0:	09 95       	icall
	}
}
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	ff 91       	pop	r31
    24a8:	ef 91       	pop	r30
    24aa:	bf 91       	pop	r27
    24ac:	af 91       	pop	r26
    24ae:	9f 91       	pop	r25
    24b0:	8f 91       	pop	r24
    24b2:	7f 91       	pop	r23
    24b4:	6f 91       	pop	r22
    24b6:	5f 91       	pop	r21
    24b8:	4f 91       	pop	r20
    24ba:	3f 91       	pop	r19
    24bc:	2f 91       	pop	r18
    24be:	0f 90       	pop	r0
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	0f 90       	pop	r0
    24c4:	1f 90       	pop	r1
    24c6:	18 95       	reti

000024c8 <__vector_3>:

ISR(INT2_VECTOR)
{
    24c8:	1f 92       	push	r1
    24ca:	0f 92       	push	r0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	0f 92       	push	r0
    24d0:	11 24       	eor	r1, r1
    24d2:	2f 93       	push	r18
    24d4:	3f 93       	push	r19
    24d6:	4f 93       	push	r20
    24d8:	5f 93       	push	r21
    24da:	6f 93       	push	r22
    24dc:	7f 93       	push	r23
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
    24ea:	df 93       	push	r29
    24ec:	cf 93       	push	r28
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
	if(INT2_Fptr != NULL)
    24f2:	80 91 c0 00 	lds	r24, 0x00C0
    24f6:	90 91 c1 00 	lds	r25, 0x00C1
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	29 f0       	breq	.+10     	; 0x2508 <__vector_3+0x40>
	{
		INT2_Fptr();
    24fe:	e0 91 c0 00 	lds	r30, 0x00C0
    2502:	f0 91 c1 00 	lds	r31, 0x00C1
    2506:	09 95       	icall
	}
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	ff 91       	pop	r31
    250e:	ef 91       	pop	r30
    2510:	bf 91       	pop	r27
    2512:	af 91       	pop	r26
    2514:	9f 91       	pop	r25
    2516:	8f 91       	pop	r24
    2518:	7f 91       	pop	r23
    251a:	6f 91       	pop	r22
    251c:	5f 91       	pop	r21
    251e:	4f 91       	pop	r20
    2520:	3f 91       	pop	r19
    2522:	2f 91       	pop	r18
    2524:	0f 90       	pop	r0
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	0f 90       	pop	r0
    252a:	1f 90       	pop	r1
    252c:	18 95       	reti

0000252e <DIO_pin_init>:
#include "../../bit_masking.h"
#include "../../std_types.h"
#include "gpio.h"

Std_ReturnType DIO_pin_init(const pinConfig_t *pin_object)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	27 97       	sbiw	r28, 0x07	; 7
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	9b 83       	std	Y+3, r25	; 0x03
    2544:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType retValue=ERROR_NOT_OK;
    2546:	19 82       	std	Y+1, r1	; 0x01

	if(pin_object == NULL)
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	11 f4       	brne	.+4      	; 0x2554 <DIO_pin_init+0x26>
	{
		retValue=ERROR_NULL;
    2550:	19 82       	std	Y+1, r1	; 0x01
    2552:	19 c1       	rjmp	.+562    	; 0x2786 <DIO_pin_init+0x258>
	}
	else
	{
		if(pin_object->directionSel == OUTPUT)
    2554:	ea 81       	ldd	r30, Y+2	; 0x02
    2556:	fb 81       	ldd	r31, Y+3	; 0x03
    2558:	82 81       	ldd	r24, Z+2	; 0x02
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	09 f0       	breq	.+2      	; 0x2560 <DIO_pin_init+0x32>
    255e:	84 c0       	rjmp	.+264    	; 0x2668 <DIO_pin_init+0x13a>
		{
			switch(pin_object->portSel)
    2560:	ea 81       	ldd	r30, Y+2	; 0x02
    2562:	fb 81       	ldd	r31, Y+3	; 0x03
    2564:	80 81       	ld	r24, Z
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	3f 83       	std	Y+7, r19	; 0x07
    256c:	2e 83       	std	Y+6, r18	; 0x06
    256e:	8e 81       	ldd	r24, Y+6	; 0x06
    2570:	9f 81       	ldd	r25, Y+7	; 0x07
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	91 05       	cpc	r25, r1
    2576:	71 f1       	breq	.+92     	; 0x25d4 <DIO_pin_init+0xa6>
    2578:	2e 81       	ldd	r18, Y+6	; 0x06
    257a:	3f 81       	ldd	r19, Y+7	; 0x07
    257c:	22 30       	cpi	r18, 0x02	; 2
    257e:	31 05       	cpc	r19, r1
    2580:	2c f4       	brge	.+10     	; 0x258c <DIO_pin_init+0x5e>
    2582:	8e 81       	ldd	r24, Y+6	; 0x06
    2584:	9f 81       	ldd	r25, Y+7	; 0x07
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f0       	breq	.+26     	; 0x25a4 <DIO_pin_init+0x76>
    258a:	6c c0       	rjmp	.+216    	; 0x2664 <DIO_pin_init+0x136>
    258c:	2e 81       	ldd	r18, Y+6	; 0x06
    258e:	3f 81       	ldd	r19, Y+7	; 0x07
    2590:	22 30       	cpi	r18, 0x02	; 2
    2592:	31 05       	cpc	r19, r1
    2594:	b9 f1       	breq	.+110    	; 0x2604 <DIO_pin_init+0xd6>
    2596:	8e 81       	ldd	r24, Y+6	; 0x06
    2598:	9f 81       	ldd	r25, Y+7	; 0x07
    259a:	83 30       	cpi	r24, 0x03	; 3
    259c:	91 05       	cpc	r25, r1
    259e:	09 f4       	brne	.+2      	; 0x25a2 <DIO_pin_init+0x74>
    25a0:	49 c0       	rjmp	.+146    	; 0x2634 <DIO_pin_init+0x106>
    25a2:	60 c0       	rjmp	.+192    	; 0x2664 <DIO_pin_init+0x136>
			{
			case PORTA_INDEX:	{BIT_SET(pin_object->pinSel,DIO_DDRA); retValue= ERROR_OK;	break;}
    25a4:	aa e3       	ldi	r26, 0x3A	; 58
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	ea e3       	ldi	r30, 0x3A	; 58
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	48 2f       	mov	r20, r24
    25b0:	ea 81       	ldd	r30, Y+2	; 0x02
    25b2:	fb 81       	ldd	r31, Y+3	; 0x03
    25b4:	81 81       	ldd	r24, Z+1	; 0x01
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	02 2e       	mov	r0, r18
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <DIO_pin_init+0x98>
    25c2:	88 0f       	add	r24, r24
    25c4:	99 1f       	adc	r25, r25
    25c6:	0a 94       	dec	r0
    25c8:	e2 f7       	brpl	.-8      	; 0x25c2 <DIO_pin_init+0x94>
    25ca:	84 2b       	or	r24, r20
    25cc:	8c 93       	st	X, r24
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	d9 c0       	rjmp	.+434    	; 0x2786 <DIO_pin_init+0x258>
			case PORTB_INDEX:	{BIT_SET(pin_object->pinSel,DIO_DDRB); retValue= ERROR_OK;	break;}
    25d4:	a7 e3       	ldi	r26, 0x37	; 55
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e7 e3       	ldi	r30, 0x37	; 55
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	48 2f       	mov	r20, r24
    25e0:	ea 81       	ldd	r30, Y+2	; 0x02
    25e2:	fb 81       	ldd	r31, Y+3	; 0x03
    25e4:	81 81       	ldd	r24, Z+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	02 2e       	mov	r0, r18
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <DIO_pin_init+0xc8>
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	0a 94       	dec	r0
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <DIO_pin_init+0xc4>
    25fa:	84 2b       	or	r24, r20
    25fc:	8c 93       	st	X, r24
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	c1 c0       	rjmp	.+386    	; 0x2786 <DIO_pin_init+0x258>
			case PORTC_INDEX:	{BIT_SET(pin_object->pinSel,DIO_DDRC); retValue= ERROR_OK;	break;}
    2604:	a4 e3       	ldi	r26, 0x34	; 52
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e4 e3       	ldi	r30, 0x34	; 52
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	48 2f       	mov	r20, r24
    2610:	ea 81       	ldd	r30, Y+2	; 0x02
    2612:	fb 81       	ldd	r31, Y+3	; 0x03
    2614:	81 81       	ldd	r24, Z+1	; 0x01
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	02 2e       	mov	r0, r18
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <DIO_pin_init+0xf8>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	0a 94       	dec	r0
    2628:	e2 f7       	brpl	.-8      	; 0x2622 <DIO_pin_init+0xf4>
    262a:	84 2b       	or	r24, r20
    262c:	8c 93       	st	X, r24
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	a9 c0       	rjmp	.+338    	; 0x2786 <DIO_pin_init+0x258>
			case PORTD_INDEX:	{BIT_SET(pin_object->pinSel,DIO_DDRD); retValue= ERROR_OK;	break;}
    2634:	a1 e3       	ldi	r26, 0x31	; 49
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e1 e3       	ldi	r30, 0x31	; 49
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	48 2f       	mov	r20, r24
    2640:	ea 81       	ldd	r30, Y+2	; 0x02
    2642:	fb 81       	ldd	r31, Y+3	; 0x03
    2644:	81 81       	ldd	r24, Z+1	; 0x01
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	02 2e       	mov	r0, r18
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <DIO_pin_init+0x128>
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	0a 94       	dec	r0
    2658:	e2 f7       	brpl	.-8      	; 0x2652 <DIO_pin_init+0x124>
    265a:	84 2b       	or	r24, r20
    265c:	8c 93       	st	X, r24
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	91 c0       	rjmp	.+290    	; 0x2786 <DIO_pin_init+0x258>
			default:retValue=ERROR_NOT_OK;
    2664:	19 82       	std	Y+1, r1	; 0x01
    2666:	8f c0       	rjmp	.+286    	; 0x2786 <DIO_pin_init+0x258>
			}

		}
		else if(pin_object->directionSel == INPUT)
    2668:	ea 81       	ldd	r30, Y+2	; 0x02
    266a:	fb 81       	ldd	r31, Y+3	; 0x03
    266c:	82 81       	ldd	r24, Z+2	; 0x02
    266e:	88 23       	and	r24, r24
    2670:	09 f0       	breq	.+2      	; 0x2674 <DIO_pin_init+0x146>
    2672:	88 c0       	rjmp	.+272    	; 0x2784 <DIO_pin_init+0x256>
		{
			switch(pin_object->portSel)
    2674:	ea 81       	ldd	r30, Y+2	; 0x02
    2676:	fb 81       	ldd	r31, Y+3	; 0x03
    2678:	80 81       	ld	r24, Z
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	3d 83       	std	Y+5, r19	; 0x05
    2680:	2c 83       	std	Y+4, r18	; 0x04
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	91 05       	cpc	r25, r1
    268a:	79 f1       	breq	.+94     	; 0x26ea <DIO_pin_init+0x1bc>
    268c:	2c 81       	ldd	r18, Y+4	; 0x04
    268e:	3d 81       	ldd	r19, Y+5	; 0x05
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	31 05       	cpc	r19, r1
    2694:	2c f4       	brge	.+10     	; 0x26a0 <DIO_pin_init+0x172>
    2696:	8c 81       	ldd	r24, Y+4	; 0x04
    2698:	9d 81       	ldd	r25, Y+5	; 0x05
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	69 f0       	breq	.+26     	; 0x26b8 <DIO_pin_init+0x18a>
    269e:	70 c0       	rjmp	.+224    	; 0x2780 <DIO_pin_init+0x252>
    26a0:	2c 81       	ldd	r18, Y+4	; 0x04
    26a2:	3d 81       	ldd	r19, Y+5	; 0x05
    26a4:	22 30       	cpi	r18, 0x02	; 2
    26a6:	31 05       	cpc	r19, r1
    26a8:	c9 f1       	breq	.+114    	; 0x271c <DIO_pin_init+0x1ee>
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	9d 81       	ldd	r25, Y+5	; 0x05
    26ae:	83 30       	cpi	r24, 0x03	; 3
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <DIO_pin_init+0x188>
    26b4:	4c c0       	rjmp	.+152    	; 0x274e <DIO_pin_init+0x220>
    26b6:	64 c0       	rjmp	.+200    	; 0x2780 <DIO_pin_init+0x252>
			{
			case PORTA_INDEX:	{BIT_CLEAR(pin_object->pinSel,DIO_DDRA); retValue= ERROR_OK; break;}
    26b8:	aa e3       	ldi	r26, 0x3A	; 58
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	ea e3       	ldi	r30, 0x3A	; 58
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	48 2f       	mov	r20, r24
    26c4:	ea 81       	ldd	r30, Y+2	; 0x02
    26c6:	fb 81       	ldd	r31, Y+3	; 0x03
    26c8:	81 81       	ldd	r24, Z+1	; 0x01
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	02 2e       	mov	r0, r18
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <DIO_pin_init+0x1ac>
    26d6:	88 0f       	add	r24, r24
    26d8:	99 1f       	adc	r25, r25
    26da:	0a 94       	dec	r0
    26dc:	e2 f7       	brpl	.-8      	; 0x26d6 <DIO_pin_init+0x1a8>
    26de:	80 95       	com	r24
    26e0:	84 23       	and	r24, r20
    26e2:	8c 93       	st	X, r24
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	4e c0       	rjmp	.+156    	; 0x2786 <DIO_pin_init+0x258>
			case PORTB_INDEX:	{BIT_CLEAR(pin_object->pinSel,DIO_DDRB); retValue= ERROR_OK; break;}
    26ea:	a7 e3       	ldi	r26, 0x37	; 55
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e7 e3       	ldi	r30, 0x37	; 55
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	48 2f       	mov	r20, r24
    26f6:	ea 81       	ldd	r30, Y+2	; 0x02
    26f8:	fb 81       	ldd	r31, Y+3	; 0x03
    26fa:	81 81       	ldd	r24, Z+1	; 0x01
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	02 2e       	mov	r0, r18
    2706:	02 c0       	rjmp	.+4      	; 0x270c <DIO_pin_init+0x1de>
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	0a 94       	dec	r0
    270e:	e2 f7       	brpl	.-8      	; 0x2708 <DIO_pin_init+0x1da>
    2710:	80 95       	com	r24
    2712:	84 23       	and	r24, r20
    2714:	8c 93       	st	X, r24
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	35 c0       	rjmp	.+106    	; 0x2786 <DIO_pin_init+0x258>
			case PORTC_INDEX:	{BIT_CLEAR(pin_object->pinSel,DIO_DDRC); retValue= ERROR_OK; break;}
    271c:	a4 e3       	ldi	r26, 0x34	; 52
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e4 e3       	ldi	r30, 0x34	; 52
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	48 2f       	mov	r20, r24
    2728:	ea 81       	ldd	r30, Y+2	; 0x02
    272a:	fb 81       	ldd	r31, Y+3	; 0x03
    272c:	81 81       	ldd	r24, Z+1	; 0x01
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	02 2e       	mov	r0, r18
    2738:	02 c0       	rjmp	.+4      	; 0x273e <DIO_pin_init+0x210>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	0a 94       	dec	r0
    2740:	e2 f7       	brpl	.-8      	; 0x273a <DIO_pin_init+0x20c>
    2742:	80 95       	com	r24
    2744:	84 23       	and	r24, r20
    2746:	8c 93       	st	X, r24
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	1c c0       	rjmp	.+56     	; 0x2786 <DIO_pin_init+0x258>
			case PORTD_INDEX:	{BIT_CLEAR(pin_object->pinSel,DIO_DDRD); retValue= ERROR_OK; break;}
    274e:	a1 e3       	ldi	r26, 0x31	; 49
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e1 e3       	ldi	r30, 0x31	; 49
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	48 2f       	mov	r20, r24
    275a:	ea 81       	ldd	r30, Y+2	; 0x02
    275c:	fb 81       	ldd	r31, Y+3	; 0x03
    275e:	81 81       	ldd	r24, Z+1	; 0x01
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	02 2e       	mov	r0, r18
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <DIO_pin_init+0x242>
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	0a 94       	dec	r0
    2772:	e2 f7       	brpl	.-8      	; 0x276c <DIO_pin_init+0x23e>
    2774:	80 95       	com	r24
    2776:	84 23       	and	r24, r20
    2778:	8c 93       	st	X, r24
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	03 c0       	rjmp	.+6      	; 0x2786 <DIO_pin_init+0x258>
			default:retValue=ERROR_NOT_OK;
    2780:	19 82       	std	Y+1, r1	; 0x01
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <DIO_pin_init+0x258>
			}
		}
		else
		{
			retValue = ERROR_NOT_OK;
    2784:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return retValue;
    2786:	89 81       	ldd	r24, Y+1	; 0x01
}
    2788:	27 96       	adiw	r28, 0x07	; 7
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <DIO_pin_read>:

Std_ReturnType DIO_pin_read(const pinConfig_t *pin_object,logic_t *value)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	27 97       	sbiw	r28, 0x07	; 7
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	9b 83       	std	Y+3, r25	; 0x03
    27b0:	8a 83       	std	Y+2, r24	; 0x02
    27b2:	7d 83       	std	Y+5, r23	; 0x05
    27b4:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType retValue= ERROR_NOT_OK;
    27b6:	19 82       	std	Y+1, r1	; 0x01

	if(pin_object == NULL || value == NULL)
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	21 f0       	breq	.+8      	; 0x27c8 <DIO_pin_read+0x2e>
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	11 f4       	brne	.+4      	; 0x27cc <DIO_pin_read+0x32>
	{
		retValue= ERROR_NULL;
    27c8:	19 82       	std	Y+1, r1	; 0x01
    27ca:	84 c0       	rjmp	.+264    	; 0x28d4 <DIO_pin_read+0x13a>
	}
	else
	{
		switch(pin_object->portSel)
    27cc:	ea 81       	ldd	r30, Y+2	; 0x02
    27ce:	fb 81       	ldd	r31, Y+3	; 0x03
    27d0:	80 81       	ld	r24, Z
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	3f 83       	std	Y+7, r19	; 0x07
    27d8:	2e 83       	std	Y+6, r18	; 0x06
    27da:	4e 81       	ldd	r20, Y+6	; 0x06
    27dc:	5f 81       	ldd	r21, Y+7	; 0x07
    27de:	41 30       	cpi	r20, 0x01	; 1
    27e0:	51 05       	cpc	r21, r1
    27e2:	79 f1       	breq	.+94     	; 0x2842 <DIO_pin_read+0xa8>
    27e4:	8e 81       	ldd	r24, Y+6	; 0x06
    27e6:	9f 81       	ldd	r25, Y+7	; 0x07
    27e8:	82 30       	cpi	r24, 0x02	; 2
    27ea:	91 05       	cpc	r25, r1
    27ec:	34 f4       	brge	.+12     	; 0x27fa <DIO_pin_read+0x60>
    27ee:	2e 81       	ldd	r18, Y+6	; 0x06
    27f0:	3f 81       	ldd	r19, Y+7	; 0x07
    27f2:	21 15       	cp	r18, r1
    27f4:	31 05       	cpc	r19, r1
    27f6:	69 f0       	breq	.+26     	; 0x2812 <DIO_pin_read+0x78>
    27f8:	6c c0       	rjmp	.+216    	; 0x28d2 <DIO_pin_read+0x138>
    27fa:	4e 81       	ldd	r20, Y+6	; 0x06
    27fc:	5f 81       	ldd	r21, Y+7	; 0x07
    27fe:	42 30       	cpi	r20, 0x02	; 2
    2800:	51 05       	cpc	r21, r1
    2802:	b9 f1       	breq	.+110    	; 0x2872 <DIO_pin_read+0xd8>
    2804:	8e 81       	ldd	r24, Y+6	; 0x06
    2806:	9f 81       	ldd	r25, Y+7	; 0x07
    2808:	83 30       	cpi	r24, 0x03	; 3
    280a:	91 05       	cpc	r25, r1
    280c:	09 f4       	brne	.+2      	; 0x2810 <DIO_pin_read+0x76>
    280e:	49 c0       	rjmp	.+146    	; 0x28a2 <DIO_pin_read+0x108>
    2810:	60 c0       	rjmp	.+192    	; 0x28d2 <DIO_pin_read+0x138>
		{
		case PORTA_INDEX : {*value=BIT_READ(pin_object->pinSel,DIO_PINA); retValue= ERROR_OK; break;}
    2812:	e9 e3       	ldi	r30, 0x39	; 57
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	ea 81       	ldd	r30, Y+2	; 0x02
    281e:	fb 81       	ldd	r31, Y+3	; 0x03
    2820:	81 81       	ldd	r24, Z+1	; 0x01
    2822:	88 2f       	mov	r24, r24
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a9 01       	movw	r20, r18
    2828:	02 c0       	rjmp	.+4      	; 0x282e <DIO_pin_read+0x94>
    282a:	55 95       	asr	r21
    282c:	47 95       	ror	r20
    282e:	8a 95       	dec	r24
    2830:	e2 f7       	brpl	.-8      	; 0x282a <DIO_pin_read+0x90>
    2832:	ca 01       	movw	r24, r20
    2834:	81 70       	andi	r24, 0x01	; 1
    2836:	ec 81       	ldd	r30, Y+4	; 0x04
    2838:	fd 81       	ldd	r31, Y+5	; 0x05
    283a:	80 83       	st	Z, r24
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	49 c0       	rjmp	.+146    	; 0x28d4 <DIO_pin_read+0x13a>
		case PORTB_INDEX : {*value=BIT_READ(pin_object->pinSel,DIO_PINB); retValue= ERROR_OK; break;}
    2842:	e6 e3       	ldi	r30, 0x36	; 54
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	ea 81       	ldd	r30, Y+2	; 0x02
    284e:	fb 81       	ldd	r31, Y+3	; 0x03
    2850:	81 81       	ldd	r24, Z+1	; 0x01
    2852:	88 2f       	mov	r24, r24
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a9 01       	movw	r20, r18
    2858:	02 c0       	rjmp	.+4      	; 0x285e <DIO_pin_read+0xc4>
    285a:	55 95       	asr	r21
    285c:	47 95       	ror	r20
    285e:	8a 95       	dec	r24
    2860:	e2 f7       	brpl	.-8      	; 0x285a <DIO_pin_read+0xc0>
    2862:	ca 01       	movw	r24, r20
    2864:	81 70       	andi	r24, 0x01	; 1
    2866:	ec 81       	ldd	r30, Y+4	; 0x04
    2868:	fd 81       	ldd	r31, Y+5	; 0x05
    286a:	80 83       	st	Z, r24
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	89 83       	std	Y+1, r24	; 0x01
    2870:	31 c0       	rjmp	.+98     	; 0x28d4 <DIO_pin_read+0x13a>
		case PORTC_INDEX : {*value=BIT_READ(pin_object->pinSel,DIO_PINC); retValue= ERROR_OK; break;}
    2872:	e3 e3       	ldi	r30, 0x33	; 51
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	28 2f       	mov	r18, r24
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	ea 81       	ldd	r30, Y+2	; 0x02
    287e:	fb 81       	ldd	r31, Y+3	; 0x03
    2880:	81 81       	ldd	r24, Z+1	; 0x01
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a9 01       	movw	r20, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <DIO_pin_read+0xf4>
    288a:	55 95       	asr	r21
    288c:	47 95       	ror	r20
    288e:	8a 95       	dec	r24
    2890:	e2 f7       	brpl	.-8      	; 0x288a <DIO_pin_read+0xf0>
    2892:	ca 01       	movw	r24, r20
    2894:	81 70       	andi	r24, 0x01	; 1
    2896:	ec 81       	ldd	r30, Y+4	; 0x04
    2898:	fd 81       	ldd	r31, Y+5	; 0x05
    289a:	80 83       	st	Z, r24
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	19 c0       	rjmp	.+50     	; 0x28d4 <DIO_pin_read+0x13a>
		case PORTD_INDEX : {*value=BIT_READ(pin_object->pinSel,DIO_PIND); retValue= ERROR_OK; break;}
    28a2:	e0 e3       	ldi	r30, 0x30	; 48
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	ea 81       	ldd	r30, Y+2	; 0x02
    28ae:	fb 81       	ldd	r31, Y+3	; 0x03
    28b0:	81 81       	ldd	r24, Z+1	; 0x01
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a9 01       	movw	r20, r18
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <DIO_pin_read+0x124>
    28ba:	55 95       	asr	r21
    28bc:	47 95       	ror	r20
    28be:	8a 95       	dec	r24
    28c0:	e2 f7       	brpl	.-8      	; 0x28ba <DIO_pin_read+0x120>
    28c2:	ca 01       	movw	r24, r20
    28c4:	81 70       	andi	r24, 0x01	; 1
    28c6:	ec 81       	ldd	r30, Y+4	; 0x04
    28c8:	fd 81       	ldd	r31, Y+5	; 0x05
    28ca:	80 83       	st	Z, r24
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	01 c0       	rjmp	.+2      	; 0x28d4 <DIO_pin_read+0x13a>
		default:retValue=ERROR_NOT_OK;
    28d2:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return retValue;
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28d6:	27 96       	adiw	r28, 0x07	; 7
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <DIO_pin_write>:

Std_ReturnType DIO_pin_write(const pinConfig_t *pin_object,logic_t value)
{
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	28 97       	sbiw	r28, 0x08	; 8
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	9b 83       	std	Y+3, r25	; 0x03
    28fe:	8a 83       	std	Y+2, r24	; 0x02
    2900:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType retValue=ERROR_NOT_OK;
    2902:	19 82       	std	Y+1, r1	; 0x01
	if(pin_object == NULL)
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	9b 81       	ldd	r25, Y+3	; 0x03
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	11 f4       	brne	.+4      	; 0x2910 <DIO_pin_write+0x28>
	{
		retValue= ERROR_NULL;
    290c:	19 82       	std	Y+1, r1	; 0x01
    290e:	15 c1       	rjmp	.+554    	; 0x2b3a <DIO_pin_write+0x252>
	}
	else
	{
		if(value == HIGH)
    2910:	8c 81       	ldd	r24, Y+4	; 0x04
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	09 f0       	breq	.+2      	; 0x2918 <DIO_pin_write+0x30>
    2916:	84 c0       	rjmp	.+264    	; 0x2a20 <DIO_pin_write+0x138>
		{
			switch(pin_object->portSel)
    2918:	ea 81       	ldd	r30, Y+2	; 0x02
    291a:	fb 81       	ldd	r31, Y+3	; 0x03
    291c:	80 81       	ld	r24, Z
    291e:	28 2f       	mov	r18, r24
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	38 87       	std	Y+8, r19	; 0x08
    2924:	2f 83       	std	Y+7, r18	; 0x07
    2926:	8f 81       	ldd	r24, Y+7	; 0x07
    2928:	98 85       	ldd	r25, Y+8	; 0x08
    292a:	81 30       	cpi	r24, 0x01	; 1
    292c:	91 05       	cpc	r25, r1
    292e:	71 f1       	breq	.+92     	; 0x298c <DIO_pin_write+0xa4>
    2930:	2f 81       	ldd	r18, Y+7	; 0x07
    2932:	38 85       	ldd	r19, Y+8	; 0x08
    2934:	22 30       	cpi	r18, 0x02	; 2
    2936:	31 05       	cpc	r19, r1
    2938:	2c f4       	brge	.+10     	; 0x2944 <DIO_pin_write+0x5c>
    293a:	8f 81       	ldd	r24, Y+7	; 0x07
    293c:	98 85       	ldd	r25, Y+8	; 0x08
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	69 f0       	breq	.+26     	; 0x295c <DIO_pin_write+0x74>
    2942:	6c c0       	rjmp	.+216    	; 0x2a1c <DIO_pin_write+0x134>
    2944:	2f 81       	ldd	r18, Y+7	; 0x07
    2946:	38 85       	ldd	r19, Y+8	; 0x08
    2948:	22 30       	cpi	r18, 0x02	; 2
    294a:	31 05       	cpc	r19, r1
    294c:	b9 f1       	breq	.+110    	; 0x29bc <DIO_pin_write+0xd4>
    294e:	8f 81       	ldd	r24, Y+7	; 0x07
    2950:	98 85       	ldd	r25, Y+8	; 0x08
    2952:	83 30       	cpi	r24, 0x03	; 3
    2954:	91 05       	cpc	r25, r1
    2956:	09 f4       	brne	.+2      	; 0x295a <DIO_pin_write+0x72>
    2958:	49 c0       	rjmp	.+146    	; 0x29ec <DIO_pin_write+0x104>
    295a:	60 c0       	rjmp	.+192    	; 0x2a1c <DIO_pin_write+0x134>
			{
			case PORTA_INDEX:{BIT_SET(pin_object->pinSel,DIO_PORTA); retValue= ERROR_OK; break;}
    295c:	ab e3       	ldi	r26, 0x3B	; 59
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	eb e3       	ldi	r30, 0x3B	; 59
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	48 2f       	mov	r20, r24
    2968:	ea 81       	ldd	r30, Y+2	; 0x02
    296a:	fb 81       	ldd	r31, Y+3	; 0x03
    296c:	81 81       	ldd	r24, Z+1	; 0x01
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	02 2e       	mov	r0, r18
    2978:	02 c0       	rjmp	.+4      	; 0x297e <DIO_pin_write+0x96>
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	0a 94       	dec	r0
    2980:	e2 f7       	brpl	.-8      	; 0x297a <DIO_pin_write+0x92>
    2982:	84 2b       	or	r24, r20
    2984:	8c 93       	st	X, r24
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	d7 c0       	rjmp	.+430    	; 0x2b3a <DIO_pin_write+0x252>
			case PORTB_INDEX:{BIT_SET(pin_object->pinSel,DIO_PORTB); retValue= ERROR_OK; break;}
    298c:	a8 e3       	ldi	r26, 0x38	; 56
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	e8 e3       	ldi	r30, 0x38	; 56
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	48 2f       	mov	r20, r24
    2998:	ea 81       	ldd	r30, Y+2	; 0x02
    299a:	fb 81       	ldd	r31, Y+3	; 0x03
    299c:	81 81       	ldd	r24, Z+1	; 0x01
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	02 2e       	mov	r0, r18
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <DIO_pin_write+0xc6>
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	0a 94       	dec	r0
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <DIO_pin_write+0xc2>
    29b2:	84 2b       	or	r24, r20
    29b4:	8c 93       	st	X, r24
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	bf c0       	rjmp	.+382    	; 0x2b3a <DIO_pin_write+0x252>
			case PORTC_INDEX:{BIT_SET(pin_object->pinSel,DIO_PORTC); retValue= ERROR_OK; break;}
    29bc:	a5 e3       	ldi	r26, 0x35	; 53
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e5 e3       	ldi	r30, 0x35	; 53
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	48 2f       	mov	r20, r24
    29c8:	ea 81       	ldd	r30, Y+2	; 0x02
    29ca:	fb 81       	ldd	r31, Y+3	; 0x03
    29cc:	81 81       	ldd	r24, Z+1	; 0x01
    29ce:	28 2f       	mov	r18, r24
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	02 2e       	mov	r0, r18
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <DIO_pin_write+0xf6>
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	0a 94       	dec	r0
    29e0:	e2 f7       	brpl	.-8      	; 0x29da <DIO_pin_write+0xf2>
    29e2:	84 2b       	or	r24, r20
    29e4:	8c 93       	st	X, r24
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	a7 c0       	rjmp	.+334    	; 0x2b3a <DIO_pin_write+0x252>
			case PORTD_INDEX:{BIT_SET(pin_object->pinSel,DIO_PORTD); retValue= ERROR_OK; break;}
    29ec:	a2 e3       	ldi	r26, 0x32	; 50
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e2 e3       	ldi	r30, 0x32	; 50
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	48 2f       	mov	r20, r24
    29f8:	ea 81       	ldd	r30, Y+2	; 0x02
    29fa:	fb 81       	ldd	r31, Y+3	; 0x03
    29fc:	81 81       	ldd	r24, Z+1	; 0x01
    29fe:	28 2f       	mov	r18, r24
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	02 2e       	mov	r0, r18
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <DIO_pin_write+0x126>
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	0a 94       	dec	r0
    2a10:	e2 f7       	brpl	.-8      	; 0x2a0a <DIO_pin_write+0x122>
    2a12:	84 2b       	or	r24, r20
    2a14:	8c 93       	st	X, r24
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	8f c0       	rjmp	.+286    	; 0x2b3a <DIO_pin_write+0x252>
			default: retValue = ERROR_NOT_OK;
    2a1c:	19 82       	std	Y+1, r1	; 0x01
    2a1e:	8d c0       	rjmp	.+282    	; 0x2b3a <DIO_pin_write+0x252>
			}

		}
		else if(value == LOW)
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
    2a22:	88 23       	and	r24, r24
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <DIO_pin_write+0x140>
    2a26:	88 c0       	rjmp	.+272    	; 0x2b38 <DIO_pin_write+0x250>
		{
			switch(pin_object->portSel)
    2a28:	ea 81       	ldd	r30, Y+2	; 0x02
    2a2a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a2c:	80 81       	ld	r24, Z
    2a2e:	28 2f       	mov	r18, r24
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	3e 83       	std	Y+6, r19	; 0x06
    2a34:	2d 83       	std	Y+5, r18	; 0x05
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	79 f1       	breq	.+94     	; 0x2a9e <DIO_pin_write+0x1b6>
    2a40:	2d 81       	ldd	r18, Y+5	; 0x05
    2a42:	3e 81       	ldd	r19, Y+6	; 0x06
    2a44:	22 30       	cpi	r18, 0x02	; 2
    2a46:	31 05       	cpc	r19, r1
    2a48:	2c f4       	brge	.+10     	; 0x2a54 <DIO_pin_write+0x16c>
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	69 f0       	breq	.+26     	; 0x2a6c <DIO_pin_write+0x184>
    2a52:	70 c0       	rjmp	.+224    	; 0x2b34 <DIO_pin_write+0x24c>
    2a54:	2d 81       	ldd	r18, Y+5	; 0x05
    2a56:	3e 81       	ldd	r19, Y+6	; 0x06
    2a58:	22 30       	cpi	r18, 0x02	; 2
    2a5a:	31 05       	cpc	r19, r1
    2a5c:	c9 f1       	breq	.+114    	; 0x2ad0 <DIO_pin_write+0x1e8>
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	83 30       	cpi	r24, 0x03	; 3
    2a64:	91 05       	cpc	r25, r1
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <DIO_pin_write+0x182>
    2a68:	4c c0       	rjmp	.+152    	; 0x2b02 <DIO_pin_write+0x21a>
    2a6a:	64 c0       	rjmp	.+200    	; 0x2b34 <DIO_pin_write+0x24c>
			{
			case PORTA_INDEX:{BIT_CLEAR(pin_object->pinSel,DIO_PORTA); retValue= ERROR_OK; break;}
    2a6c:	ab e3       	ldi	r26, 0x3B	; 59
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	eb e3       	ldi	r30, 0x3B	; 59
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	48 2f       	mov	r20, r24
    2a78:	ea 81       	ldd	r30, Y+2	; 0x02
    2a7a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a7c:	81 81       	ldd	r24, Z+1	; 0x01
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	02 2e       	mov	r0, r18
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <DIO_pin_write+0x1a6>
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	0a 94       	dec	r0
    2a90:	e2 f7       	brpl	.-8      	; 0x2a8a <DIO_pin_write+0x1a2>
    2a92:	80 95       	com	r24
    2a94:	84 23       	and	r24, r20
    2a96:	8c 93       	st	X, r24
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	4e c0       	rjmp	.+156    	; 0x2b3a <DIO_pin_write+0x252>
			case PORTB_INDEX:{BIT_CLEAR(pin_object->pinSel,DIO_PORTB); retValue= ERROR_OK; break;}
    2a9e:	a8 e3       	ldi	r26, 0x38	; 56
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e8 e3       	ldi	r30, 0x38	; 56
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	48 2f       	mov	r20, r24
    2aaa:	ea 81       	ldd	r30, Y+2	; 0x02
    2aac:	fb 81       	ldd	r31, Y+3	; 0x03
    2aae:	81 81       	ldd	r24, Z+1	; 0x01
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	02 2e       	mov	r0, r18
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <DIO_pin_write+0x1d8>
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	0a 94       	dec	r0
    2ac2:	e2 f7       	brpl	.-8      	; 0x2abc <DIO_pin_write+0x1d4>
    2ac4:	80 95       	com	r24
    2ac6:	84 23       	and	r24, r20
    2ac8:	8c 93       	st	X, r24
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	35 c0       	rjmp	.+106    	; 0x2b3a <DIO_pin_write+0x252>
			case PORTC_INDEX:{BIT_CLEAR(pin_object->pinSel,DIO_PORTC); retValue= ERROR_OK; break;}
    2ad0:	a5 e3       	ldi	r26, 0x35	; 53
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e5 e3       	ldi	r30, 0x35	; 53
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	48 2f       	mov	r20, r24
    2adc:	ea 81       	ldd	r30, Y+2	; 0x02
    2ade:	fb 81       	ldd	r31, Y+3	; 0x03
    2ae0:	81 81       	ldd	r24, Z+1	; 0x01
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	02 2e       	mov	r0, r18
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <DIO_pin_write+0x20a>
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	0a 94       	dec	r0
    2af4:	e2 f7       	brpl	.-8      	; 0x2aee <DIO_pin_write+0x206>
    2af6:	80 95       	com	r24
    2af8:	84 23       	and	r24, r20
    2afa:	8c 93       	st	X, r24
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	1c c0       	rjmp	.+56     	; 0x2b3a <DIO_pin_write+0x252>
			case PORTD_INDEX:{BIT_CLEAR(pin_object->pinSel,DIO_PORTD); retValue= ERROR_OK; break;}
    2b02:	a2 e3       	ldi	r26, 0x32	; 50
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e2 e3       	ldi	r30, 0x32	; 50
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	48 2f       	mov	r20, r24
    2b0e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b10:	fb 81       	ldd	r31, Y+3	; 0x03
    2b12:	81 81       	ldd	r24, Z+1	; 0x01
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	02 2e       	mov	r0, r18
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <DIO_pin_write+0x23c>
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	0a 94       	dec	r0
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <DIO_pin_write+0x238>
    2b28:	80 95       	com	r24
    2b2a:	84 23       	and	r24, r20
    2b2c:	8c 93       	st	X, r24
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	89 83       	std	Y+1, r24	; 0x01
    2b32:	03 c0       	rjmp	.+6      	; 0x2b3a <DIO_pin_write+0x252>
			default: retValue = ERROR_NOT_OK;
    2b34:	19 82       	std	Y+1, r1	; 0x01
    2b36:	01 c0       	rjmp	.+2      	; 0x2b3a <DIO_pin_write+0x252>

			}
		}
		else{retValue= ERROR_NOT_OK;}
    2b38:	19 82       	std	Y+1, r1	; 0x01

	}
	return retValue;
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b3c:	28 96       	adiw	r28, 0x08	; 8
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <DIO_pin_toggle>:

Std_ReturnType DIO_pin_toggle(const pinConfig_t *pin_object)
{
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <DIO_pin_toggle+0x6>
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <DIO_pin_toggle+0x8>
    2b56:	0f 92       	push	r0
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	9b 83       	std	Y+3, r25	; 0x03
    2b5e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType retValue= ERROR_NOT_OK;
    2b60:	19 82       	std	Y+1, r1	; 0x01

	if(pin_object == NULL)
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	9b 81       	ldd	r25, Y+3	; 0x03
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <DIO_pin_toggle+0x20>
	{
		retValue= ERROR_NULL;
    2b6a:	19 82       	std	Y+1, r1	; 0x01
    2b6c:	83 c0       	rjmp	.+262    	; 0x2c74 <DIO_pin_toggle+0x126>
	}
	else
	{
		switch(pin_object->portSel)
    2b6e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b70:	fb 81       	ldd	r31, Y+3	; 0x03
    2b72:	80 81       	ld	r24, Z
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	3d 83       	std	Y+5, r19	; 0x05
    2b7a:	2c 83       	std	Y+4, r18	; 0x04
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b80:	81 30       	cpi	r24, 0x01	; 1
    2b82:	91 05       	cpc	r25, r1
    2b84:	71 f1       	breq	.+92     	; 0x2be2 <DIO_pin_toggle+0x94>
    2b86:	2c 81       	ldd	r18, Y+4	; 0x04
    2b88:	3d 81       	ldd	r19, Y+5	; 0x05
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	2c f4       	brge	.+10     	; 0x2b9a <DIO_pin_toggle+0x4c>
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	9d 81       	ldd	r25, Y+5	; 0x05
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	69 f0       	breq	.+26     	; 0x2bb2 <DIO_pin_toggle+0x64>
    2b98:	6c c0       	rjmp	.+216    	; 0x2c72 <DIO_pin_toggle+0x124>
    2b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	b9 f1       	breq	.+110    	; 0x2c12 <DIO_pin_toggle+0xc4>
    2ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba8:	83 30       	cpi	r24, 0x03	; 3
    2baa:	91 05       	cpc	r25, r1
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <DIO_pin_toggle+0x62>
    2bae:	49 c0       	rjmp	.+146    	; 0x2c42 <DIO_pin_toggle+0xf4>
    2bb0:	60 c0       	rjmp	.+192    	; 0x2c72 <DIO_pin_toggle+0x124>
		{
		case PORTA_INDEX:{BIT_TOGGLE(pin_object->pinSel,DIO_PORTA); retValue= ERROR_OK; break;}
    2bb2:	ab e3       	ldi	r26, 0x3B	; 59
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	eb e3       	ldi	r30, 0x3B	; 59
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	48 2f       	mov	r20, r24
    2bbe:	ea 81       	ldd	r30, Y+2	; 0x02
    2bc0:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc2:	81 81       	ldd	r24, Z+1	; 0x01
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	02 2e       	mov	r0, r18
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <DIO_pin_toggle+0x86>
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	0a 94       	dec	r0
    2bd6:	e2 f7       	brpl	.-8      	; 0x2bd0 <DIO_pin_toggle+0x82>
    2bd8:	84 27       	eor	r24, r20
    2bda:	8c 93       	st	X, r24
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	49 c0       	rjmp	.+146    	; 0x2c74 <DIO_pin_toggle+0x126>
		case PORTB_INDEX:{BIT_TOGGLE(pin_object->pinSel,DIO_PORTB); retValue= ERROR_OK; break;}
    2be2:	a8 e3       	ldi	r26, 0x38	; 56
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	e8 e3       	ldi	r30, 0x38	; 56
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	48 2f       	mov	r20, r24
    2bee:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf0:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf2:	81 81       	ldd	r24, Z+1	; 0x01
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	02 2e       	mov	r0, r18
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <DIO_pin_toggle+0xb6>
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	0a 94       	dec	r0
    2c06:	e2 f7       	brpl	.-8      	; 0x2c00 <DIO_pin_toggle+0xb2>
    2c08:	84 27       	eor	r24, r20
    2c0a:	8c 93       	st	X, r24
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	31 c0       	rjmp	.+98     	; 0x2c74 <DIO_pin_toggle+0x126>
		case PORTC_INDEX:{BIT_TOGGLE(pin_object->pinSel,DIO_PORTC); retValue= ERROR_OK; break;}
    2c12:	a5 e3       	ldi	r26, 0x35	; 53
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	e5 e3       	ldi	r30, 0x35	; 53
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	48 2f       	mov	r20, r24
    2c1e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c20:	fb 81       	ldd	r31, Y+3	; 0x03
    2c22:	81 81       	ldd	r24, Z+1	; 0x01
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	02 2e       	mov	r0, r18
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <DIO_pin_toggle+0xe6>
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	0a 94       	dec	r0
    2c36:	e2 f7       	brpl	.-8      	; 0x2c30 <DIO_pin_toggle+0xe2>
    2c38:	84 27       	eor	r24, r20
    2c3a:	8c 93       	st	X, r24
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	19 c0       	rjmp	.+50     	; 0x2c74 <DIO_pin_toggle+0x126>
		case PORTD_INDEX:{BIT_TOGGLE(pin_object->pinSel,DIO_PORTD); retValue= ERROR_OK; break;}
    2c42:	a2 e3       	ldi	r26, 0x32	; 50
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e2 e3       	ldi	r30, 0x32	; 50
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	48 2f       	mov	r20, r24
    2c4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c50:	fb 81       	ldd	r31, Y+3	; 0x03
    2c52:	81 81       	ldd	r24, Z+1	; 0x01
    2c54:	28 2f       	mov	r18, r24
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	02 2e       	mov	r0, r18
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <DIO_pin_toggle+0x116>
    2c60:	88 0f       	add	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	0a 94       	dec	r0
    2c66:	e2 f7       	brpl	.-8      	; 0x2c60 <DIO_pin_toggle+0x112>
    2c68:	84 27       	eor	r24, r20
    2c6a:	8c 93       	st	X, r24
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	01 c0       	rjmp	.+2      	; 0x2c74 <DIO_pin_toggle+0x126>
		default : retValue = ERROR_NOT_OK;
    2c72:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return retValue;
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <DIO_pin_pull_up_active>:

Std_ReturnType DIO_pin_pull_up_active(const pinConfig_t *pin_object)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <DIO_pin_pull_up_active+0x6>
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <DIO_pin_pull_up_active+0x8>
    2c8e:	0f 92       	push	r0
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	9b 83       	std	Y+3, r25	; 0x03
    2c96:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType retValue = ERROR_NOT_OK;
    2c98:	19 82       	std	Y+1, r1	; 0x01
	if(pin_object == NULL)
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	11 f4       	brne	.+4      	; 0x2ca6 <DIO_pin_pull_up_active+0x20>
	{
		retValue = ERROR_NULL;
    2ca2:	19 82       	std	Y+1, r1	; 0x01
    2ca4:	89 c0       	rjmp	.+274    	; 0x2db8 <DIO_pin_pull_up_active+0x132>
	}
	else
	{
		if(pin_object->directionSel == INPUT)
    2ca6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ca8:	fb 81       	ldd	r31, Y+3	; 0x03
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	88 23       	and	r24, r24
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <DIO_pin_pull_up_active+0x2c>
    2cb0:	83 c0       	rjmp	.+262    	; 0x2db8 <DIO_pin_pull_up_active+0x132>
		{
			switch(pin_object->portSel)
    2cb2:	ea 81       	ldd	r30, Y+2	; 0x02
    2cb4:	fb 81       	ldd	r31, Y+3	; 0x03
    2cb6:	80 81       	ld	r24, Z
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	3d 83       	std	Y+5, r19	; 0x05
    2cbe:	2c 83       	std	Y+4, r18	; 0x04
    2cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc4:	81 30       	cpi	r24, 0x01	; 1
    2cc6:	91 05       	cpc	r25, r1
    2cc8:	71 f1       	breq	.+92     	; 0x2d26 <DIO_pin_pull_up_active+0xa0>
    2cca:	2c 81       	ldd	r18, Y+4	; 0x04
    2ccc:	3d 81       	ldd	r19, Y+5	; 0x05
    2cce:	22 30       	cpi	r18, 0x02	; 2
    2cd0:	31 05       	cpc	r19, r1
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <DIO_pin_pull_up_active+0x58>
    2cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	69 f0       	breq	.+26     	; 0x2cf6 <DIO_pin_pull_up_active+0x70>
    2cdc:	6c c0       	rjmp	.+216    	; 0x2db6 <DIO_pin_pull_up_active+0x130>
    2cde:	2c 81       	ldd	r18, Y+4	; 0x04
    2ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce2:	22 30       	cpi	r18, 0x02	; 2
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	b9 f1       	breq	.+110    	; 0x2d56 <DIO_pin_pull_up_active+0xd0>
    2ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cea:	9d 81       	ldd	r25, Y+5	; 0x05
    2cec:	83 30       	cpi	r24, 0x03	; 3
    2cee:	91 05       	cpc	r25, r1
    2cf0:	09 f4       	brne	.+2      	; 0x2cf4 <DIO_pin_pull_up_active+0x6e>
    2cf2:	49 c0       	rjmp	.+146    	; 0x2d86 <DIO_pin_pull_up_active+0x100>
    2cf4:	60 c0       	rjmp	.+192    	; 0x2db6 <DIO_pin_pull_up_active+0x130>
			{
			case PORTA_INDEX:{BIT_SET(pin_object->pinSel,DIO_PORTA); retValue= ERROR_OK; break;}
    2cf6:	ab e3       	ldi	r26, 0x3B	; 59
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	eb e3       	ldi	r30, 0x3B	; 59
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	48 2f       	mov	r20, r24
    2d02:	ea 81       	ldd	r30, Y+2	; 0x02
    2d04:	fb 81       	ldd	r31, Y+3	; 0x03
    2d06:	81 81       	ldd	r24, Z+1	; 0x01
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 2e       	mov	r0, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <DIO_pin_pull_up_active+0x92>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <DIO_pin_pull_up_active+0x8e>
    2d1c:	84 2b       	or	r24, r20
    2d1e:	8c 93       	st	X, r24
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	49 c0       	rjmp	.+146    	; 0x2db8 <DIO_pin_pull_up_active+0x132>
			case PORTB_INDEX:{BIT_SET(pin_object->pinSel,DIO_PORTB); retValue= ERROR_OK; break;}
    2d26:	a8 e3       	ldi	r26, 0x38	; 56
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e8 e3       	ldi	r30, 0x38	; 56
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	48 2f       	mov	r20, r24
    2d32:	ea 81       	ldd	r30, Y+2	; 0x02
    2d34:	fb 81       	ldd	r31, Y+3	; 0x03
    2d36:	81 81       	ldd	r24, Z+1	; 0x01
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	02 2e       	mov	r0, r18
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <DIO_pin_pull_up_active+0xc2>
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	0a 94       	dec	r0
    2d4a:	e2 f7       	brpl	.-8      	; 0x2d44 <DIO_pin_pull_up_active+0xbe>
    2d4c:	84 2b       	or	r24, r20
    2d4e:	8c 93       	st	X, r24
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	31 c0       	rjmp	.+98     	; 0x2db8 <DIO_pin_pull_up_active+0x132>
			case PORTC_INDEX:{BIT_SET(pin_object->pinSel,DIO_PORTC); retValue= ERROR_OK; break;}
    2d56:	a5 e3       	ldi	r26, 0x35	; 53
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	e5 e3       	ldi	r30, 0x35	; 53
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	48 2f       	mov	r20, r24
    2d62:	ea 81       	ldd	r30, Y+2	; 0x02
    2d64:	fb 81       	ldd	r31, Y+3	; 0x03
    2d66:	81 81       	ldd	r24, Z+1	; 0x01
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	02 2e       	mov	r0, r18
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <DIO_pin_pull_up_active+0xf2>
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	0a 94       	dec	r0
    2d7a:	e2 f7       	brpl	.-8      	; 0x2d74 <DIO_pin_pull_up_active+0xee>
    2d7c:	84 2b       	or	r24, r20
    2d7e:	8c 93       	st	X, r24
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	19 c0       	rjmp	.+50     	; 0x2db8 <DIO_pin_pull_up_active+0x132>
			case PORTD_INDEX:{BIT_SET(pin_object->pinSel,DIO_PORTD); retValue= ERROR_OK; break;}
    2d86:	a2 e3       	ldi	r26, 0x32	; 50
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e2 e3       	ldi	r30, 0x32	; 50
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	48 2f       	mov	r20, r24
    2d92:	ea 81       	ldd	r30, Y+2	; 0x02
    2d94:	fb 81       	ldd	r31, Y+3	; 0x03
    2d96:	81 81       	ldd	r24, Z+1	; 0x01
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	02 2e       	mov	r0, r18
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <DIO_pin_pull_up_active+0x122>
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	0a 94       	dec	r0
    2daa:	e2 f7       	brpl	.-8      	; 0x2da4 <DIO_pin_pull_up_active+0x11e>
    2dac:	84 2b       	or	r24, r20
    2dae:	8c 93       	st	X, r24
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	89 83       	std	Y+1, r24	; 0x01
    2db4:	01 c0       	rjmp	.+2      	; 0x2db8 <DIO_pin_pull_up_active+0x132>
			default : retValue = ERROR_NOT_OK;
    2db6:	19 82       	std	Y+1, r1	; 0x01
			}
		}

	}
	return retValue;
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <DIO_pin_pull_up_deactive>:

Std_ReturnType DIO_pin_pull_up_deactive(const pinConfig_t *pin_object)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <DIO_pin_pull_up_deactive+0x6>
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <DIO_pin_pull_up_deactive+0x8>
    2dd2:	0f 92       	push	r0
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	9b 83       	std	Y+3, r25	; 0x03
    2dda:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType retValue = ERROR_NOT_OK;
    2ddc:	19 82       	std	Y+1, r1	; 0x01
		if(pin_object == NULL)
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	9b 81       	ldd	r25, Y+3	; 0x03
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	11 f4       	brne	.+4      	; 0x2dea <DIO_pin_pull_up_deactive+0x20>
		{
			retValue = ERROR_NULL;
    2de6:	19 82       	std	Y+1, r1	; 0x01
    2de8:	8d c0       	rjmp	.+282    	; 0x2f04 <DIO_pin_pull_up_deactive+0x13a>
		}
		else
		{
			if(pin_object->directionSel == INPUT)
    2dea:	ea 81       	ldd	r30, Y+2	; 0x02
    2dec:	fb 81       	ldd	r31, Y+3	; 0x03
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	88 23       	and	r24, r24
    2df2:	09 f0       	breq	.+2      	; 0x2df6 <DIO_pin_pull_up_deactive+0x2c>
    2df4:	87 c0       	rjmp	.+270    	; 0x2f04 <DIO_pin_pull_up_deactive+0x13a>
			{
				switch(pin_object->portSel)
    2df6:	ea 81       	ldd	r30, Y+2	; 0x02
    2df8:	fb 81       	ldd	r31, Y+3	; 0x03
    2dfa:	80 81       	ld	r24, Z
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	3d 83       	std	Y+5, r19	; 0x05
    2e02:	2c 83       	std	Y+4, r18	; 0x04
    2e04:	8c 81       	ldd	r24, Y+4	; 0x04
    2e06:	9d 81       	ldd	r25, Y+5	; 0x05
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	79 f1       	breq	.+94     	; 0x2e6c <DIO_pin_pull_up_deactive+0xa2>
    2e0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2e10:	3d 81       	ldd	r19, Y+5	; 0x05
    2e12:	22 30       	cpi	r18, 0x02	; 2
    2e14:	31 05       	cpc	r19, r1
    2e16:	2c f4       	brge	.+10     	; 0x2e22 <DIO_pin_pull_up_deactive+0x58>
    2e18:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	69 f0       	breq	.+26     	; 0x2e3a <DIO_pin_pull_up_deactive+0x70>
    2e20:	70 c0       	rjmp	.+224    	; 0x2f02 <DIO_pin_pull_up_deactive+0x138>
    2e22:	2c 81       	ldd	r18, Y+4	; 0x04
    2e24:	3d 81       	ldd	r19, Y+5	; 0x05
    2e26:	22 30       	cpi	r18, 0x02	; 2
    2e28:	31 05       	cpc	r19, r1
    2e2a:	c9 f1       	breq	.+114    	; 0x2e9e <DIO_pin_pull_up_deactive+0xd4>
    2e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e30:	83 30       	cpi	r24, 0x03	; 3
    2e32:	91 05       	cpc	r25, r1
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <DIO_pin_pull_up_deactive+0x6e>
    2e36:	4c c0       	rjmp	.+152    	; 0x2ed0 <DIO_pin_pull_up_deactive+0x106>
    2e38:	64 c0       	rjmp	.+200    	; 0x2f02 <DIO_pin_pull_up_deactive+0x138>
				{
				case PORTA_INDEX:{BIT_CLEAR(pin_object->pinSel,DIO_PORTA); retValue= ERROR_OK; break;}
    2e3a:	ab e3       	ldi	r26, 0x3B	; 59
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	eb e3       	ldi	r30, 0x3B	; 59
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	48 2f       	mov	r20, r24
    2e46:	ea 81       	ldd	r30, Y+2	; 0x02
    2e48:	fb 81       	ldd	r31, Y+3	; 0x03
    2e4a:	81 81       	ldd	r24, Z+1	; 0x01
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	02 2e       	mov	r0, r18
    2e56:	02 c0       	rjmp	.+4      	; 0x2e5c <DIO_pin_pull_up_deactive+0x92>
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	0a 94       	dec	r0
    2e5e:	e2 f7       	brpl	.-8      	; 0x2e58 <DIO_pin_pull_up_deactive+0x8e>
    2e60:	80 95       	com	r24
    2e62:	84 23       	and	r24, r20
    2e64:	8c 93       	st	X, r24
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	4c c0       	rjmp	.+152    	; 0x2f04 <DIO_pin_pull_up_deactive+0x13a>
				case PORTB_INDEX:{BIT_CLEAR(pin_object->pinSel,DIO_PORTB); retValue= ERROR_OK; break;}
    2e6c:	a8 e3       	ldi	r26, 0x38	; 56
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e8 e3       	ldi	r30, 0x38	; 56
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	48 2f       	mov	r20, r24
    2e78:	ea 81       	ldd	r30, Y+2	; 0x02
    2e7a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e7c:	81 81       	ldd	r24, Z+1	; 0x01
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	02 2e       	mov	r0, r18
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <DIO_pin_pull_up_deactive+0xc4>
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	0a 94       	dec	r0
    2e90:	e2 f7       	brpl	.-8      	; 0x2e8a <DIO_pin_pull_up_deactive+0xc0>
    2e92:	80 95       	com	r24
    2e94:	84 23       	and	r24, r20
    2e96:	8c 93       	st	X, r24
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	33 c0       	rjmp	.+102    	; 0x2f04 <DIO_pin_pull_up_deactive+0x13a>
				case PORTC_INDEX:{BIT_CLEAR(pin_object->pinSel,DIO_PORTC); retValue= ERROR_OK; break;}
    2e9e:	a5 e3       	ldi	r26, 0x35	; 53
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	e5 e3       	ldi	r30, 0x35	; 53
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	80 81       	ld	r24, Z
    2ea8:	48 2f       	mov	r20, r24
    2eaa:	ea 81       	ldd	r30, Y+2	; 0x02
    2eac:	fb 81       	ldd	r31, Y+3	; 0x03
    2eae:	81 81       	ldd	r24, Z+1	; 0x01
    2eb0:	28 2f       	mov	r18, r24
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	02 2e       	mov	r0, r18
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <DIO_pin_pull_up_deactive+0xf6>
    2ebc:	88 0f       	add	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	0a 94       	dec	r0
    2ec2:	e2 f7       	brpl	.-8      	; 0x2ebc <DIO_pin_pull_up_deactive+0xf2>
    2ec4:	80 95       	com	r24
    2ec6:	84 23       	and	r24, r20
    2ec8:	8c 93       	st	X, r24
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	1a c0       	rjmp	.+52     	; 0x2f04 <DIO_pin_pull_up_deactive+0x13a>
				case PORTD_INDEX:{BIT_CLEAR(pin_object->pinSel,DIO_PORTD); retValue= ERROR_OK; break;}
    2ed0:	a2 e3       	ldi	r26, 0x32	; 50
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e2 e3       	ldi	r30, 0x32	; 50
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	48 2f       	mov	r20, r24
    2edc:	ea 81       	ldd	r30, Y+2	; 0x02
    2ede:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee0:	81 81       	ldd	r24, Z+1	; 0x01
    2ee2:	28 2f       	mov	r18, r24
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	02 2e       	mov	r0, r18
    2eec:	02 c0       	rjmp	.+4      	; 0x2ef2 <DIO_pin_pull_up_deactive+0x128>
    2eee:	88 0f       	add	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	0a 94       	dec	r0
    2ef4:	e2 f7       	brpl	.-8      	; 0x2eee <DIO_pin_pull_up_deactive+0x124>
    2ef6:	80 95       	com	r24
    2ef8:	84 23       	and	r24, r20
    2efa:	8c 93       	st	X, r24
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <DIO_pin_pull_up_deactive+0x13a>
				default : retValue = ERROR_NOT_OK;
    2f02:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
		return retValue;
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	08 95       	ret

00002f16 <DIO_port_init>:

Std_ReturnType DIO_port_init(portIndex_t port_object,direction_t direction)
{
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
    2f1e:	27 97       	sbiw	r28, 0x07	; 7
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	8a 83       	std	Y+2, r24	; 0x02
    2f2c:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType retValue= ERROR_NOT_OK;
    2f2e:	19 82       	std	Y+1, r1	; 0x01

	if(direction == OUTPUT)
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	81 30       	cpi	r24, 0x01	; 1
    2f34:	e9 f5       	brne	.+122    	; 0x2fb0 <DIO_port_init+0x9a>
	{
		switch(port_object)
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	28 2f       	mov	r18, r24
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	3f 83       	std	Y+7, r19	; 0x07
    2f3e:	2e 83       	std	Y+6, r18	; 0x06
    2f40:	8e 81       	ldd	r24, Y+6	; 0x06
    2f42:	9f 81       	ldd	r25, Y+7	; 0x07
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	91 05       	cpc	r25, r1
    2f48:	e1 f0       	breq	.+56     	; 0x2f82 <DIO_port_init+0x6c>
    2f4a:	2e 81       	ldd	r18, Y+6	; 0x06
    2f4c:	3f 81       	ldd	r19, Y+7	; 0x07
    2f4e:	22 30       	cpi	r18, 0x02	; 2
    2f50:	31 05       	cpc	r19, r1
    2f52:	2c f4       	brge	.+10     	; 0x2f5e <DIO_port_init+0x48>
    2f54:	8e 81       	ldd	r24, Y+6	; 0x06
    2f56:	9f 81       	ldd	r25, Y+7	; 0x07
    2f58:	00 97       	sbiw	r24, 0x00	; 0
    2f5a:	61 f0       	breq	.+24     	; 0x2f74 <DIO_port_init+0x5e>
    2f5c:	27 c0       	rjmp	.+78     	; 0x2fac <DIO_port_init+0x96>
    2f5e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f60:	3f 81       	ldd	r19, Y+7	; 0x07
    2f62:	22 30       	cpi	r18, 0x02	; 2
    2f64:	31 05       	cpc	r19, r1
    2f66:	a1 f0       	breq	.+40     	; 0x2f90 <DIO_port_init+0x7a>
    2f68:	8e 81       	ldd	r24, Y+6	; 0x06
    2f6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f6c:	83 30       	cpi	r24, 0x03	; 3
    2f6e:	91 05       	cpc	r25, r1
    2f70:	b1 f0       	breq	.+44     	; 0x2f9e <DIO_port_init+0x88>
    2f72:	1c c0       	rjmp	.+56     	; 0x2fac <DIO_port_init+0x96>
		{
		case PORTA_INDEX :{DIO_DDRA=DIO_u8_PORT_OUTPUT; retValue=ERROR_OK; break;}
    2f74:	ea e3       	ldi	r30, 0x3A	; 58
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	8f ef       	ldi	r24, 0xFF	; 255
    2f7a:	80 83       	st	Z, r24
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	54 c0       	rjmp	.+168    	; 0x302a <DIO_port_init+0x114>
		case PORTB_INDEX :{DIO_DDRB=DIO_u8_PORT_OUTPUT; retValue=ERROR_OK; break;}
    2f82:	e7 e3       	ldi	r30, 0x37	; 55
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	8f ef       	ldi	r24, 0xFF	; 255
    2f88:	80 83       	st	Z, r24
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    2f8e:	4d c0       	rjmp	.+154    	; 0x302a <DIO_port_init+0x114>
		case PORTC_INDEX :{DIO_DDRC=DIO_u8_PORT_OUTPUT; retValue=ERROR_OK; break;}
    2f90:	e4 e3       	ldi	r30, 0x34	; 52
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	8f ef       	ldi	r24, 0xFF	; 255
    2f96:	80 83       	st	Z, r24
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	46 c0       	rjmp	.+140    	; 0x302a <DIO_port_init+0x114>
		case PORTD_INDEX :{DIO_DDRD=DIO_u8_PORT_OUTPUT; retValue=ERROR_OK; break;}
    2f9e:	e1 e3       	ldi	r30, 0x31	; 49
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	8f ef       	ldi	r24, 0xFF	; 255
    2fa4:	80 83       	st	Z, r24
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	3f c0       	rjmp	.+126    	; 0x302a <DIO_port_init+0x114>
		default: retValue = ERROR_NOT_OK;
    2fac:	19 82       	std	Y+1, r1	; 0x01
    2fae:	3d c0       	rjmp	.+122    	; 0x302a <DIO_port_init+0x114>
		}
	}
	else if(direction == INPUT)
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	88 23       	and	r24, r24
    2fb4:	c9 f5       	brne	.+114    	; 0x3028 <DIO_port_init+0x112>
	{
		switch(port_object)
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	3d 83       	std	Y+5, r19	; 0x05
    2fbe:	2c 83       	std	Y+4, r18	; 0x04
    2fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc4:	81 30       	cpi	r24, 0x01	; 1
    2fc6:	91 05       	cpc	r25, r1
    2fc8:	d9 f0       	breq	.+54     	; 0x3000 <DIO_port_init+0xea>
    2fca:	2c 81       	ldd	r18, Y+4	; 0x04
    2fcc:	3d 81       	ldd	r19, Y+5	; 0x05
    2fce:	22 30       	cpi	r18, 0x02	; 2
    2fd0:	31 05       	cpc	r19, r1
    2fd2:	2c f4       	brge	.+10     	; 0x2fde <DIO_port_init+0xc8>
    2fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	61 f0       	breq	.+24     	; 0x2ff4 <DIO_port_init+0xde>
    2fdc:	23 c0       	rjmp	.+70     	; 0x3024 <DIO_port_init+0x10e>
    2fde:	2c 81       	ldd	r18, Y+4	; 0x04
    2fe0:	3d 81       	ldd	r19, Y+5	; 0x05
    2fe2:	22 30       	cpi	r18, 0x02	; 2
    2fe4:	31 05       	cpc	r19, r1
    2fe6:	91 f0       	breq	.+36     	; 0x300c <DIO_port_init+0xf6>
    2fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fea:	9d 81       	ldd	r25, Y+5	; 0x05
    2fec:	83 30       	cpi	r24, 0x03	; 3
    2fee:	91 05       	cpc	r25, r1
    2ff0:	99 f0       	breq	.+38     	; 0x3018 <DIO_port_init+0x102>
    2ff2:	18 c0       	rjmp	.+48     	; 0x3024 <DIO_port_init+0x10e>
		{
		case PORTA_INDEX :{DIO_DDRA=DIO_u8_PORT_INPUT; retValue=ERROR_OK; break;}
    2ff4:	ea e3       	ldi	r30, 0x3A	; 58
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	10 82       	st	Z, r1
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	15 c0       	rjmp	.+42     	; 0x302a <DIO_port_init+0x114>
		case PORTB_INDEX :{DIO_DDRB=DIO_u8_PORT_INPUT; retValue=ERROR_OK; break;}
    3000:	e7 e3       	ldi	r30, 0x37	; 55
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	10 82       	st	Z, r1
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	89 83       	std	Y+1, r24	; 0x01
    300a:	0f c0       	rjmp	.+30     	; 0x302a <DIO_port_init+0x114>
		case PORTC_INDEX :{DIO_DDRC=DIO_u8_PORT_INPUT; retValue=ERROR_OK; break;}
    300c:	e4 e3       	ldi	r30, 0x34	; 52
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	10 82       	st	Z, r1
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	09 c0       	rjmp	.+18     	; 0x302a <DIO_port_init+0x114>
		case PORTD_INDEX :{DIO_DDRD=DIO_u8_PORT_INPUT; retValue=ERROR_OK; break;}
    3018:	e1 e3       	ldi	r30, 0x31	; 49
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	10 82       	st	Z, r1
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	03 c0       	rjmp	.+6      	; 0x302a <DIO_port_init+0x114>
		default: retValue = ERROR_NOT_OK;
    3024:	19 82       	std	Y+1, r1	; 0x01
    3026:	01 c0       	rjmp	.+2      	; 0x302a <DIO_port_init+0x114>
		}
	}
	else{retValue = ERROR_NOT_OK;}
    3028:	19 82       	std	Y+1, r1	; 0x01

	return retValue;
    302a:	89 81       	ldd	r24, Y+1	; 0x01
}
    302c:	27 96       	adiw	r28, 0x07	; 7
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <DIO_port_read>:

Std_ReturnType DIO_port_read(portIndex_t port_object,uint8 *value)
{
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	00 d0       	rcall	.+0      	; 0x3044 <DIO_port_read+0x6>
    3044:	00 d0       	rcall	.+0      	; 0x3046 <DIO_port_read+0x8>
    3046:	00 d0       	rcall	.+0      	; 0x3048 <DIO_port_read+0xa>
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	8a 83       	std	Y+2, r24	; 0x02
    304e:	7c 83       	std	Y+4, r23	; 0x04
    3050:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType retValue= ERROR_NOT_OK;
    3052:	19 82       	std	Y+1, r1	; 0x01

	if(value == NULL)
    3054:	8b 81       	ldd	r24, Y+3	; 0x03
    3056:	9c 81       	ldd	r25, Y+4	; 0x04
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	11 f4       	brne	.+4      	; 0x3060 <DIO_port_read+0x22>
	{
		retValue= ERROR_NULL;
    305c:	19 82       	std	Y+1, r1	; 0x01
    305e:	44 c0       	rjmp	.+136    	; 0x30e8 <DIO_port_read+0xaa>
	}
	else{
		switch(port_object)
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	3e 83       	std	Y+6, r19	; 0x06
    3068:	2d 83       	std	Y+5, r18	; 0x05
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	81 30       	cpi	r24, 0x01	; 1
    3070:	91 05       	cpc	r25, r1
    3072:	f1 f0       	breq	.+60     	; 0x30b0 <DIO_port_read+0x72>
    3074:	2d 81       	ldd	r18, Y+5	; 0x05
    3076:	3e 81       	ldd	r19, Y+6	; 0x06
    3078:	22 30       	cpi	r18, 0x02	; 2
    307a:	31 05       	cpc	r19, r1
    307c:	2c f4       	brge	.+10     	; 0x3088 <DIO_port_read+0x4a>
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	61 f0       	breq	.+24     	; 0x309e <DIO_port_read+0x60>
    3086:	2f c0       	rjmp	.+94     	; 0x30e6 <DIO_port_read+0xa8>
    3088:	2d 81       	ldd	r18, Y+5	; 0x05
    308a:	3e 81       	ldd	r19, Y+6	; 0x06
    308c:	22 30       	cpi	r18, 0x02	; 2
    308e:	31 05       	cpc	r19, r1
    3090:	c1 f0       	breq	.+48     	; 0x30c2 <DIO_port_read+0x84>
    3092:	8d 81       	ldd	r24, Y+5	; 0x05
    3094:	9e 81       	ldd	r25, Y+6	; 0x06
    3096:	83 30       	cpi	r24, 0x03	; 3
    3098:	91 05       	cpc	r25, r1
    309a:	e1 f0       	breq	.+56     	; 0x30d4 <DIO_port_read+0x96>
    309c:	24 c0       	rjmp	.+72     	; 0x30e6 <DIO_port_read+0xa8>
		{
		case PORTA_INDEX :{*value=DIO_PINA; retValue=ERROR_OK; break;}
    309e:	e9 e3       	ldi	r30, 0x39	; 57
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	eb 81       	ldd	r30, Y+3	; 0x03
    30a6:	fc 81       	ldd	r31, Y+4	; 0x04
    30a8:	80 83       	st	Z, r24
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	89 83       	std	Y+1, r24	; 0x01
    30ae:	1c c0       	rjmp	.+56     	; 0x30e8 <DIO_port_read+0xaa>
		case PORTB_INDEX :{*value=DIO_PINB; retValue=ERROR_OK; break;}
    30b0:	e6 e3       	ldi	r30, 0x36	; 54
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	eb 81       	ldd	r30, Y+3	; 0x03
    30b8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ba:	80 83       	st	Z, r24
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	89 83       	std	Y+1, r24	; 0x01
    30c0:	13 c0       	rjmp	.+38     	; 0x30e8 <DIO_port_read+0xaa>
		case PORTC_INDEX :{*value=DIO_PINC; retValue=ERROR_OK; break;}
    30c2:	e3 e3       	ldi	r30, 0x33	; 51
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ca:	fc 81       	ldd	r31, Y+4	; 0x04
    30cc:	80 83       	st	Z, r24
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	89 83       	std	Y+1, r24	; 0x01
    30d2:	0a c0       	rjmp	.+20     	; 0x30e8 <DIO_port_read+0xaa>
		case PORTD_INDEX :{*value=DIO_PIND; retValue=ERROR_OK; break;}
    30d4:	e0 e3       	ldi	r30, 0x30	; 48
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	eb 81       	ldd	r30, Y+3	; 0x03
    30dc:	fc 81       	ldd	r31, Y+4	; 0x04
    30de:	80 83       	st	Z, r24
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	01 c0       	rjmp	.+2      	; 0x30e8 <DIO_port_read+0xaa>
		default: retValue=ERROR_NOT_OK;
    30e6:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return retValue;
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    30ea:	26 96       	adiw	r28, 0x06	; 6
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <DIO_port_write>:

Std_ReturnType DIO_port_write(portIndex_t port_object,uint8 value)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	00 d0       	rcall	.+0      	; 0x3102 <DIO_port_write+0x6>
    3102:	00 d0       	rcall	.+0      	; 0x3104 <DIO_port_write+0x8>
    3104:	0f 92       	push	r0
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	8a 83       	std	Y+2, r24	; 0x02
    310c:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType retValue= ERROR_NOT_OK;
    310e:	19 82       	std	Y+1, r1	; 0x01

	switch(port_object)
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	3d 83       	std	Y+5, r19	; 0x05
    3118:	2c 83       	std	Y+4, r18	; 0x04
    311a:	8c 81       	ldd	r24, Y+4	; 0x04
    311c:	9d 81       	ldd	r25, Y+5	; 0x05
    311e:	81 30       	cpi	r24, 0x01	; 1
    3120:	91 05       	cpc	r25, r1
    3122:	e1 f0       	breq	.+56     	; 0x315c <DIO_port_write+0x60>
    3124:	2c 81       	ldd	r18, Y+4	; 0x04
    3126:	3d 81       	ldd	r19, Y+5	; 0x05
    3128:	22 30       	cpi	r18, 0x02	; 2
    312a:	31 05       	cpc	r19, r1
    312c:	2c f4       	brge	.+10     	; 0x3138 <DIO_port_write+0x3c>
    312e:	8c 81       	ldd	r24, Y+4	; 0x04
    3130:	9d 81       	ldd	r25, Y+5	; 0x05
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	61 f0       	breq	.+24     	; 0x314e <DIO_port_write+0x52>
    3136:	27 c0       	rjmp	.+78     	; 0x3186 <DIO_port_write+0x8a>
    3138:	2c 81       	ldd	r18, Y+4	; 0x04
    313a:	3d 81       	ldd	r19, Y+5	; 0x05
    313c:	22 30       	cpi	r18, 0x02	; 2
    313e:	31 05       	cpc	r19, r1
    3140:	a1 f0       	breq	.+40     	; 0x316a <DIO_port_write+0x6e>
    3142:	8c 81       	ldd	r24, Y+4	; 0x04
    3144:	9d 81       	ldd	r25, Y+5	; 0x05
    3146:	83 30       	cpi	r24, 0x03	; 3
    3148:	91 05       	cpc	r25, r1
    314a:	b1 f0       	breq	.+44     	; 0x3178 <DIO_port_write+0x7c>
    314c:	1c c0       	rjmp	.+56     	; 0x3186 <DIO_port_write+0x8a>
	{
	case PORTA_INDEX :{DIO_PORTA = value; retValue=ERROR_OK; break;}
    314e:	eb e3       	ldi	r30, 0x3B	; 59
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	8b 81       	ldd	r24, Y+3	; 0x03
    3154:	80 83       	st	Z, r24
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	16 c0       	rjmp	.+44     	; 0x3188 <DIO_port_write+0x8c>
	case PORTB_INDEX :{DIO_PORTB = value; retValue=ERROR_OK; break;}
    315c:	e8 e3       	ldi	r30, 0x38	; 56
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	80 83       	st	Z, r24
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	0f c0       	rjmp	.+30     	; 0x3188 <DIO_port_write+0x8c>
	case PORTC_INDEX :{DIO_PORTC = value; retValue=ERROR_OK; break;}
    316a:	e5 e3       	ldi	r30, 0x35	; 53
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	8b 81       	ldd	r24, Y+3	; 0x03
    3170:	80 83       	st	Z, r24
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	08 c0       	rjmp	.+16     	; 0x3188 <DIO_port_write+0x8c>
	case PORTD_INDEX :{DIO_PORTD = value; retValue=ERROR_OK; break;}
    3178:	e2 e3       	ldi	r30, 0x32	; 50
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	80 83       	st	Z, r24
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	01 c0       	rjmp	.+2      	; 0x3188 <DIO_port_write+0x8c>
	default: retValue=ERROR_NOT_OK;
    3186:	19 82       	std	Y+1, r1	; 0x01
	}

	return retValue;
    3188:	89 81       	ldd	r24, Y+1	; 0x01
}
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret

0000319a <DIO_port_toggle>:


Std_ReturnType DIO_port_toggle(portIndex_t port_object)
{
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <DIO_port_toggle+0x6>
    31a0:	00 d0       	rcall	.+0      	; 0x31a2 <DIO_port_toggle+0x8>
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType retValue= ERROR_NOT_OK;
    31a8:	19 82       	std	Y+1, r1	; 0x01

	switch(port_object)
    31aa:	8a 81       	ldd	r24, Y+2	; 0x02
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	3c 83       	std	Y+4, r19	; 0x04
    31b2:	2b 83       	std	Y+3, r18	; 0x03
    31b4:	8b 81       	ldd	r24, Y+3	; 0x03
    31b6:	9c 81       	ldd	r25, Y+4	; 0x04
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	91 05       	cpc	r25, r1
    31bc:	f9 f0       	breq	.+62     	; 0x31fc <DIO_port_toggle+0x62>
    31be:	2b 81       	ldd	r18, Y+3	; 0x03
    31c0:	3c 81       	ldd	r19, Y+4	; 0x04
    31c2:	22 30       	cpi	r18, 0x02	; 2
    31c4:	31 05       	cpc	r19, r1
    31c6:	2c f4       	brge	.+10     	; 0x31d2 <DIO_port_toggle+0x38>
    31c8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ca:	9c 81       	ldd	r25, Y+4	; 0x04
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	61 f0       	breq	.+24     	; 0x31e8 <DIO_port_toggle+0x4e>
    31d0:	33 c0       	rjmp	.+102    	; 0x3238 <DIO_port_toggle+0x9e>
    31d2:	2b 81       	ldd	r18, Y+3	; 0x03
    31d4:	3c 81       	ldd	r19, Y+4	; 0x04
    31d6:	22 30       	cpi	r18, 0x02	; 2
    31d8:	31 05       	cpc	r19, r1
    31da:	d1 f0       	breq	.+52     	; 0x3210 <DIO_port_toggle+0x76>
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	9c 81       	ldd	r25, Y+4	; 0x04
    31e0:	83 30       	cpi	r24, 0x03	; 3
    31e2:	91 05       	cpc	r25, r1
    31e4:	f9 f0       	breq	.+62     	; 0x3224 <DIO_port_toggle+0x8a>
    31e6:	28 c0       	rjmp	.+80     	; 0x3238 <DIO_port_toggle+0x9e>
	{
	case PORTA_INDEX :{DIO_PORTA ^=0xff; retValue=ERROR_OK; break;}
    31e8:	ab e3       	ldi	r26, 0x3B	; 59
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	eb e3       	ldi	r30, 0x3B	; 59
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	80 95       	com	r24
    31f4:	8c 93       	st	X, r24
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	1f c0       	rjmp	.+62     	; 0x323a <DIO_port_toggle+0xa0>
	case PORTB_INDEX :{DIO_PORTB ^=0xff; retValue=ERROR_OK; break;}
    31fc:	a8 e3       	ldi	r26, 0x38	; 56
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	e8 e3       	ldi	r30, 0x38	; 56
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	80 95       	com	r24
    3208:	8c 93       	st	X, r24
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	89 83       	std	Y+1, r24	; 0x01
    320e:	15 c0       	rjmp	.+42     	; 0x323a <DIO_port_toggle+0xa0>
	case PORTC_INDEX :{DIO_PORTC ^=0xff; retValue=ERROR_OK; break;}
    3210:	a5 e3       	ldi	r26, 0x35	; 53
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e5 e3       	ldi	r30, 0x35	; 53
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	80 95       	com	r24
    321c:	8c 93       	st	X, r24
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	89 83       	std	Y+1, r24	; 0x01
    3222:	0b c0       	rjmp	.+22     	; 0x323a <DIO_port_toggle+0xa0>
	case PORTD_INDEX :{DIO_PORTD ^=0xff; retValue=ERROR_OK; break;}
    3224:	a2 e3       	ldi	r26, 0x32	; 50
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	e2 e3       	ldi	r30, 0x32	; 50
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	80 95       	com	r24
    3230:	8c 93       	st	X, r24
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	01 c0       	rjmp	.+2      	; 0x323a <DIO_port_toggle+0xa0>
	default: retValue=ERROR_NOT_OK;
    3238:	19 82       	std	Y+1, r1	; 0x01
	}

	return retValue;
    323a:	89 81       	ldd	r24, Y+1	; 0x01
}
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	cf 91       	pop	r28
    3246:	df 91       	pop	r29
    3248:	08 95       	ret

0000324a <calculation>:
#include "ecu/keypad/keypad.h"
#include "ecu/LCD/lcd.h"


sint32 calculation(sint32 num1,sint32 num2,uint8 op)
{
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	29 97       	sbiw	r28, 0x09	; 9
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	9c 83       	std	Y+4, r25	; 0x04
    3260:	8b 83       	std	Y+3, r24	; 0x03
    3262:	7e 83       	std	Y+6, r23	; 0x06
    3264:	6d 83       	std	Y+5, r22	; 0x05
    3266:	4f 83       	std	Y+7, r20	; 0x07
	sint32 result;

	switch(op)
    3268:	8f 81       	ldd	r24, Y+7	; 0x07
    326a:	28 2f       	mov	r18, r24
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	39 87       	std	Y+9, r19	; 0x09
    3270:	28 87       	std	Y+8, r18	; 0x08
    3272:	48 85       	ldd	r20, Y+8	; 0x08
    3274:	59 85       	ldd	r21, Y+9	; 0x09
    3276:	4b 32       	cpi	r20, 0x2B	; 43
    3278:	51 05       	cpc	r21, r1
    327a:	b1 f0       	breq	.+44     	; 0x32a8 <calculation+0x5e>
    327c:	88 85       	ldd	r24, Y+8	; 0x08
    327e:	99 85       	ldd	r25, Y+9	; 0x09
    3280:	8c 32       	cpi	r24, 0x2C	; 44
    3282:	91 05       	cpc	r25, r1
    3284:	34 f4       	brge	.+12     	; 0x3292 <calculation+0x48>
    3286:	28 85       	ldd	r18, Y+8	; 0x08
    3288:	39 85       	ldd	r19, Y+9	; 0x09
    328a:	2a 32       	cpi	r18, 0x2A	; 42
    328c:	31 05       	cpc	r19, r1
    328e:	f1 f0       	breq	.+60     	; 0x32cc <calculation+0x82>
    3290:	37 c0       	rjmp	.+110    	; 0x3300 <calculation+0xb6>
    3292:	48 85       	ldd	r20, Y+8	; 0x08
    3294:	59 85       	ldd	r21, Y+9	; 0x09
    3296:	4d 32       	cpi	r20, 0x2D	; 45
    3298:	51 05       	cpc	r21, r1
    329a:	79 f0       	breq	.+30     	; 0x32ba <calculation+0x70>
    329c:	88 85       	ldd	r24, Y+8	; 0x08
    329e:	99 85       	ldd	r25, Y+9	; 0x09
    32a0:	8f 32       	cpi	r24, 0x2F	; 47
    32a2:	91 05       	cpc	r25, r1
    32a4:	11 f1       	breq	.+68     	; 0x32ea <calculation+0xa0>
    32a6:	2c c0       	rjmp	.+88     	; 0x3300 <calculation+0xb6>
	{
	case '+':	{result = num1 + num2; break;}
    32a8:	8b 81       	ldd	r24, Y+3	; 0x03
    32aa:	9c 81       	ldd	r25, Y+4	; 0x04
    32ac:	2d 81       	ldd	r18, Y+5	; 0x05
    32ae:	3e 81       	ldd	r19, Y+6	; 0x06
    32b0:	82 0f       	add	r24, r18
    32b2:	93 1f       	adc	r25, r19
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01
    32b8:	25 c0       	rjmp	.+74     	; 0x3304 <calculation+0xba>
	case '-':	{result = num1 - num2; break;}
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	9c 81       	ldd	r25, Y+4	; 0x04
    32be:	2d 81       	ldd	r18, Y+5	; 0x05
    32c0:	3e 81       	ldd	r19, Y+6	; 0x06
    32c2:	82 1b       	sub	r24, r18
    32c4:	93 0b       	sbc	r25, r19
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	1c c0       	rjmp	.+56     	; 0x3304 <calculation+0xba>
	case '*':	{result = num1 * num2; break;}
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	9c 81       	ldd	r25, Y+4	; 0x04
    32d0:	2d 81       	ldd	r18, Y+5	; 0x05
    32d2:	3e 81       	ldd	r19, Y+6	; 0x06
    32d4:	ac 01       	movw	r20, r24
    32d6:	42 9f       	mul	r20, r18
    32d8:	c0 01       	movw	r24, r0
    32da:	43 9f       	mul	r20, r19
    32dc:	90 0d       	add	r25, r0
    32de:	52 9f       	mul	r21, r18
    32e0:	90 0d       	add	r25, r0
    32e2:	11 24       	eor	r1, r1
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	89 83       	std	Y+1, r24	; 0x01
    32e8:	0d c0       	rjmp	.+26     	; 0x3304 <calculation+0xba>
	case '/':	{result = num1 / num2; break;}
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	2d 81       	ldd	r18, Y+5	; 0x05
    32f0:	3e 81       	ldd	r19, Y+6	; 0x06
    32f2:	b9 01       	movw	r22, r18
    32f4:	0e 94 17 1b 	call	0x362e	; 0x362e <__divmodhi4>
    32f8:	cb 01       	movw	r24, r22
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <calculation+0xba>
	default : result=0;
    3300:	1a 82       	std	Y+2, r1	; 0x02
    3302:	19 82       	std	Y+1, r1	; 0x01
	}

	return result;
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3308:	29 96       	adiw	r28, 0x09	; 9
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <main>:
		.lcd_data[3].directionSel = OUTPUT
};


int main()
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	2a 97       	sbiw	r28, 0x0a	; 10
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61

	ret = lcd_4bit_init(&lcd_1);
    332e:	89 ea       	ldi	r24, 0xA9	; 169
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	0e 94 9c 09 	call	0x1338	; 0x1338 <lcd_4bit_init>
    3336:	80 93 c2 00 	sts	0x00C2, r24
	ret = KEYPAD_init(&keypad_1);
    333a:	81 e9       	ldi	r24, 0x91	; 145
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <KEYPAD_init>
    3342:	80 93 c2 00 	sts	0x00C2, r24

	uint8   i=0;
    3346:	19 86       	std	Y+9, r1	; 0x09
	uint8   flag=0;
    3348:	18 86       	std	Y+8, r1	; 0x08
	sint32  number2;
	uint8   operation;

	sint32 result;

	for(i=0;i<4;i++)
    334a:	19 86       	std	Y+9, r1	; 0x09
    334c:	3d c0       	rjmp	.+122    	; 0x33c8 <main+0xae>
		{
			while(!KEYPAD_read(&keypad_1,&value));
    334e:	81 e9       	ldi	r24, 0x91	; 145
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	9e 01       	movw	r18, r28
    3354:	26 5f       	subi	r18, 0xF6	; 246
    3356:	3f 4f       	sbci	r19, 0xFF	; 255
    3358:	b9 01       	movw	r22, r18
    335a:	0e 94 b4 06 	call	0xd68	; 0xd68 <KEYPAD_read>
    335e:	88 23       	and	r24, r24
    3360:	b1 f3       	breq	.-20     	; 0x334e <main+0x34>

			if(value == '-' || value == '+' || value == '*' || value == '/' )
    3362:	8a 85       	ldd	r24, Y+10	; 0x0a
    3364:	8d 32       	cpi	r24, 0x2D	; 45
    3366:	49 f0       	breq	.+18     	; 0x337a <main+0x60>
    3368:	8a 85       	ldd	r24, Y+10	; 0x0a
    336a:	8b 32       	cpi	r24, 0x2B	; 43
    336c:	31 f0       	breq	.+12     	; 0x337a <main+0x60>
    336e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3370:	8a 32       	cpi	r24, 0x2A	; 42
    3372:	19 f0       	breq	.+6      	; 0x337a <main+0x60>
    3374:	8a 85       	ldd	r24, Y+10	; 0x0a
    3376:	8f 32       	cpi	r24, 0x2F	; 47
    3378:	51 f4       	brne	.+20     	; 0x338e <main+0x74>
			{
				operation = value;
    337a:	8a 85       	ldd	r24, Y+10	; 0x0a
    337c:	8b 83       	std	Y+3, r24	; 0x03
				lcd_4bit_send_char(&lcd_1,operation);
    337e:	89 ea       	ldi	r24, 0xA9	; 169
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	6b 81       	ldd	r22, Y+3	; 0x03
    3384:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
				flag = 1;
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	88 87       	std	Y+8, r24	; 0x08
    338c:	21 c0       	rjmp	.+66     	; 0x33d0 <main+0xb6>
				break;
			}
			else
			{
				lcd_4bit_send_char(&lcd_1,value);
    338e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3390:	89 ea       	ldi	r24, 0xA9	; 169
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	62 2f       	mov	r22, r18
    3396:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
				number1= number1*10+value-'0';
    339a:	8e 81       	ldd	r24, Y+6	; 0x06
    339c:	9f 81       	ldd	r25, Y+7	; 0x07
    339e:	9c 01       	movw	r18, r24
    33a0:	22 0f       	add	r18, r18
    33a2:	33 1f       	adc	r19, r19
    33a4:	c9 01       	movw	r24, r18
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	28 0f       	add	r18, r24
    33b0:	39 1f       	adc	r19, r25
    33b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    33b4:	88 2f       	mov	r24, r24
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	82 0f       	add	r24, r18
    33ba:	93 1f       	adc	r25, r19
    33bc:	c0 97       	sbiw	r24, 0x30	; 48
    33be:	9f 83       	std	Y+7, r25	; 0x07
    33c0:	8e 83       	std	Y+6, r24	; 0x06
	sint32  number2;
	uint8   operation;

	sint32 result;

	for(i=0;i<4;i++)
    33c2:	89 85       	ldd	r24, Y+9	; 0x09
    33c4:	8f 5f       	subi	r24, 0xFF	; 255
    33c6:	89 87       	std	Y+9, r24	; 0x09
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	84 30       	cpi	r24, 0x04	; 4
    33cc:	08 f4       	brcc	.+2      	; 0x33d0 <main+0xb6>
    33ce:	bf cf       	rjmp	.-130    	; 0x334e <main+0x34>
				lcd_4bit_send_char(&lcd_1,value);
				number1= number1*10+value-'0';
			}
		}

		if(0 == flag)
    33d0:	88 85       	ldd	r24, Y+8	; 0x08
    33d2:	88 23       	and	r24, r24
    33d4:	89 f4       	brne	.+34     	; 0x33f8 <main+0xde>
		{
			while(!KEYPAD_read(&keypad_1,&value));
    33d6:	81 e9       	ldi	r24, 0x91	; 145
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	9e 01       	movw	r18, r28
    33dc:	26 5f       	subi	r18, 0xF6	; 246
    33de:	3f 4f       	sbci	r19, 0xFF	; 255
    33e0:	b9 01       	movw	r22, r18
    33e2:	0e 94 b4 06 	call	0xd68	; 0xd68 <KEYPAD_read>
    33e6:	88 23       	and	r24, r24
    33e8:	b1 f3       	breq	.-20     	; 0x33d6 <main+0xbc>
			operation = value;
    33ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ec:	8b 83       	std	Y+3, r24	; 0x03
			lcd_4bit_send_char(&lcd_1,operation);
    33ee:	89 ea       	ldi	r24, 0xA9	; 169
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	6b 81       	ldd	r22, Y+3	; 0x03
    33f4:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
		}

		for(i=0;i<4;i++)
    33f8:	19 86       	std	Y+9, r1	; 0x09
    33fa:	55 c0       	rjmp	.+170    	; 0x34a6 <main+0x18c>
		{
			while(!KEYPAD_read(&keypad_1,&value));
    33fc:	81 e9       	ldi	r24, 0x91	; 145
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	9e 01       	movw	r18, r28
    3402:	26 5f       	subi	r18, 0xF6	; 246
    3404:	3f 4f       	sbci	r19, 0xFF	; 255
    3406:	b9 01       	movw	r22, r18
    3408:	0e 94 b4 06 	call	0xd68	; 0xd68 <KEYPAD_read>
    340c:	88 23       	and	r24, r24
    340e:	b1 f3       	breq	.-20     	; 0x33fc <main+0xe2>

		if(value == '=')
    3410:	8a 85       	ldd	r24, Y+10	; 0x0a
    3412:	8d 33       	cpi	r24, 0x3D	; 61
    3414:	59 f5       	brne	.+86     	; 0x346c <main+0x152>
		{
			lcd_4bit_send_char(&lcd_1,value);
    3416:	2a 85       	ldd	r18, Y+10	; 0x0a
    3418:	89 ea       	ldi	r24, 0xA9	; 169
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	62 2f       	mov	r22, r18
    341e:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>

			if(number2 == 0 && operation =='/')
    3422:	8c 81       	ldd	r24, Y+4	; 0x04
    3424:	9d 81       	ldd	r25, Y+5	; 0x05
    3426:	00 97       	sbiw	r24, 0x00	; 0
    3428:	69 f4       	brne	.+26     	; 0x3444 <main+0x12a>
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	8f 32       	cpi	r24, 0x2F	; 47
    342e:	51 f4       	brne	.+20     	; 0x3444 <main+0x12a>
			{
				lcd_4bit_send_string(&lcd_1,"Invalid");
    3430:	89 ea       	ldi	r24, 0xA9	; 169
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	20 e6       	ldi	r18, 0x60	; 96
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	b9 01       	movw	r22, r18
    343a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_4bit_send_string>
				flag =1;
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	88 87       	std	Y+8, r24	; 0x08
    3442:	35 c0       	rjmp	.+106    	; 0x34ae <main+0x194>
				break;

			}
			result = calculation(number1,number2,operation);
    3444:	8e 81       	ldd	r24, Y+6	; 0x06
    3446:	9f 81       	ldd	r25, Y+7	; 0x07
    3448:	2c 81       	ldd	r18, Y+4	; 0x04
    344a:	3d 81       	ldd	r19, Y+5	; 0x05
    344c:	b9 01       	movw	r22, r18
    344e:	4b 81       	ldd	r20, Y+3	; 0x03
    3450:	0e 94 25 19 	call	0x324a	; 0x324a <calculation>
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
			lcd_4bit_send_number(&lcd_1,result);
    3458:	89 ea       	ldi	r24, 0xA9	; 169
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	29 81       	ldd	r18, Y+1	; 0x01
    345e:	3a 81       	ldd	r19, Y+2	; 0x02
    3460:	b9 01       	movw	r22, r18
    3462:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <lcd_4bit_send_number>
			flag = 1;
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	88 87       	std	Y+8, r24	; 0x08
    346a:	21 c0       	rjmp	.+66     	; 0x34ae <main+0x194>
			break;
		}
		else
		{
			number2 =number2*10+value-'0';
    346c:	8c 81       	ldd	r24, Y+4	; 0x04
    346e:	9d 81       	ldd	r25, Y+5	; 0x05
    3470:	9c 01       	movw	r18, r24
    3472:	22 0f       	add	r18, r18
    3474:	33 1f       	adc	r19, r19
    3476:	c9 01       	movw	r24, r18
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	88 0f       	add	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	28 0f       	add	r18, r24
    3482:	39 1f       	adc	r19, r25
    3484:	8a 85       	ldd	r24, Y+10	; 0x0a
    3486:	88 2f       	mov	r24, r24
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	82 0f       	add	r24, r18
    348c:	93 1f       	adc	r25, r19
    348e:	c0 97       	sbiw	r24, 0x30	; 48
    3490:	9d 83       	std	Y+5, r25	; 0x05
    3492:	8c 83       	std	Y+4, r24	; 0x04
			lcd_4bit_send_char(&lcd_1,value);
    3494:	2a 85       	ldd	r18, Y+10	; 0x0a
    3496:	89 ea       	ldi	r24, 0xA9	; 169
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	62 2f       	mov	r22, r18
    349c:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
			while(!KEYPAD_read(&keypad_1,&value));
			operation = value;
			lcd_4bit_send_char(&lcd_1,operation);
		}

		for(i=0;i<4;i++)
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	8f 5f       	subi	r24, 0xFF	; 255
    34a4:	89 87       	std	Y+9, r24	; 0x09
    34a6:	89 85       	ldd	r24, Y+9	; 0x09
    34a8:	84 30       	cpi	r24, 0x04	; 4
    34aa:	08 f4       	brcc	.+2      	; 0x34ae <main+0x194>
    34ac:	a7 cf       	rjmp	.-178    	; 0x33fc <main+0xe2>
			number2 =number2*10+value-'0';
			lcd_4bit_send_char(&lcd_1,value);
		}
	}

	if(0 == flag)
    34ae:	88 85       	ldd	r24, Y+8	; 0x08
    34b0:	88 23       	and	r24, r24
    34b2:	b9 f4       	brne	.+46     	; 0x34e2 <main+0x1c8>
	{
		lcd_4bit_send_char(&lcd_1,value);
    34b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    34b6:	89 ea       	ldi	r24, 0xA9	; 169
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	62 2f       	mov	r22, r18
    34bc:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
		result = calculation(number1,number2,operation);
    34c0:	8e 81       	ldd	r24, Y+6	; 0x06
    34c2:	9f 81       	ldd	r25, Y+7	; 0x07
    34c4:	2c 81       	ldd	r18, Y+4	; 0x04
    34c6:	3d 81       	ldd	r19, Y+5	; 0x05
    34c8:	b9 01       	movw	r22, r18
    34ca:	4b 81       	ldd	r20, Y+3	; 0x03
    34cc:	0e 94 25 19 	call	0x324a	; 0x324a <calculation>
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
		lcd_4bit_send_number(&lcd_1,result);
    34d4:	89 ea       	ldi	r24, 0xA9	; 169
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	29 81       	ldd	r18, Y+1	; 0x01
    34da:	3a 81       	ldd	r19, Y+2	; 0x02
    34dc:	b9 01       	movw	r22, r18
    34de:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <lcd_4bit_send_number>
	}

	while(1)
	{

		while(!KEYPAD_read(&keypad_1, &value));
    34e2:	81 e9       	ldi	r24, 0x91	; 145
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	9e 01       	movw	r18, r28
    34e8:	26 5f       	subi	r18, 0xF6	; 246
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
    34ec:	b9 01       	movw	r22, r18
    34ee:	0e 94 b4 06 	call	0xd68	; 0xd68 <KEYPAD_read>
    34f2:	88 23       	and	r24, r24
    34f4:	b1 f3       	breq	.-20     	; 0x34e2 <main+0x1c8>
		if('#' == value)
    34f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    34f8:	83 32       	cpi	r24, 0x23	; 35
    34fa:	31 f4       	brne	.+12     	; 0x3508 <main+0x1ee>
			lcd_4bit_send_command(&lcd_1,_LCD_CLEAR);
    34fc:	89 ea       	ldi	r24, 0xA9	; 169
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	61 e0       	ldi	r22, 0x01	; 1
    3502:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
    3506:	ed cf       	rjmp	.-38     	; 0x34e2 <main+0x1c8>
		else
		{
			operation = value;
    3508:	8a 85       	ldd	r24, Y+10	; 0x0a
    350a:	8b 83       	std	Y+3, r24	; 0x03
			flag = 0;
    350c:	18 86       	std	Y+8, r1	; 0x08
			number1 = result;
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	9a 81       	ldd	r25, Y+2	; 0x02
    3512:	9f 83       	std	Y+7, r25	; 0x07
    3514:	8e 83       	std	Y+6, r24	; 0x06
			number2=0;
    3516:	1d 82       	std	Y+5, r1	; 0x05
    3518:	1c 82       	std	Y+4, r1	; 0x04
			lcd_4bit_send_command(&lcd_1,_LCD_CLEAR);
    351a:	89 ea       	ldi	r24, 0xA9	; 169
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	61 e0       	ldi	r22, 0x01	; 1
    3520:	0e 94 8e 0c 	call	0x191c	; 0x191c <lcd_4bit_send_command>
			lcd_4bit_send_string(&lcd_1,"answer");
    3524:	89 ea       	ldi	r24, 0xA9	; 169
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	28 e6       	ldi	r18, 0x68	; 104
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	b9 01       	movw	r22, r18
    352e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_4bit_send_string>
			operation = value;
    3532:	8a 85       	ldd	r24, Y+10	; 0x0a
    3534:	8b 83       	std	Y+3, r24	; 0x03
			lcd_4bit_send_char(&lcd_1,operation);
    3536:	89 ea       	ldi	r24, 0xA9	; 169
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	6b 81       	ldd	r22, Y+3	; 0x03
    353c:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>

			for(i=0;i<4;i++)
    3540:	19 86       	std	Y+9, r1	; 0x09
    3542:	55 c0       	rjmp	.+170    	; 0x35ee <main+0x2d4>
			{
				while(!KEYPAD_read(&keypad_1,&value));
    3544:	81 e9       	ldi	r24, 0x91	; 145
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	9e 01       	movw	r18, r28
    354a:	26 5f       	subi	r18, 0xF6	; 246
    354c:	3f 4f       	sbci	r19, 0xFF	; 255
    354e:	b9 01       	movw	r22, r18
    3550:	0e 94 b4 06 	call	0xd68	; 0xd68 <KEYPAD_read>
    3554:	88 23       	and	r24, r24
    3556:	b1 f3       	breq	.-20     	; 0x3544 <main+0x22a>

				if(value == '=')
    3558:	8a 85       	ldd	r24, Y+10	; 0x0a
    355a:	8d 33       	cpi	r24, 0x3D	; 61
    355c:	59 f5       	brne	.+86     	; 0x35b4 <main+0x29a>
				{
					lcd_4bit_send_char(&lcd_1,value);
    355e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3560:	89 ea       	ldi	r24, 0xA9	; 169
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	62 2f       	mov	r22, r18
    3566:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
					if(number2 == 0 && operation =='/')
    356a:	8c 81       	ldd	r24, Y+4	; 0x04
    356c:	9d 81       	ldd	r25, Y+5	; 0x05
    356e:	00 97       	sbiw	r24, 0x00	; 0
    3570:	69 f4       	brne	.+26     	; 0x358c <main+0x272>
    3572:	8b 81       	ldd	r24, Y+3	; 0x03
    3574:	8f 32       	cpi	r24, 0x2F	; 47
    3576:	51 f4       	brne	.+20     	; 0x358c <main+0x272>
					{
						lcd_4bit_send_string(&lcd_1,"Invalid");
    3578:	89 ea       	ldi	r24, 0xA9	; 169
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	20 e6       	ldi	r18, 0x60	; 96
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	b9 01       	movw	r22, r18
    3582:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_4bit_send_string>
						flag =1;
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	88 87       	std	Y+8, r24	; 0x08
    358a:	35 c0       	rjmp	.+106    	; 0x35f6 <main+0x2dc>
						break;
					}
					result = calculation(number1,number2,operation);
    358c:	8e 81       	ldd	r24, Y+6	; 0x06
    358e:	9f 81       	ldd	r25, Y+7	; 0x07
    3590:	2c 81       	ldd	r18, Y+4	; 0x04
    3592:	3d 81       	ldd	r19, Y+5	; 0x05
    3594:	b9 01       	movw	r22, r18
    3596:	4b 81       	ldd	r20, Y+3	; 0x03
    3598:	0e 94 25 19 	call	0x324a	; 0x324a <calculation>
    359c:	9a 83       	std	Y+2, r25	; 0x02
    359e:	89 83       	std	Y+1, r24	; 0x01
					lcd_4bit_send_number(&lcd_1,result);
    35a0:	89 ea       	ldi	r24, 0xA9	; 169
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	29 81       	ldd	r18, Y+1	; 0x01
    35a6:	3a 81       	ldd	r19, Y+2	; 0x02
    35a8:	b9 01       	movw	r22, r18
    35aa:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <lcd_4bit_send_number>
					flag = 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	88 87       	std	Y+8, r24	; 0x08
    35b2:	21 c0       	rjmp	.+66     	; 0x35f6 <main+0x2dc>
					break;
				}
				else
				{
					number2 = number2*10+value-'0';
    35b4:	8c 81       	ldd	r24, Y+4	; 0x04
    35b6:	9d 81       	ldd	r25, Y+5	; 0x05
    35b8:	9c 01       	movw	r18, r24
    35ba:	22 0f       	add	r18, r18
    35bc:	33 1f       	adc	r19, r19
    35be:	c9 01       	movw	r24, r18
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	88 0f       	add	r24, r24
    35c6:	99 1f       	adc	r25, r25
    35c8:	28 0f       	add	r18, r24
    35ca:	39 1f       	adc	r19, r25
    35cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    35ce:	88 2f       	mov	r24, r24
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	82 0f       	add	r24, r18
    35d4:	93 1f       	adc	r25, r19
    35d6:	c0 97       	sbiw	r24, 0x30	; 48
    35d8:	9d 83       	std	Y+5, r25	; 0x05
    35da:	8c 83       	std	Y+4, r24	; 0x04
					lcd_4bit_send_char(&lcd_1,value);
    35dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    35de:	89 ea       	ldi	r24, 0xA9	; 169
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	62 2f       	mov	r22, r18
    35e4:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
			lcd_4bit_send_command(&lcd_1,_LCD_CLEAR);
			lcd_4bit_send_string(&lcd_1,"answer");
			operation = value;
			lcd_4bit_send_char(&lcd_1,operation);

			for(i=0;i<4;i++)
    35e8:	89 85       	ldd	r24, Y+9	; 0x09
    35ea:	8f 5f       	subi	r24, 0xFF	; 255
    35ec:	89 87       	std	Y+9, r24	; 0x09
    35ee:	89 85       	ldd	r24, Y+9	; 0x09
    35f0:	84 30       	cpi	r24, 0x04	; 4
    35f2:	08 f4       	brcc	.+2      	; 0x35f6 <main+0x2dc>
    35f4:	a7 cf       	rjmp	.-178    	; 0x3544 <main+0x22a>
					number2 = number2*10+value-'0';
					lcd_4bit_send_char(&lcd_1,value);
				}
			}

			if(0 == flag)
    35f6:	88 85       	ldd	r24, Y+8	; 0x08
    35f8:	88 23       	and	r24, r24
    35fa:	09 f0       	breq	.+2      	; 0x35fe <main+0x2e4>
    35fc:	72 cf       	rjmp	.-284    	; 0x34e2 <main+0x1c8>
			{
				lcd_4bit_send_char(&lcd_1,value);
    35fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    3600:	89 ea       	ldi	r24, 0xA9	; 169
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	62 2f       	mov	r22, r18
    3606:	0e 94 c6 0c 	call	0x198c	; 0x198c <lcd_4bit_send_char>
				result = calculation(number1,number2,operation);
    360a:	8e 81       	ldd	r24, Y+6	; 0x06
    360c:	9f 81       	ldd	r25, Y+7	; 0x07
    360e:	2c 81       	ldd	r18, Y+4	; 0x04
    3610:	3d 81       	ldd	r19, Y+5	; 0x05
    3612:	b9 01       	movw	r22, r18
    3614:	4b 81       	ldd	r20, Y+3	; 0x03
    3616:	0e 94 25 19 	call	0x324a	; 0x324a <calculation>
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01
				lcd_4bit_send_number(&lcd_1,result);
    361e:	89 ea       	ldi	r24, 0xA9	; 169
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	29 81       	ldd	r18, Y+1	; 0x01
    3624:	3a 81       	ldd	r19, Y+2	; 0x02
    3626:	b9 01       	movw	r22, r18
    3628:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <lcd_4bit_send_number>
    362c:	5a cf       	rjmp	.-332    	; 0x34e2 <main+0x1c8>

0000362e <__divmodhi4>:
    362e:	97 fb       	bst	r25, 7
    3630:	09 2e       	mov	r0, r25
    3632:	07 26       	eor	r0, r23
    3634:	0a d0       	rcall	.+20     	; 0x364a <__divmodhi4_neg1>
    3636:	77 fd       	sbrc	r23, 7
    3638:	04 d0       	rcall	.+8      	; 0x3642 <__divmodhi4_neg2>
    363a:	0c d0       	rcall	.+24     	; 0x3654 <__udivmodhi4>
    363c:	06 d0       	rcall	.+12     	; 0x364a <__divmodhi4_neg1>
    363e:	00 20       	and	r0, r0
    3640:	1a f4       	brpl	.+6      	; 0x3648 <__divmodhi4_exit>

00003642 <__divmodhi4_neg2>:
    3642:	70 95       	com	r23
    3644:	61 95       	neg	r22
    3646:	7f 4f       	sbci	r23, 0xFF	; 255

00003648 <__divmodhi4_exit>:
    3648:	08 95       	ret

0000364a <__divmodhi4_neg1>:
    364a:	f6 f7       	brtc	.-4      	; 0x3648 <__divmodhi4_exit>
    364c:	90 95       	com	r25
    364e:	81 95       	neg	r24
    3650:	9f 4f       	sbci	r25, 0xFF	; 255
    3652:	08 95       	ret

00003654 <__udivmodhi4>:
    3654:	aa 1b       	sub	r26, r26
    3656:	bb 1b       	sub	r27, r27
    3658:	51 e1       	ldi	r21, 0x11	; 17
    365a:	07 c0       	rjmp	.+14     	; 0x366a <__udivmodhi4_ep>

0000365c <__udivmodhi4_loop>:
    365c:	aa 1f       	adc	r26, r26
    365e:	bb 1f       	adc	r27, r27
    3660:	a6 17       	cp	r26, r22
    3662:	b7 07       	cpc	r27, r23
    3664:	10 f0       	brcs	.+4      	; 0x366a <__udivmodhi4_ep>
    3666:	a6 1b       	sub	r26, r22
    3668:	b7 0b       	sbc	r27, r23

0000366a <__udivmodhi4_ep>:
    366a:	88 1f       	adc	r24, r24
    366c:	99 1f       	adc	r25, r25
    366e:	5a 95       	dec	r21
    3670:	a9 f7       	brne	.-22     	; 0x365c <__udivmodhi4_loop>
    3672:	80 95       	com	r24
    3674:	90 95       	com	r25
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	08 95       	ret

0000367c <__prologue_saves__>:
    367c:	2f 92       	push	r2
    367e:	3f 92       	push	r3
    3680:	4f 92       	push	r4
    3682:	5f 92       	push	r5
    3684:	6f 92       	push	r6
    3686:	7f 92       	push	r7
    3688:	8f 92       	push	r8
    368a:	9f 92       	push	r9
    368c:	af 92       	push	r10
    368e:	bf 92       	push	r11
    3690:	cf 92       	push	r12
    3692:	df 92       	push	r13
    3694:	ef 92       	push	r14
    3696:	ff 92       	push	r15
    3698:	0f 93       	push	r16
    369a:	1f 93       	push	r17
    369c:	cf 93       	push	r28
    369e:	df 93       	push	r29
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	ca 1b       	sub	r28, r26
    36a6:	db 0b       	sbc	r29, r27
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	09 94       	ijmp

000036b4 <__epilogue_restores__>:
    36b4:	2a 88       	ldd	r2, Y+18	; 0x12
    36b6:	39 88       	ldd	r3, Y+17	; 0x11
    36b8:	48 88       	ldd	r4, Y+16	; 0x10
    36ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    36bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    36be:	7d 84       	ldd	r7, Y+13	; 0x0d
    36c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    36c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    36c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    36c6:	b9 84       	ldd	r11, Y+9	; 0x09
    36c8:	c8 84       	ldd	r12, Y+8	; 0x08
    36ca:	df 80       	ldd	r13, Y+7	; 0x07
    36cc:	ee 80       	ldd	r14, Y+6	; 0x06
    36ce:	fd 80       	ldd	r15, Y+5	; 0x05
    36d0:	0c 81       	ldd	r16, Y+4	; 0x04
    36d2:	1b 81       	ldd	r17, Y+3	; 0x03
    36d4:	aa 81       	ldd	r26, Y+2	; 0x02
    36d6:	b9 81       	ldd	r27, Y+1	; 0x01
    36d8:	ce 0f       	add	r28, r30
    36da:	d1 1d       	adc	r29, r1
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	ed 01       	movw	r28, r26
    36e8:	08 95       	ret

000036ea <_exit>:
    36ea:	f8 94       	cli

000036ec <__stop_program>:
    36ec:	ff cf       	rjmp	.-2      	; 0x36ec <__stop_program>
